{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "django__django-10914", "model_patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..bdeec80610 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/reproduce_issue.py b/reproduce_issue.py\nnew file mode 100644\nindex 0000000000..7c1f13f478\n--- /dev/null\n+++ b/reproduce_issue.py\n@@ -0,0 +1,97 @@\n+#!/usr/bin/env python3\n+\n+import os\n+import tempfile\n+import shutil\n+from io import BytesIO\n+\n+# Set up Django\n+import django\n+from django.conf import settings\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary file usage\n+        FILE_UPLOAD_PERMISSIONS=None,  # This is the current default\n+    )\n+\n+django.setup()\n+\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import TemporaryUploadedFile, InMemoryUploadedFile\n+from django.core.files.base import ContentFile\n+\n+def test_file_permissions():\n+    \"\"\"Test to reproduce the file permission issue.\"\"\"\n+    \n+    # Create a temporary directory for testing\n+    test_dir = tempfile.mkdtemp()\n+    print(f\"Test directory: {test_dir}\")\n+    \n+    try:\n+        storage = FileSystemStorage(location=test_dir)\n+        \n+        # Test 1: Small file (uses InMemoryUploadedFile)\n+        print(\"\\n=== Test 1: Small file (InMemoryUploadedFile) ===\")\n+        small_content = b\"small file content\"\n+        small_file = InMemoryUploadedFile(\n+            file=BytesIO(small_content),\n+            field_name=\"test_field\",\n+            name=\"small_file.txt\",\n+            content_type=\"text/plain\",\n+            size=len(small_content),\n+            charset=None\n+        )\n+        \n+        small_name = storage.save(\"small_file.txt\", small_file)\n+        small_path = storage.path(small_name)\n+        small_mode = oct(os.stat(small_path).st_mode)[-3:]\n+        print(f\"Small file permissions: {small_mode}\")\n+        \n+        # Test 2: Large file (uses TemporaryUploadedFile)\n+        print(\"\\n=== Test 2: Large file (TemporaryUploadedFile) ===\")\n+        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n+        large_file = TemporaryUploadedFile(\n+            name=\"large_file.txt\",\n+            content_type=\"text/plain\",\n+            size=len(large_content),\n+            charset=None\n+        )\n+        large_file.write(large_content)\n+        large_file.seek(0)\n+        \n+        large_name = storage.save(\"large_file.txt\", large_file)\n+        large_path = storage.path(large_name)\n+        large_mode = oct(os.stat(large_path).st_mode)[-3:]\n+        print(f\"Large file permissions: {large_mode}\")\n+        \n+        # Test 3: Direct ContentFile (no upload handler)\n+        print(\"\\n=== Test 3: Direct ContentFile ===\")\n+        content_file = ContentFile(b\"direct content file\")\n+        direct_name = storage.save(\"direct_file.txt\", content_file)\n+        direct_path = storage.path(direct_name)\n+        direct_mode = oct(os.stat(direct_path).st_mode)[-3:]\n+        print(f\"Direct file permissions: {direct_mode}\")\n+        \n+        print(f\"\\n=== Summary ===\")\n+        print(f\"Small file (InMemoryUploadedFile): {small_mode}\")\n+        print(f\"Large file (TemporaryUploadedFile): {large_mode}\")\n+        print(f\"Direct file (ContentFile): {direct_mode}\")\n+        \n+        if small_mode != large_mode:\n+            print(\"\\n\u274c ISSUE CONFIRMED: File permissions are inconsistent!\")\n+            print(\"The issue is that TemporaryUploadedFile uses tempfile.NamedTemporaryFile\")\n+            print(\"which creates files with 0o600 permissions for security reasons.\")\n+            print(\"When file_move_safe() moves the temp file, it preserves these permissions.\")\n+        else:\n+            print(\"\\n\u2705 No permission inconsistency detected\")\n+            \n+    finally:\n+        # Clean up\n+        shutil.rmtree(test_dir)\n+        print(f\"\\nCleaned up test directory: {test_dir}\")\n+\n+if __name__ == \"__main__\":\n+    test_file_permissions()\n\\ No newline at end of file\ndiff --git a/test_fix.py b/test_fix.py\nnew file mode 100644\nindex 0000000000..106b7cc059\n--- /dev/null\n+++ b/test_fix.py\n@@ -0,0 +1,99 @@\n+#!/usr/bin/env python3\n+\n+import os\n+import tempfile\n+import shutil\n+from io import BytesIO\n+\n+# Set up Django\n+import django\n+from django.conf import settings\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary file usage\n+        # Don't override FILE_UPLOAD_PERMISSIONS - use the new default\n+    )\n+\n+django.setup()\n+\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import TemporaryUploadedFile, InMemoryUploadedFile\n+from django.core.files.base import ContentFile\n+\n+def test_file_permissions_fixed():\n+    \"\"\"Test that the file permission issue is fixed.\"\"\"\n+    \n+    # Create a temporary directory for testing\n+    test_dir = tempfile.mkdtemp()\n+    print(f\"Test directory: {test_dir}\")\n+    \n+    try:\n+        storage = FileSystemStorage(location=test_dir)\n+        \n+        # Test 1: Small file (uses InMemoryUploadedFile)\n+        print(\"\\n=== Test 1: Small file (InMemoryUploadedFile) ===\")\n+        small_content = b\"small file content\"\n+        small_file = InMemoryUploadedFile(\n+            file=BytesIO(small_content),\n+            field_name=\"test_field\",\n+            name=\"small_file.txt\",\n+            content_type=\"text/plain\",\n+            size=len(small_content),\n+            charset=None\n+        )\n+        \n+        small_name = storage.save(\"small_file.txt\", small_file)\n+        small_path = storage.path(small_name)\n+        small_mode = oct(os.stat(small_path).st_mode)[-3:]\n+        print(f\"Small file permissions: {small_mode}\")\n+        \n+        # Test 2: Large file (uses TemporaryUploadedFile)\n+        print(\"\\n=== Test 2: Large file (TemporaryUploadedFile) ===\")\n+        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n+        large_file = TemporaryUploadedFile(\n+            name=\"large_file.txt\",\n+            content_type=\"text/plain\",\n+            size=len(large_content),\n+            charset=None\n+        )\n+        large_file.write(large_content)\n+        large_file.seek(0)\n+        \n+        large_name = storage.save(\"large_file.txt\", large_file)\n+        large_path = storage.path(large_name)\n+        large_mode = oct(os.stat(large_path).st_mode)[-3:]\n+        print(f\"Large file permissions: {large_mode}\")\n+        \n+        # Test 3: Direct ContentFile (no upload handler)\n+        print(\"\\n=== Test 3: Direct ContentFile ===\")\n+        content_file = ContentFile(b\"direct content file\")\n+        direct_name = storage.save(\"direct_file.txt\", content_file)\n+        direct_path = storage.path(direct_name)\n+        direct_mode = oct(os.stat(direct_path).st_mode)[-3:]\n+        print(f\"Direct file permissions: {direct_mode}\")\n+        \n+        print(f\"\\n=== Summary ===\")\n+        print(f\"Small file (InMemoryUploadedFile): {small_mode}\")\n+        print(f\"Large file (TemporaryUploadedFile): {large_mode}\")\n+        print(f\"Direct file (ContentFile): {direct_mode}\")\n+        \n+        # Check that all files have the expected 644 permissions\n+        expected_mode = \"644\"\n+        if small_mode == expected_mode and large_mode == expected_mode and direct_mode == expected_mode:\n+            print(f\"\\n\u2705 SUCCESS: All files have consistent {expected_mode} permissions!\")\n+        else:\n+            print(f\"\\n\u274c ISSUE: File permissions are still inconsistent!\")\n+            \n+        # Also check the default setting\n+        print(f\"\\nFILE_UPLOAD_PERMISSIONS setting: {oct(settings.FILE_UPLOAD_PERMISSIONS)}\")\n+            \n+    finally:\n+        # Clean up\n+        shutil.rmtree(test_dir)\n+        print(f\"\\nCleaned up test directory: {test_dir}\")\n+\n+if __name__ == \"__main__\":\n+    test_file_permissions_fixed()\n\\ No newline at end of file\ndiff --git a/test_none.py b/test_none.py\nnew file mode 100644\nindex 0000000000..5712b4ca68\n--- /dev/null\n+++ b/test_none.py\n@@ -0,0 +1,88 @@\n+#!/usr/bin/env python3\n+\n+import os\n+import tempfile\n+import shutil\n+from io import BytesIO\n+\n+# Set up Django\n+import django\n+from django.conf import settings\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary file usage\n+        FILE_UPLOAD_PERMISSIONS=None,  # Explicitly set to None (old behavior)\n+    )\n+\n+django.setup()\n+\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import TemporaryUploadedFile, InMemoryUploadedFile\n+from django.core.files.base import ContentFile\n+\n+def test_none_permissions():\n+    \"\"\"Test that FILE_UPLOAD_PERMISSIONS=None still works (old behavior).\"\"\"\n+    \n+    # Create a temporary directory for testing\n+    test_dir = tempfile.mkdtemp()\n+    print(f\"Test directory: {test_dir}\")\n+    \n+    try:\n+        storage = FileSystemStorage(location=test_dir)\n+        \n+        # Test 1: Small file (uses InMemoryUploadedFile)\n+        print(\"\\n=== Test 1: Small file (InMemoryUploadedFile) ===\")\n+        small_content = b\"small file content\"\n+        small_file = InMemoryUploadedFile(\n+            file=BytesIO(small_content),\n+            field_name=\"test_field\",\n+            name=\"small_file.txt\",\n+            content_type=\"text/plain\",\n+            size=len(small_content),\n+            charset=None\n+        )\n+        \n+        small_name = storage.save(\"small_file.txt\", small_file)\n+        small_path = storage.path(small_name)\n+        small_mode = oct(os.stat(small_path).st_mode)[-3:]\n+        print(f\"Small file permissions: {small_mode}\")\n+        \n+        # Test 2: Large file (uses TemporaryUploadedFile)\n+        print(\"\\n=== Test 2: Large file (TemporaryUploadedFile) ===\")\n+        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n+        large_file = TemporaryUploadedFile(\n+            name=\"large_file.txt\",\n+            content_type=\"text/plain\",\n+            size=len(large_content),\n+            charset=None\n+        )\n+        large_file.write(large_content)\n+        large_file.seek(0)\n+        \n+        large_name = storage.save(\"large_file.txt\", large_file)\n+        large_path = storage.path(large_name)\n+        large_mode = oct(os.stat(large_path).st_mode)[-3:]\n+        print(f\"Large file permissions: {large_mode}\")\n+        \n+        print(f\"\\n=== Summary ===\")\n+        print(f\"Small file (InMemoryUploadedFile): {small_mode}\")\n+        print(f\"Large file (TemporaryUploadedFile): {large_mode}\")\n+        \n+        if small_mode != large_mode:\n+            print(\"\\n\u26a0\ufe0f  EXPECTED: File permissions are inconsistent (old behavior)\")\n+            print(\"This is the original issue that occurs when FILE_UPLOAD_PERMISSIONS=None\")\n+        else:\n+            print(\"\\n\u2705 Permissions are consistent\")\n+            \n+        print(f\"\\nFILE_UPLOAD_PERMISSIONS setting: {settings.FILE_UPLOAD_PERMISSIONS}\")\n+            \n+    finally:\n+        # Clean up\n+        shutil.rmtree(test_dir)\n+        print(f\"\\nCleaned up test directory: {test_dir}\")\n+\n+if __name__ == \"__main__\":\n+    test_none_permissions()\n\\ No newline at end of file\ndiff --git a/test_override.py b/test_override.py\nnew file mode 100644\nindex 0000000000..d7f433b539\n--- /dev/null\n+++ b/test_override.py\n@@ -0,0 +1,68 @@\n+#!/usr/bin/env python3\n+\n+import os\n+import tempfile\n+import shutil\n+from io import BytesIO\n+\n+# Set up Django\n+import django\n+from django.conf import settings\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary file usage\n+        FILE_UPLOAD_PERMISSIONS=0o755,  # Override the default\n+    )\n+\n+django.setup()\n+\n+from django.core.files.storage import FileSystemStorage\n+from django.core.files.uploadedfile import TemporaryUploadedFile, InMemoryUploadedFile\n+from django.core.files.base import ContentFile\n+\n+def test_override_permissions():\n+    \"\"\"Test that FILE_UPLOAD_PERMISSIONS can still be overridden.\"\"\"\n+    \n+    # Create a temporary directory for testing\n+    test_dir = tempfile.mkdtemp()\n+    print(f\"Test directory: {test_dir}\")\n+    \n+    try:\n+        storage = FileSystemStorage(location=test_dir)\n+        \n+        # Test with large file (uses TemporaryUploadedFile)\n+        print(\"\\n=== Test: Large file with overridden permissions ===\")\n+        large_content = b\"x\" * 2048  # Larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n+        large_file = TemporaryUploadedFile(\n+            name=\"large_file.txt\",\n+            content_type=\"text/plain\",\n+            size=len(large_content),\n+            charset=None\n+        )\n+        large_file.write(large_content)\n+        large_file.seek(0)\n+        \n+        large_name = storage.save(\"large_file.txt\", large_file)\n+        large_path = storage.path(large_name)\n+        large_mode = oct(os.stat(large_path).st_mode)[-3:]\n+        print(f\"Large file permissions: {large_mode}\")\n+        \n+        # Check that the override worked\n+        expected_mode = \"755\"\n+        if large_mode == expected_mode:\n+            print(f\"\\n\u2705 SUCCESS: Override to {expected_mode} permissions worked!\")\n+        else:\n+            print(f\"\\n\u274c ISSUE: Expected {expected_mode} but got {large_mode}!\")\n+            \n+        print(f\"\\nFILE_UPLOAD_PERMISSIONS setting: {oct(settings.FILE_UPLOAD_PERMISSIONS)}\")\n+            \n+    finally:\n+        # Clean up\n+        shutil.rmtree(test_dir)\n+        print(f\"\\nCleaned up test directory: {test_dir}\")\n+\n+if __name__ == \"__main__\":\n+    test_override_permissions()\n\\ No newline at end of file\ndiff --git a/test_readonly_original.py b/test_readonly_original.py\nnew file mode 100644\nindex 0000000000..1a8f26c734\n--- /dev/null\n+++ b/test_readonly_original.py\n@@ -0,0 +1,67 @@\n+#!/usr/bin/env python3\n+\n+import os\n+import tempfile\n+import shutil\n+import sys\n+\n+# Set up Django with original settings (FILE_UPLOAD_PERMISSIONS=None)\n+import django\n+from django.conf import settings\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        # Use new default (don't override FILE_UPLOAD_PERMISSIONS)\n+        MEDIA_ROOT=tempfile.mkdtemp(),\n+    )\n+\n+django.setup()\n+\n+from django.core.files.uploadedfile import SimpleUploadedFile\n+from django.db import models\n+\n+# Create a simple model for testing\n+class TestModel(models.Model):\n+    testfile = models.FileField(upload_to='test/')\n+    \n+    class Meta:\n+        app_label = 'test'\n+\n+def test_readonly_root():\n+    \"\"\"Test the readonly root scenario with original settings.\"\"\"\n+    \n+    media_root = settings.MEDIA_ROOT\n+    upload_dir = os.path.join(media_root, 'test')\n+    \n+    try:\n+        # Create the upload directory first\n+        os.makedirs(upload_dir, exist_ok=True)\n+        \n+        # Make the media root read-only\n+        os.chmod(media_root, 0o500)\n+        \n+        # Try to save a file\n+        obj = TestModel()\n+        try:\n+            obj.testfile.save('foo.txt', SimpleUploadedFile('foo.txt', b'x'), save=False)\n+            print(\"\u274c No PermissionError raised - this might be the issue\")\n+        except PermissionError as e:\n+            print(f\"\u2705 PermissionError raised as expected: {e}\")\n+        except Exception as e:\n+            print(f\"\u26a0\ufe0f  Different exception raised: {type(e).__name__}: {e}\")\n+        finally:\n+            # Restore permissions for cleanup\n+            os.chmod(media_root, 0o700)\n+            \n+    finally:\n+        # Clean up\n+        shutil.rmtree(media_root)\n+        print(f\"Cleaned up: {media_root}\")\n+\n+if __name__ == \"__main__\":\n+    if sys.platform == 'win32':\n+        print(\"Skipping test on Windows\")\n+    else:\n+        test_readonly_root()\n\\ No newline at end of file\n"}