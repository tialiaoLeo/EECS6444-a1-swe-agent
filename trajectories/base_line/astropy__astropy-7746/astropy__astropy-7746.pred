{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex d3a06f2b31..b00f49b02e 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1218,6 +1218,15 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise ValueError(\n                     \"Coordinate arrays are not broadcastable to each other\")\n \n+            # Handle empty arrays\n+            if axes[0].size == 0:\n+                # Return empty arrays with the same shape as input for each output axis\n+                if ra_dec_order and sky == 'output':\n+                    return (np.array([]).reshape(axes[0].shape),\n+                            np.array([]).reshape(axes[0].shape))\n+                return [np.array([]).reshape(axes[0].shape)\n+                        for i in range(self.naxis)]\n+\n             xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n \n             if ra_dec_order and sky == 'input':\n@@ -1235,6 +1244,12 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n                     \"of shape (N, {0})\".format(self.naxis))\n+            \n+            # Handle empty arrays\n+            if xy.shape[0] == 0:\n+                # Return empty array with shape (0, naxis)\n+                return np.empty((0, self.naxis))\n+            \n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n             result = func(xy, origin)\ndiff --git a/debug_empty_2d.py b/debug_empty_2d.py\nnew file mode 100644\nindex 0000000000..e370baf43a\n--- /dev/null\n+++ b/debug_empty_2d.py\n@@ -0,0 +1,37 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Debug script for empty 2D array issue.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+def create_simple_wcs():\n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.crval = [0, 0]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    return wcs\n+\n+def test_empty_2d():\n+    print(\"Testing empty 2D array...\")\n+    \n+    wcs = create_simple_wcs()\n+    \n+    # Test empty 2D array\n+    empty_2d = np.array([]).reshape(0, 2)\n+    print(f\"Input shape: {empty_2d.shape}\")\n+    print(f\"Input: {empty_2d}\")\n+    \n+    try:\n+        result = wcs.wcs_pix2world(empty_2d, 0)\n+        print(f\"Success: {result}\")\n+        print(f\"Result type: {type(result)}\")\n+        print(f\"Result shape: {result.shape if hasattr(result, 'shape') else 'No shape'}\")\n+    except Exception as e:\n+        print(f\"Error: {type(e).__name__}: {e}\")\n+\n+if __name__ == \"__main__\":\n+    test_empty_2d()\n\\ No newline at end of file\ndiff --git a/final_test.py b/final_test.py\nnew file mode 100644\nindex 0000000000..6961a9a3f7\n--- /dev/null\n+++ b/final_test.py\n@@ -0,0 +1,104 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Final comprehensive test for the empty array fix.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+def create_wcs(naxis=2):\n+    wcs = WCS(naxis=naxis)\n+    wcs.wcs.crpix = [1] * naxis\n+    wcs.wcs.crval = [0] * naxis\n+    wcs.wcs.cdelt = [1] * naxis\n+    if naxis == 2:\n+        wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    elif naxis == 3:\n+        wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\", \"FREQ\"]\n+    else:\n+        wcs.wcs.ctype = [f\"AXIS{i+1}\" for i in range(naxis)]\n+    return wcs\n+\n+def test_final():\n+    print(\"=== FINAL COMPREHENSIVE TEST ===\")\n+    print(\"Testing empty array handling in WCS transformations...\")\n+    \n+    # Test different dimensionalities\n+    for naxis in [1, 2, 3, 4]:\n+        print(f\"\\n--- Testing {naxis}D WCS ---\")\n+        wcs = create_wcs(naxis)\n+        \n+        # Test with separate empty arrays\n+        empty_args = [[] for _ in range(naxis)] + [0]\n+        try:\n+            result = wcs.wcs_pix2world(*empty_args)\n+            print(f\"  {naxis}D separate empty arrays: SUCCESS - shapes {[r.shape for r in result]}\")\n+        except Exception as e:\n+            print(f\"  {naxis}D separate empty arrays: FAILED - {e}\")\n+        \n+        # Test with single empty 2D array\n+        try:\n+            empty_2d = np.array([]).reshape(0, naxis)\n+            result = wcs.wcs_pix2world(empty_2d, 0)\n+            print(f\"  {naxis}D empty 2D array: SUCCESS - shape {result.shape}\")\n+        except Exception as e:\n+            print(f\"  {naxis}D empty 2D array: FAILED - {e}\")\n+    \n+    # Test all transformation methods with 2D WCS\n+    print(f\"\\n--- Testing all transformation methods ---\")\n+    wcs = create_wcs(2)\n+    \n+    methods = [\n+        'wcs_pix2world',\n+        'wcs_world2pix', \n+        'all_pix2world',\n+        'all_world2pix',\n+    ]\n+    \n+    for method_name in methods:\n+        method = getattr(wcs, method_name)\n+        try:\n+            result = method([], [], 0)\n+            print(f\"  {method_name}: SUCCESS - shapes {[r.shape for r in result]}\")\n+        except Exception as e:\n+            print(f\"  {method_name}: FAILED - {e}\")\n+    \n+    # Test ra_dec_order parameter\n+    print(f\"\\n--- Testing ra_dec_order parameter ---\")\n+    for ra_dec_order in [False, True]:\n+        try:\n+            result = wcs.all_pix2world([], [], 0, ra_dec_order=ra_dec_order)\n+            print(f\"  ra_dec_order={ra_dec_order}: SUCCESS - shapes {[r.shape for r in result]}\")\n+        except Exception as e:\n+            print(f\"  ra_dec_order={ra_dec_order}: FAILED - {e}\")\n+    \n+    # Test that non-empty arrays still work (regression test)\n+    print(f\"\\n--- Regression test for non-empty arrays ---\")\n+    try:\n+        result = wcs.wcs_pix2world([1, 2], [3, 4], 0)\n+        print(f\"  Non-empty separate arrays: SUCCESS - shapes {[r.shape for r in result]}\")\n+        \n+        result = wcs.wcs_pix2world(np.array([[1, 3], [2, 4]]), 0)\n+        print(f\"  Non-empty 2D array: SUCCESS - shape {result.shape}\")\n+    except Exception as e:\n+        print(f\"  Non-empty arrays: FAILED - {e}\")\n+    \n+    # Test edge cases with broadcasting\n+    print(f\"\\n--- Testing broadcasting edge cases ---\")\n+    try:\n+        result = wcs.wcs_pix2world([], [1], 0)\n+        print(f\"  Empty + single element: SUCCESS - shapes {[r.shape for r in result]}\")\n+    except Exception as e:\n+        print(f\"  Empty + single element: Expected behavior - {type(e).__name__}\")\n+    \n+    try:\n+        result = wcs.wcs_pix2world([], [1, 2, 3], 0)\n+        print(f\"  Empty + multiple elements: Unexpected success\")\n+    except Exception as e:\n+        print(f\"  Empty + multiple elements: Expected error - {type(e).__name__}\")\n+    \n+    print(f\"\\n=== TEST COMPLETE ===\")\n+\n+if __name__ == \"__main__\":\n+    test_final()\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..ea3fc634e5\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,50 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Script to reproduce the empty array issue with WCS transformations.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS object for testing\n+def create_simple_wcs():\n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.crval = [0, 0]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    return wcs\n+\n+def test_empty_arrays():\n+    print(\"Testing empty arrays with WCS transformations...\")\n+    \n+    wcs = create_simple_wcs()\n+    \n+    # Test cases that should work but currently fail\n+    test_cases = [\n+        (\"Empty lists\", [], []),\n+        (\"Empty numpy arrays\", np.array([]), np.array([])),\n+        (\"Empty 2D array\", np.array([]).reshape(0, 2)),\n+    ]\n+    \n+    for description, *args in test_cases:\n+        print(f\"\\nTesting {description}:\")\n+        try:\n+            if len(args) == 2:\n+                # Test with separate x, y arrays\n+                result = wcs.wcs_pix2world(args[0], args[1], 0)\n+                print(f\"  Success: {result}\")\n+                print(f\"  Result types: {[type(r) for r in result]}\")\n+                print(f\"  Result shapes: {[r.shape for r in result]}\")\n+            else:\n+                # Test with single 2D array\n+                result = wcs.wcs_pix2world(args[0], 0)\n+                print(f\"  Success: {result}\")\n+                print(f\"  Result type: {type(result)}\")\n+                print(f\"  Result shape: {result.shape}\")\n+        except Exception as e:\n+            print(f\"  Error: {type(e).__name__}: {e}\")\n+\n+if __name__ == \"__main__\":\n+    test_empty_arrays()\n\\ No newline at end of file\ndiff --git a/test_all_methods.py b/test_all_methods.py\nnew file mode 100644\nindex 0000000000..38573e2416\n--- /dev/null\n+++ b/test_all_methods.py\n@@ -0,0 +1,50 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Test all WCS transformation methods with empty arrays.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+def create_simple_wcs():\n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.crval = [0, 0]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    return wcs\n+\n+def test_all_methods():\n+    print(\"Testing all WCS transformation methods with empty arrays...\")\n+    \n+    wcs = create_simple_wcs()\n+    \n+    # List of transformation methods to test\n+    methods = [\n+        'wcs_pix2world',\n+        'wcs_world2pix', \n+        'all_pix2world',\n+        'all_world2pix',\n+    ]\n+    \n+    for method_name in methods:\n+        print(f\"\\nTesting {method_name}:\")\n+        method = getattr(wcs, method_name)\n+        \n+        try:\n+            # Test with empty lists\n+            result = method([], [], 0)\n+            print(f\"  Empty lists: SUCCESS - shapes {[r.shape for r in result]}\")\n+        except Exception as e:\n+            print(f\"  Empty lists: FAILED - {type(e).__name__}: {e}\")\n+        \n+        try:\n+            # Test with empty 2D array\n+            result = method(np.array([]).reshape(0, 2), 0)\n+            print(f\"  Empty 2D array: SUCCESS - shape {result.shape}\")\n+        except Exception as e:\n+            print(f\"  Empty 2D array: FAILED - {type(e).__name__}: {e}\")\n+\n+if __name__ == \"__main__\":\n+    test_all_methods()\n\\ No newline at end of file\ndiff --git a/test_broadcast.py b/test_broadcast.py\nnew file mode 100644\nindex 0000000000..3347feabd5\n--- /dev/null\n+++ b/test_broadcast.py\n@@ -0,0 +1,35 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Test numpy broadcasting behavior with empty arrays.\n+\"\"\"\n+\n+import numpy as np\n+\n+def test_broadcast():\n+    print(\"Testing numpy broadcasting with empty arrays...\")\n+    \n+    # Test broadcasting empty with non-empty\n+    empty = np.array([])\n+    non_empty = np.array([1])\n+    \n+    try:\n+        result = np.broadcast_arrays(empty, non_empty)\n+        print(f\"broadcast_arrays([], [1]): {[r.shape for r in result]}\")\n+        print(f\"Results: {result}\")\n+    except Exception as e:\n+        print(f\"Error: {e}\")\n+    \n+    # Test with different shapes\n+    empty = np.array([])\n+    non_empty = np.array([1, 2, 3])\n+    \n+    try:\n+        result = np.broadcast_arrays(empty, non_empty)\n+        print(f\"broadcast_arrays([], [1,2,3]): {[r.shape for r in result]}\")\n+        print(f\"Results: {result}\")\n+    except Exception as e:\n+        print(f\"Error: {e}\")\n+\n+if __name__ == \"__main__\":\n+    test_broadcast()\n\\ No newline at end of file\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..130551ab63\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,71 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Comprehensive test for empty array handling in WCS transformations.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+def create_simple_wcs():\n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.crval = [0, 0]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    return wcs\n+\n+def test_comprehensive():\n+    print(\"Comprehensive test for empty array handling...\")\n+    \n+    wcs = create_simple_wcs()\n+    \n+    # Test cases that should work\n+    test_cases = [\n+        (\"Empty lists\", [], []),\n+        (\"Empty numpy arrays\", np.array([]), np.array([])),\n+        (\"Empty 2D array\", np.array([]).reshape(0, 2)),\n+        (\"Empty with single element (broadcast)\", [], [1]),\n+        (\"Single element with empty (broadcast)\", [1], []),\n+    ]\n+    \n+    for description, *args in test_cases:\n+        print(f\"\\nTesting {description}:\")\n+        try:\n+            if len(args) == 2:\n+                result = wcs.wcs_pix2world(args[0], args[1], 0)\n+                print(f\"  Success: shapes {[r.shape for r in result]}\")\n+            else:\n+                result = wcs.wcs_pix2world(args[0], 0)\n+                print(f\"  Success: shape {result.shape}\")\n+        except Exception as e:\n+            print(f\"  Error: {type(e).__name__}: {e}\")\n+    \n+    # Test cases that should fail\n+    fail_cases = [\n+        (\"Empty with multiple elements\", [], [1, 2, 3]),\n+        (\"Multiple elements with empty\", [1, 2, 3], []),\n+    ]\n+    \n+    print(\"\\n=== Cases that should fail ===\")\n+    for description, *args in fail_cases:\n+        print(f\"\\nTesting {description}:\")\n+        try:\n+            result = wcs.wcs_pix2world(args[0], args[1], 0)\n+            print(f\"  Unexpected success: shapes {[r.shape for r in result]}\")\n+        except Exception as e:\n+            print(f\"  Expected error: {type(e).__name__}: {e}\")\n+\n+    # Test that non-empty arrays still work\n+    print(\"\\n=== Regression test for non-empty arrays ===\")\n+    try:\n+        result = wcs.wcs_pix2world([1, 2], [3, 4], 0)\n+        print(f\"Non-empty arrays: Success - shapes {[r.shape for r in result]}\")\n+        \n+        result = wcs.wcs_pix2world(np.array([[1, 3], [2, 4]]), 0)\n+        print(f\"Non-empty 2D array: Success - shape {result.shape}\")\n+    except Exception as e:\n+        print(f\"Regression error: {type(e).__name__}: {e}\")\n+\n+if __name__ == \"__main__\":\n+    test_comprehensive()\n\\ No newline at end of file\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..5491a2eb29\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,81 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Test edge cases for empty array handling in WCS transformations.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+def create_simple_wcs():\n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.crval = [0, 0]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    return wcs\n+\n+def create_3d_wcs():\n+    wcs = WCS(naxis=3)\n+    wcs.wcs.crpix = [1, 1, 1]\n+    wcs.wcs.crval = [0, 0, 0]\n+    wcs.wcs.cdelt = [1, 1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\", \"FREQ\"]\n+    return wcs\n+\n+def test_edge_cases():\n+    print(\"Testing edge cases for empty arrays...\")\n+    \n+    # Test 2D WCS\n+    wcs2d = create_simple_wcs()\n+    \n+    print(\"\\n=== 2D WCS Tests ===\")\n+    \n+    # Test different transformation methods\n+    methods = [\n+        ('wcs_pix2world', wcs2d.wcs_pix2world),\n+        ('all_pix2world', wcs2d.all_pix2world),\n+        ('wcs_world2pix', wcs2d.wcs_world2pix),\n+        ('all_world2pix', wcs2d.all_world2pix),\n+    ]\n+    \n+    for method_name, method in methods:\n+        print(f\"\\nTesting {method_name}:\")\n+        try:\n+            # Test with empty lists\n+            result = method([], [], 0)\n+            print(f\"  Empty lists: Success - shapes {[r.shape for r in result]}\")\n+            \n+            # Test with empty 2D array\n+            result = method(np.array([]).reshape(0, 2), 0)\n+            print(f\"  Empty 2D array: Success - shape {result.shape}\")\n+        except Exception as e:\n+            print(f\"  Error: {type(e).__name__}: {e}\")\n+    \n+    # Test 3D WCS\n+    wcs3d = create_3d_wcs()\n+    \n+    print(\"\\n=== 3D WCS Tests ===\")\n+    \n+    print(f\"\\nTesting wcs_pix2world with 3D WCS:\")\n+    try:\n+        # Test with empty lists (3 axes)\n+        result = wcs3d.wcs_pix2world([], [], [], 0)\n+        print(f\"  Empty lists (3 axes): Success - shapes {[r.shape for r in result]}\")\n+        \n+        # Test with empty 2D array\n+        result = wcs3d.wcs_pix2world(np.array([]).reshape(0, 3), 0)\n+        print(f\"  Empty 2D array: Success - shape {result.shape}\")\n+    except Exception as e:\n+        print(f\"  Error: {type(e).__name__}: {e}\")\n+\n+    # Test mixed empty/non-empty (should fail appropriately)\n+    print(\"\\n=== Mixed Cases (should fail) ===\")\n+    try:\n+        result = wcs2d.wcs_pix2world([], [1], 0)\n+        print(f\"  Mixed empty/non-empty: Unexpected success - {result}\")\n+    except Exception as e:\n+        print(f\"  Mixed empty/non-empty: Expected error - {type(e).__name__}: {e}\")\n+\n+if __name__ == \"__main__\":\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/test_expected_output.py b/test_expected_output.py\nnew file mode 100644\nindex 0000000000..794f18c33f\n--- /dev/null\n+++ b/test_expected_output.py\n@@ -0,0 +1,56 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Script to understand the expected output format for WCS transformations.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+def create_simple_wcs():\n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.crval = [0, 0]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    return wcs\n+\n+def test_output_formats():\n+    print(\"Testing output formats for WCS transformations...\")\n+    \n+    wcs = create_simple_wcs()\n+    \n+    # Test with single point\n+    print(\"\\nSingle point (separate arrays):\")\n+    result = wcs.wcs_pix2world([1], [1], 0)\n+    print(f\"  Input: [1], [1]\")\n+    print(f\"  Output: {result}\")\n+    print(f\"  Output types: {[type(r) for r in result]}\")\n+    print(f\"  Output shapes: {[r.shape for r in result]}\")\n+    \n+    # Test with multiple points\n+    print(\"\\nMultiple points (separate arrays):\")\n+    result = wcs.wcs_pix2world([1, 2, 3], [1, 2, 3], 0)\n+    print(f\"  Input: [1, 2, 3], [1, 2, 3]\")\n+    print(f\"  Output: {result}\")\n+    print(f\"  Output types: {[type(r) for r in result]}\")\n+    print(f\"  Output shapes: {[r.shape for r in result]}\")\n+    \n+    # Test with 2D array\n+    print(\"\\nSingle point (2D array):\")\n+    result = wcs.wcs_pix2world(np.array([[1, 1]]), 0)\n+    print(f\"  Input: [[1, 1]]\")\n+    print(f\"  Output: {result}\")\n+    print(f\"  Output type: {type(result)}\")\n+    print(f\"  Output shape: {result.shape}\")\n+    \n+    # Test with multiple points (2D array)\n+    print(\"\\nMultiple points (2D array):\")\n+    result = wcs.wcs_pix2world(np.array([[1, 1], [2, 2], [3, 3]]), 0)\n+    print(f\"  Input: [[1, 1], [2, 2], [3, 3]]\")\n+    print(f\"  Output: {result}\")\n+    print(f\"  Output type: {type(result)}\")\n+    print(f\"  Output shape: {result.shape}\")\n+\n+if __name__ == \"__main__\":\n+    test_output_formats()\n\\ No newline at end of file\ndiff --git a/test_ra_dec_order.py b/test_ra_dec_order.py\nnew file mode 100644\nindex 0000000000..14dde983b0\n--- /dev/null\n+++ b/test_ra_dec_order.py\n@@ -0,0 +1,54 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Test WCS transformations with ra_dec_order parameter and empty arrays.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+def create_celestial_wcs():\n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.crval = [0, 0]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    return wcs\n+\n+def test_ra_dec_order():\n+    print(\"Testing WCS transformations with ra_dec_order and empty arrays...\")\n+    \n+    wcs = create_celestial_wcs()\n+    \n+    # Test methods that support ra_dec_order\n+    methods = [\n+        ('all_pix2world', wcs.all_pix2world),\n+        ('all_world2pix', wcs.all_world2pix),\n+    ]\n+    \n+    for method_name, method in methods:\n+        print(f\"\\nTesting {method_name}:\")\n+        \n+        for ra_dec_order in [False, True]:\n+            print(f\"  ra_dec_order={ra_dec_order}:\")\n+            \n+            try:\n+                # Test with empty lists\n+                result = method([], [], 0, ra_dec_order=ra_dec_order)\n+                if ra_dec_order and method_name.endswith('pix2world'):\n+                    # For pix2world with ra_dec_order=True, should return tuple\n+                    print(f\"    Empty lists: SUCCESS - shapes {[r.shape for r in result]}\")\n+                else:\n+                    print(f\"    Empty lists: SUCCESS - shapes {[r.shape for r in result]}\")\n+            except Exception as e:\n+                print(f\"    Empty lists: FAILED - {type(e).__name__}: {e}\")\n+            \n+            try:\n+                # Test with empty 2D array\n+                result = method(np.array([]).reshape(0, 2), 0, ra_dec_order=ra_dec_order)\n+                print(f\"    Empty 2D array: SUCCESS - shape {result.shape}\")\n+            except Exception as e:\n+                print(f\"    Empty 2D array: FAILED - {type(e).__name__}: {e}\")\n+\n+if __name__ == \"__main__\":\n+    test_ra_dec_order()\n\\ No newline at end of file\ndiff --git a/test_with_fits.py b/test_with_fits.py\nnew file mode 100644\nindex 0000000000..f8c264791c\n--- /dev/null\n+++ b/test_with_fits.py\n@@ -0,0 +1,65 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Test empty arrays with a real FITS file, similar to the PR description.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+import os\n+\n+def test_with_fits():\n+    print(\"Testing empty arrays with real FITS file...\")\n+    \n+    # Use one of the test FITS files\n+    fits_file = '/testbed/astropy/wcs/tests/data/sip.fits'\n+    \n+    if os.path.exists(fits_file):\n+        print(f\"Loading WCS from {fits_file}\")\n+        wcs = WCS(fits_file)\n+        \n+        print(f\"WCS naxis: {wcs.naxis}\")\n+        print(f\"WCS ctype: {wcs.wcs.ctype}\")\n+        \n+        # Test the exact case from the PR description\n+        try:\n+            result = wcs.wcs_pix2world([], [], 0)\n+            print(\"SUCCESS: wcs.wcs_pix2world([], [], 0) works!\")\n+            print(f\"Result: {result}\")\n+            print(f\"Result shapes: {[r.shape for r in result]}\")\n+        except Exception as e:\n+            print(f\"FAILED: {type(e).__name__}: {e}\")\n+        \n+        # Test other empty array cases\n+        try:\n+            result = wcs.wcs_pix2world(np.array([]), np.array([]), 0)\n+            print(\"SUCCESS: wcs.wcs_pix2world(np.array([]), np.array([]), 0) works!\")\n+            print(f\"Result shapes: {[r.shape for r in result]}\")\n+        except Exception as e:\n+            print(f\"FAILED: {type(e).__name__}: {e}\")\n+        \n+        try:\n+            result = wcs.wcs_pix2world(np.array([]).reshape(0, 2), 0)\n+            print(\"SUCCESS: wcs.wcs_pix2world(empty_2d_array, 0) works!\")\n+            print(f\"Result shape: {result.shape}\")\n+        except Exception as e:\n+            print(f\"FAILED: {type(e).__name__}: {e}\")\n+            \n+    else:\n+        print(f\"FITS file {fits_file} not found, creating simple WCS for test\")\n+        wcs = WCS(naxis=2)\n+        wcs.wcs.crpix = [1, 1]\n+        wcs.wcs.crval = [0, 0]\n+        wcs.wcs.cdelt = [1, 1]\n+        wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+        \n+        try:\n+            result = wcs.wcs_pix2world([], [], 0)\n+            print(\"SUCCESS: wcs.wcs_pix2world([], [], 0) works!\")\n+            print(f\"Result: {result}\")\n+            print(f\"Result shapes: {[r.shape for r in result]}\")\n+        except Exception as e:\n+            print(f\"FAILED: {type(e).__name__}: {e}\")\n+\n+if __name__ == \"__main__\":\n+    test_with_fits()\n\\ No newline at end of file\n"}