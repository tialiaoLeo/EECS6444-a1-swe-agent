{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "astropy__astropy-14365", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004a..37e8c2ff4 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -34,6 +34,10 @@ def _line_type(line, delimiter=None):\n     --------\n     >>> _line_type(\"READ SERR 3\")\n     'command'\n+    >>> _line_type(\"read serr 3\")\n+    'command'\n+    >>> _line_type(\"Read Terr 1 2\")\n+    'command'\n     >>> _line_type(\" \\\\n    !some gibberish\")\n     'comment'\n     >>> _line_type(\"   \")\n@@ -60,7 +64,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+    _command_re = r\"READ\\s+[TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n@@ -68,7 +72,7 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..1203584bc\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,33 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Script to reproduce the QDP case sensitivity error.\"\"\"\n+\n+import tempfile\n+import os\n+from astropy.table import Table\n+\n+# Create a test QDP file with lowercase commands\n+test_content = \"\"\"read serr 1 2 \n+1 0.5 1 0.5\n+\"\"\"\n+\n+# Write to a temporary file\n+with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+    f.write(test_content)\n+    temp_file = f.name\n+\n+try:\n+    print(\"Attempting to read QDP file with lowercase commands...\")\n+    print(f\"File content:\\n{test_content}\")\n+    \n+    # This should fail with the current implementation\n+    table = Table.read(temp_file, format='ascii.qdp')\n+    print(\"SUCCESS: Table read successfully!\")\n+    print(table)\n+    \n+except Exception as e:\n+    print(f\"ERROR: {e}\")\n+    \n+finally:\n+    # Clean up\n+    os.unlink(temp_file)\n\\ No newline at end of file\ndiff --git a/test_case_insensitive.py b/test_case_insensitive.py\nnew file mode 100644\nindex 000000000..31d734e34\n--- /dev/null\n+++ b/test_case_insensitive.py\n@@ -0,0 +1,63 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Comprehensive test for QDP case insensitivity.\"\"\"\n+\n+import tempfile\n+import os\n+from astropy.table import Table\n+\n+# Test various case combinations\n+test_cases = [\n+    # Original uppercase (should still work)\n+    (\"READ SERR 1 2\\n1 0.5 1 0.5\\n\", \"uppercase READ SERR\"),\n+    (\"READ TERR 1\\n1 0.5 0.3\\n\", \"uppercase READ TERR\"),\n+    \n+    # Lowercase (the main issue from the PR)\n+    (\"read serr 1 2\\n1 0.5 1 0.5\\n\", \"lowercase read serr\"),\n+    (\"read terr 1\\n1 0.5 0.3\\n\", \"lowercase read terr\"),\n+    \n+    # Mixed case\n+    (\"Read Serr 1 2\\n1 0.5 1 0.5\\n\", \"mixed case Read Serr\"),\n+    (\"READ serr 1 2\\n1 0.5 1 0.5\\n\", \"mixed case READ serr\"),\n+    (\"read SERR 1 2\\n1 0.5 1 0.5\\n\", \"mixed case read SERR\"),\n+    (\"Read TERR 1\\n1 0.5 0.3\\n\", \"mixed case Read TERR\"),\n+    \n+    # All lowercase\n+    (\"read terr 1\\n1 0.5 0.3\\n\", \"all lowercase read terr\"),\n+]\n+\n+def test_case(content, description):\n+    \"\"\"Test a single case.\"\"\"\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(content)\n+        temp_file = f.name\n+    \n+    try:\n+        print(f\"Testing {description}...\")\n+        table = Table.read(temp_file, format='ascii.qdp')\n+        print(f\"  SUCCESS: {len(table)} rows, {len(table.columns)} columns\")\n+        return True\n+    except Exception as e:\n+        print(f\"  ERROR: {e}\")\n+        return False\n+    finally:\n+        os.unlink(temp_file)\n+\n+# Run all tests\n+print(\"Testing QDP case insensitivity...\")\n+print(\"=\" * 50)\n+\n+success_count = 0\n+total_count = len(test_cases)\n+\n+for content, description in test_cases:\n+    if test_case(content, description):\n+        success_count += 1\n+\n+print(\"=\" * 50)\n+print(f\"Results: {success_count}/{total_count} tests passed\")\n+\n+if success_count == total_count:\n+    print(\"All tests passed! \u2705\")\n+else:\n+    print(\"Some tests failed! \u274c\")\n\\ No newline at end of file\ndiff --git a/test_doctests.py b/test_doctests.py\nnew file mode 100644\nindex 000000000..0d5d0ad5f\n--- /dev/null\n+++ b/test_doctests.py\n@@ -0,0 +1,59 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Test the doctests for the _line_type function.\"\"\"\n+\n+from astropy.io.ascii.qdp import _line_type\n+\n+# Test the examples from the docstring\n+print(\"Testing doctests for _line_type function...\")\n+\n+# Original uppercase tests\n+assert _line_type(\"READ SERR 3\") == 'command'\n+print(\"\u2705 READ SERR 3 -> command\")\n+\n+# New lowercase tests\n+assert _line_type(\"read serr 3\") == 'command'\n+print(\"\u2705 read serr 3 -> command\")\n+\n+assert _line_type(\"Read Terr 1 2\") == 'command'\n+print(\"\u2705 Read Terr 1 2 -> command\")\n+\n+# Other existing tests\n+assert _line_type(\" \\n    !some gibberish\") == 'comment'\n+print(\"\u2705 comment line -> comment\")\n+\n+assert _line_type(\"   \") == 'comment'\n+print(\"\u2705 empty line -> comment\")\n+\n+assert _line_type(\" 21345.45\") == 'data,1'\n+print(\"\u2705 single data value -> data,1\")\n+\n+assert _line_type(\" 21345.45 1.53e-3 1e-3 .04 NO nan\") == 'data,6'\n+print(\"\u2705 multiple data values -> data,6\")\n+\n+assert _line_type(\" 21345.45,1.53e-3,1e-3,.04,NO,nan\", delimiter=',') == 'data,6'\n+print(\"\u2705 comma-separated data -> data,6\")\n+\n+assert _line_type(\" 21345.45 ! a comment to disturb\") == 'data,1'\n+print(\"\u2705 data with comment -> data,1\")\n+\n+assert _line_type(\"NO NO NO NO NO\") == 'new'\n+print(\"\u2705 NO NO NO... -> new\")\n+\n+assert _line_type(\"NO,NO,NO,NO,NO\", delimiter=',') == 'new'\n+print(\"\u2705 NO,NO,NO... -> new\")\n+\n+# Test error cases\n+try:\n+    _line_type(\"N O N NOON OON O\")\n+    assert False, \"Should have raised ValueError\"\n+except ValueError:\n+    print(\"\u2705 Invalid line raises ValueError\")\n+\n+try:\n+    _line_type(\" some non-comment gibberish\")\n+    assert False, \"Should have raised ValueError\"\n+except ValueError:\n+    print(\"\u2705 Non-comment gibberish raises ValueError\")\n+\n+print(\"\\nAll doctests passed! \u2705\")\n\\ No newline at end of file\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 000000000..d96d2b1ce\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,62 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Test edge cases for QDP case insensitivity.\"\"\"\n+\n+import tempfile\n+import os\n+from astropy.table import Table\n+\n+# Test edge cases\n+edge_cases = [\n+    # Mixed case with extra spaces\n+    (\"  read   serr   1   2  \\n1 0.5 1 0.5\\n\", \"extra spaces\"),\n+    \n+    # Mixed case with tabs\n+    (\"read\\tserr\\t1\\t2\\n1 0.5 1 0.5\\n\", \"tabs as separators\"),\n+    \n+    # Multiple commands with different cases\n+    (\"read serr 1\\nREAD TERR 2\\n1 0.5 0.3 2 0.1 0.2\\n\", \"mixed case commands\"),\n+    \n+    # Case insensitive with comments\n+    (\"! This is a comment\\nread serr 1 2\\n1 0.5 1 0.5\\n\", \"with comments\"),\n+    \n+    # All caps vs all lowercase\n+    (\"READ SERR 1 2\\n1 0.5 1 0.5\\n\", \"all caps\"),\n+    (\"read serr 1 2\\n1 0.5 1 0.5\\n\", \"all lowercase\"),\n+]\n+\n+def test_edge_case(content, description):\n+    \"\"\"Test a single edge case.\"\"\"\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(content)\n+        temp_file = f.name\n+    \n+    try:\n+        print(f\"Testing {description}...\")\n+        table = Table.read(temp_file, format='ascii.qdp')\n+        print(f\"  SUCCESS: {len(table)} rows, {len(table.columns)} columns\")\n+        return True\n+    except Exception as e:\n+        print(f\"  ERROR: {e}\")\n+        return False\n+    finally:\n+        os.unlink(temp_file)\n+\n+# Run all edge case tests\n+print(\"Testing QDP edge cases...\")\n+print(\"=\" * 50)\n+\n+success_count = 0\n+total_count = len(edge_cases)\n+\n+for content, description in edge_cases:\n+    if test_edge_case(content, description):\n+        success_count += 1\n+\n+print(\"=\" * 50)\n+print(f\"Results: {success_count}/{total_count} edge case tests passed\")\n+\n+if success_count == total_count:\n+    print(\"All edge case tests passed! \u2705\")\n+else:\n+    print(\"Some edge case tests failed! \u274c\")\n\\ No newline at end of file\ndiff --git a/test_pr_example.py b/test_pr_example.py\nnew file mode 100644\nindex 000000000..7d405007f\n--- /dev/null\n+++ b/test_pr_example.py\n@@ -0,0 +1,55 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Test the exact example from the PR description.\"\"\"\n+\n+import tempfile\n+import os\n+from astropy.table import Table\n+\n+# The exact example from the PR description\n+pr_example = \"\"\"read serr 1 2 \n+1 0.5 1 0.5\n+\"\"\"\n+\n+def test_pr_example():\n+    \"\"\"Test the exact example from the PR description.\"\"\"\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(pr_example)\n+        temp_file = f.name\n+    \n+    try:\n+        print(\"Testing the exact example from the PR description...\")\n+        print(f\"File content:\\n{pr_example}\")\n+        \n+        # This should work now\n+        table = Table.read(temp_file, format='ascii.qdp')\n+        print(\"SUCCESS: Table read successfully!\")\n+        print(f\"Table shape: {len(table)} rows, {len(table.columns)} columns\")\n+        print(\"Column names:\", list(table.columns.keys()))\n+        print(\"Table data:\")\n+        print(table)\n+        \n+        # Verify the data is correct\n+        assert len(table) == 1, f\"Expected 1 row, got {len(table)}\"\n+        assert len(table.columns) == 4, f\"Expected 4 columns, got {len(table.columns)}\"\n+        assert table['col1'][0] == 1, f\"Expected col1[0] = 1, got {table['col1'][0]}\"\n+        assert table['col1_err'][0] == 0.5, f\"Expected col1_err[0] = 0.5, got {table['col1_err'][0]}\"\n+        assert table['col2'][0] == 1, f\"Expected col2[0] = 1, got {table['col2'][0]}\"\n+        assert table['col2_err'][0] == 0.5, f\"Expected col2_err[0] = 0.5, got {table['col2_err'][0]}\"\n+        \n+        print(\"\u2705 All assertions passed!\")\n+        return True\n+        \n+    except Exception as e:\n+        print(f\"ERROR: {e}\")\n+        return False\n+        \n+    finally:\n+        os.unlink(temp_file)\n+\n+if __name__ == \"__main__\":\n+    success = test_pr_example()\n+    if success:\n+        print(\"\\n\ud83c\udf89 PR example test PASSED! The issue has been fixed.\")\n+    else:\n+        print(\"\\n\u274c PR example test FAILED!\")\n\\ No newline at end of file\n"}