{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8ef..5bf5c36b1 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,47 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        \n+        # For RST format, we need to add separator lines at the beginning and end\n+        # The separator line should be generated based on column positions\n+        \n+        # Find the position line that was generated by the parent class\n+        position_line_idx = None\n+        separator_line = None\n+        for i, line in enumerate(lines):\n+            if line and set(line.strip()) <= {self.header.position_char, ' ', self.data.splitter.delimiter}:\n+                position_line_idx = i\n+                separator_line = line\n+                break\n+        \n+        if separator_line is None:\n+            # Generate separator line based on the first non-empty content line\n+            content_line = None\n+            for line in lines:\n+                if line.strip():  # Find first non-empty line\n+                    content_line = line\n+                    break\n+            \n+            if content_line:\n+                # Create separator line matching the column structure\n+                separator_chars = []\n+                for char in content_line:\n+                    if char == ' ':\n+                        separator_chars.append(' ')\n+                    else:\n+                        separator_chars.append('=')\n+                separator_line = ''.join(separator_chars).rstrip()\n+            else:\n+                separator_line = '===== ========'\n+        \n+        # Add separator lines at the beginning and end\n+        # Keep the position line in the middle if it exists\n+        if separator_line.strip():\n+            lines = [separator_line] + lines + [separator_line]\n+        \n         return lines\ndiff --git a/debug_rst.py b/debug_rst.py\nnew file mode 100644\nindex 000000000..d78da142e\n--- /dev/null\n+++ b/debug_rst.py\n@@ -0,0 +1,30 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+from astropy.io import ascii\n+from io import StringIO\n+\n+# Create a test table\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"=== Testing RST without header_rows ===\")\n+out = StringIO()\n+writer = ascii.get_writer(Writer=ascii.RST)\n+lines = writer.write(tbl)\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: '{line}'\")\n+\n+print(\"\\n=== Testing RST with header_rows ===\")\n+out = StringIO()\n+writer = ascii.get_writer(Writer=ascii.RST, header_rows=[\"name\", \"unit\"])\n+lines = writer.write(tbl)\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: '{line}'\")\n+\n+print(\"\\n=== Testing FixedWidth with header_rows for comparison ===\")\n+out = StringIO()\n+writer = ascii.get_writer(Writer=ascii.FixedWidth, header_rows=[\"name\", \"unit\"])\n+lines = writer.write(tbl)\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: '{line}'\")\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..511c376ba\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,23 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+\n+# Create a test table\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"Testing basic RST output:\")\n+tbl.write(sys.stdout, format=\"ascii.rst\")\n+print()\n+\n+print(\"Testing fixed_width with header_rows (this works):\")\n+tbl.write(sys.stdout, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+print()\n+\n+print(\"Testing RST with header_rows (this should fail):\")\n+try:\n+    tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+except Exception as e:\n+    print(f\"Error: {e}\")\n+    print(f\"Error type: {type(e)}\")\n\\ No newline at end of file\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 000000000..05cc2ea02\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,32 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+\n+# Create a test table with more metadata\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+tbl['wave'].description = 'Wavelength'\n+tbl['response'].description = 'Response value'\n+tbl['wave'].format = '.1f'\n+tbl['response'].format = '.2f'\n+\n+print(\"=== Testing RST with name only (default) ===\")\n+tbl.write(sys.stdout, format=\"ascii.rst\")\n+print()\n+\n+print(\"=== Testing RST with name and unit ===\")\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+print()\n+\n+print(\"=== Testing RST with name, unit, and description ===\")\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"description\"])\n+print()\n+\n+print(\"=== Testing RST with all metadata ===\")\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"format\", \"description\"])\n+print()\n+\n+print(\"=== Testing RST with just unit ===\")\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"unit\"])\n+print()\n\\ No newline at end of file\n"}