{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "astropy__astropy-14365", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004a..83ea51f66 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -34,6 +34,8 @@ def _line_type(line, delimiter=None):\n     --------\n     >>> _line_type(\"READ SERR 3\")\n     'command'\n+    >>> _line_type(\"read serr 3\")\n+    'command'\n     >>> _line_type(\" \\\\n    !some gibberish\")\n     'comment'\n     >>> _line_type(\"   \")\n@@ -68,7 +70,7 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..da01f0199\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,33 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Script to reproduce the case sensitivity issue in QDP parser.\"\"\"\n+\n+import tempfile\n+import os\n+from astropy.table import Table\n+\n+# Create a test QDP file with lowercase commands\n+test_content = \"\"\"read serr 1 2 \n+1 0.5 1 0.5\n+\"\"\"\n+\n+# Write to a temporary file\n+with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+    f.write(test_content)\n+    temp_file = f.name\n+\n+try:\n+    print(\"Attempting to read QDP file with lowercase commands...\")\n+    print(f\"File content:\\n{test_content}\")\n+    \n+    # This should fail with the current implementation\n+    table = Table.read(temp_file, format='ascii.qdp')\n+    print(\"SUCCESS: Table read successfully!\")\n+    print(table)\n+    \n+except Exception as e:\n+    print(f\"ERROR: {e}\")\n+    \n+finally:\n+    # Clean up\n+    os.unlink(temp_file)\n\\ No newline at end of file\ndiff --git a/test_case_insensitive.py b/test_case_insensitive.py\nnew file mode 100644\nindex 000000000..b113757fa\n--- /dev/null\n+++ b/test_case_insensitive.py\n@@ -0,0 +1,84 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Comprehensive test for case insensitive QDP commands.\"\"\"\n+\n+import tempfile\n+import os\n+from astropy.table import Table\n+\n+def test_case_variations():\n+    \"\"\"Test various case combinations for QDP commands.\"\"\"\n+    \n+    test_cases = [\n+        # Original uppercase (should still work)\n+        (\"READ SERR 1 2\\n1 0.5 1 0.5\", \"uppercase READ SERR\"),\n+        (\"READ TERR 1\\n1 0.5 -0.3\", \"uppercase READ TERR\"),\n+        \n+        # Lowercase (the main issue)\n+        (\"read serr 1 2\\n1 0.5 1 0.5\", \"lowercase read serr\"),\n+        (\"read terr 1\\n1 0.5 -0.3\", \"lowercase read terr\"),\n+        \n+        # Mixed case\n+        (\"Read Serr 1 2\\n1 0.5 1 0.5\", \"mixed case Read Serr\"),\n+        (\"READ serr 1 2\\n1 0.5 1 0.5\", \"mixed case READ serr\"),\n+        (\"read SERR 1 2\\n1 0.5 1 0.5\", \"mixed case read SERR\"),\n+        (\"Read TERR 1\\n1 0.5 -0.3\", \"mixed case Read TERR\"),\n+        \n+        # All lowercase\n+        (\"read terr 1\\n1 0.5 -0.3\", \"all lowercase read terr\"),\n+    ]\n+    \n+    for test_content, description in test_cases:\n+        print(f\"\\nTesting {description}...\")\n+        print(f\"Content: {repr(test_content)}\")\n+        \n+        # Write to a temporary file\n+        with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+            f.write(test_content)\n+            temp_file = f.name\n+        \n+        try:\n+            table = Table.read(temp_file, format='ascii.qdp')\n+            print(f\"SUCCESS: {description}\")\n+            print(f\"Columns: {table.colnames}\")\n+            print(f\"Number of rows: {len(table)}\")\n+            \n+        except Exception as e:\n+            print(f\"ERROR with {description}: {e}\")\n+            \n+        finally:\n+            os.unlink(temp_file)\n+\n+def test_complex_example():\n+    \"\"\"Test a more complex example with multiple commands and mixed case.\"\"\"\n+    \n+    complex_content = \"\"\"! Test file with mixed case commands\n+read terr 1\n+READ SERR 3\n+! Some data\n+1.0 0.1 -0.05 2.0 0.2 3.0\n+2.0 0.15 -0.1 3.0 0.3 4.0\n+\"\"\"\n+    \n+    print(f\"\\nTesting complex example with mixed case commands...\")\n+    print(f\"Content:\\n{complex_content}\")\n+    \n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(complex_content)\n+        temp_file = f.name\n+    \n+    try:\n+        table = Table.read(temp_file, format='ascii.qdp', names=['a', 'b', 'c'])\n+        print(\"SUCCESS: Complex example with mixed case\")\n+        print(f\"Columns: {table.colnames}\")\n+        print(f\"Table:\\n{table}\")\n+        \n+    except Exception as e:\n+        print(f\"ERROR with complex example: {e}\")\n+        \n+    finally:\n+        os.unlink(temp_file)\n+\n+if __name__ == \"__main__\":\n+    test_case_variations()\n+    test_complex_example()\n\\ No newline at end of file\ndiff --git a/test_comprehensive_case_insensitive.py b/test_comprehensive_case_insensitive.py\nnew file mode 100644\nindex 000000000..4e290d723\n--- /dev/null\n+++ b/test_comprehensive_case_insensitive.py\n@@ -0,0 +1,138 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Comprehensive test for case insensitive QDP commands.\"\"\"\n+\n+import tempfile\n+import os\n+from astropy.table import Table\n+from astropy.io.ascii.qdp import _line_type\n+\n+def test_line_type_function():\n+    \"\"\"Test the _line_type function directly with various cases.\"\"\"\n+    \n+    print(\"Testing _line_type function directly...\")\n+    \n+    # Test various case combinations for commands\n+    test_cases = [\n+        (\"READ SERR 1 2\", \"command\"),\n+        (\"read serr 1 2\", \"command\"),\n+        (\"Read Serr 1 2\", \"command\"),\n+        (\"READ serr 1 2\", \"command\"),\n+        (\"read SERR 1 2\", \"command\"),\n+        (\"READ TERR 1\", \"command\"),\n+        (\"read terr 1\", \"command\"),\n+        (\"Read Terr 1\", \"command\"),\n+        (\"READ terr 1\", \"command\"),\n+        (\"read TERR 1\", \"command\"),\n+        # Test data lines (should not be affected)\n+        (\"1.0 2.0 3.0\", \"data,3\"),\n+        (\"NO NO NO\", \"new\"),\n+        (\"! comment\", \"comment\"),\n+        (\"\", \"comment\"),\n+    ]\n+    \n+    for line, expected in test_cases:\n+        result = _line_type(line)\n+        assert result == expected, f\"Expected {expected} for '{line}', got {result}\"\n+        print(f\"\u2713 '{line}' -> '{result}'\")\n+    \n+    print(\"All _line_type tests passed!\")\n+\n+def test_table_reading():\n+    \"\"\"Test reading tables with various case combinations.\"\"\"\n+    \n+    print(\"\\nTesting table reading with various case combinations...\")\n+    \n+    test_cases = [\n+        # Simple SERR cases\n+        (\"READ SERR 1\\n1.0 0.1\", [\"col1\", \"col1_err\"]),\n+        (\"read serr 1\\n1.0 0.1\", [\"col1\", \"col1_err\"]),\n+        (\"Read Serr 1\\n1.0 0.1\", [\"col1\", \"col1_err\"]),\n+        \n+        # Simple TERR cases  \n+        (\"READ TERR 1\\n1.0 0.1 -0.05\", [\"col1\", \"col1_perr\", \"col1_nerr\"]),\n+        (\"read terr 1\\n1.0 0.1 -0.05\", [\"col1\", \"col1_perr\", \"col1_nerr\"]),\n+        (\"Read Terr 1\\n1.0 0.1 -0.05\", [\"col1\", \"col1_perr\", \"col1_nerr\"]),\n+        \n+        # Multiple commands\n+        (\"READ TERR 1\\nREAD SERR 2\\n1.0 0.1 -0.05 2.0 0.2\", [\"col1\", \"col1_perr\", \"col1_nerr\", \"col2\", \"col2_err\"]),\n+        (\"read terr 1\\nread serr 2\\n1.0 0.1 -0.05 2.0 0.2\", [\"col1\", \"col1_perr\", \"col1_nerr\", \"col2\", \"col2_err\"]),\n+        (\"Read Terr 1\\nRead Serr 2\\n1.0 0.1 -0.05 2.0 0.2\", [\"col1\", \"col1_perr\", \"col1_nerr\", \"col2\", \"col2_err\"]),\n+        \n+        # Mixed case commands\n+        (\"READ terr 1\\nread SERR 2\\n1.0 0.1 -0.05 2.0 0.2\", [\"col1\", \"col1_perr\", \"col1_nerr\", \"col2\", \"col2_err\"]),\n+        (\"read TERR 1\\nREAD serr 2\\n1.0 0.1 -0.05 2.0 0.2\", [\"col1\", \"col1_perr\", \"col1_nerr\", \"col2\", \"col2_err\"]),\n+    ]\n+    \n+    for i, (content, expected_columns) in enumerate(test_cases):\n+        print(f\"\\nTest case {i+1}: {repr(content[:20])}...\")\n+        \n+        with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+            f.write(content)\n+            temp_file = f.name\n+        \n+        try:\n+            table = Table.read(temp_file, format='ascii.qdp')\n+            assert table.colnames == expected_columns, f\"Expected {expected_columns}, got {table.colnames}\"\n+            print(f\"\u2713 Columns: {table.colnames}\")\n+            \n+        except Exception as e:\n+            print(f\"\u2717 ERROR: {e}\")\n+            raise\n+            \n+        finally:\n+            os.unlink(temp_file)\n+    \n+    print(\"All table reading tests passed!\")\n+\n+def test_complex_mixed_case():\n+    \"\"\"Test a complex file with mixed case commands and comments.\"\"\"\n+    \n+    print(\"\\nTesting complex mixed case file...\")\n+    \n+    complex_content = \"\"\"! Test file with mixed case commands\n+! This should work with case insensitive parsing\n+read terr 1\n+READ SERR 3\n+! Some data with comments\n+1.0 0.1 -0.05 2.0 0.2 3.0\n+2.0 0.15 -0.1 3.0 0.3 4.0\n+NO NO NO NO NO NO\n+! Second table\n+3.0 0.2 -0.15 4.0 0.4 5.0\n+\"\"\"\n+    \n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(complex_content)\n+        temp_file = f.name\n+    \n+    try:\n+        # Read first table\n+        table = Table.read(temp_file, format='ascii.qdp', table_id=0, names=['a', 'b', 'c'])\n+        expected_columns = ['a', 'a_perr', 'a_nerr', 'b', 'c', 'c_err']\n+        assert table.colnames == expected_columns, f\"Expected {expected_columns}, got {table.colnames}\"\n+        assert len(table) == 2, f\"Expected 2 rows, got {len(table)}\"\n+        print(f\"\u2713 First table columns: {table.colnames}\")\n+        print(f\"\u2713 First table rows: {len(table)}\")\n+        \n+        # Read second table\n+        table2 = Table.read(temp_file, format='ascii.qdp', table_id=1, names=['a', 'b', 'c'])\n+        assert table2.colnames == expected_columns, f\"Expected {expected_columns}, got {table2.colnames}\"\n+        assert len(table2) == 1, f\"Expected 1 row, got {len(table2)}\"\n+        print(f\"\u2713 Second table columns: {table2.colnames}\")\n+        print(f\"\u2713 Second table rows: {len(table2)}\")\n+        \n+    except Exception as e:\n+        print(f\"\u2717 ERROR: {e}\")\n+        raise\n+        \n+    finally:\n+        os.unlink(temp_file)\n+    \n+    print(\"Complex mixed case test passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_line_type_function()\n+    test_table_reading()\n+    test_complex_mixed_case()\n+    print(\"\\n\ud83c\udf89 All comprehensive tests PASSED!\")\n\\ No newline at end of file\ndiff --git a/test_pr_case.py b/test_pr_case.py\nnew file mode 100644\nindex 000000000..635feb778\n--- /dev/null\n+++ b/test_pr_case.py\n@@ -0,0 +1,59 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Test the specific case mentioned in the PR description.\"\"\"\n+\n+import tempfile\n+import os\n+from astropy.table import Table\n+\n+def test_pr_case():\n+    \"\"\"Test the exact case from the PR description.\"\"\"\n+    \n+    # This is the exact content from the PR description\n+    test_content = \"\"\"read serr 1 2 \n+1 0.5 1 0.5\n+\"\"\"\n+    \n+    print(\"Testing the exact case from the PR description...\")\n+    print(f\"Content: {repr(test_content)}\")\n+    \n+    # Write to a temporary file\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(test_content)\n+        temp_file = f.name\n+    \n+    try:\n+        # This should work now with our fix\n+        table = Table.read(temp_file, format='ascii.qdp')\n+        print(\"SUCCESS: Table read successfully!\")\n+        print(f\"Columns: {table.colnames}\")\n+        print(f\"Table:\\n{table}\")\n+        \n+        # Verify the structure is correct\n+        expected_columns = ['col1', 'col1_err', 'col2', 'col2_err']\n+        assert table.colnames == expected_columns, f\"Expected {expected_columns}, got {table.colnames}\"\n+        \n+        # Verify the data\n+        assert len(table) == 1, f\"Expected 1 row, got {len(table)}\"\n+        assert table['col1'][0] == 1, f\"Expected col1=1, got {table['col1'][0]}\"\n+        assert table['col1_err'][0] == 0.5, f\"Expected col1_err=0.5, got {table['col1_err'][0]}\"\n+        assert table['col2'][0] == 1, f\"Expected col2=1, got {table['col2'][0]}\"\n+        assert table['col2_err'][0] == 0.5, f\"Expected col2_err=0.5, got {table['col2_err'][0]}\"\n+        \n+        print(\"All assertions passed!\")\n+        return True\n+        \n+    except Exception as e:\n+        print(f\"ERROR: {e}\")\n+        return False\n+        \n+    finally:\n+        os.unlink(temp_file)\n+\n+if __name__ == \"__main__\":\n+    success = test_pr_case()\n+    if success:\n+        print(\"\\n\u2705 PR case test PASSED\")\n+    else:\n+        print(\"\\n\u274c PR case test FAILED\")\n+        exit(1)\n\\ No newline at end of file\n"}