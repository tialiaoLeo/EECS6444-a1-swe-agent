{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/tests/test_wcs.py b/astropy/wcs/tests/test_wcs.py\nindex 85853e10e5..2b854b7ca4 100644\n--- a/astropy/wcs/tests/test_wcs.py\n+++ b/astropy/wcs/tests/test_wcs.py\n@@ -1093,3 +1093,31 @@ def test_keyedsip():\n     assert isinstance( w.sip, wcs.Sip )\n     assert w.sip.crpix[0] == 2048\n     assert w.sip.crpix[1] == 1026\n+\n+\n+def test_zero_size_input():\n+    \"\"\"\n+    Test that empty arrays are handled correctly by WCS transformations.\n+    \"\"\"\n+    # Create a simple WCS\n+    w = wcs.WCS(naxis=2)\n+    w.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    w.wcs.crval = [0, 0]\n+    w.wcs.crpix = [1, 1]\n+    w.wcs.cdelt = [1, 1]\n+    \n+    # Test empty lists\n+    result = w.wcs_pix2world([], [], 0)\n+    assert len(result) == 2\n+    assert len(result[0]) == 0\n+    assert len(result[1]) == 0\n+    \n+    # Test empty arrays\n+    result = w.wcs_pix2world(np.array([]), np.array([]), 0)\n+    assert len(result) == 2\n+    assert len(result[0]) == 0\n+    assert len(result[1]) == 0\n+    \n+    # Test empty 2D array\n+    result = w.wcs_pix2world(np.empty((0, 2)), 0)\n+    assert result.shape == (0, 2)\ndiff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex d3a06f2b31..b482fb4243 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1218,6 +1218,15 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise ValueError(\n                     \"Coordinate arrays are not broadcastable to each other\")\n \n+            # Handle empty arrays\n+            if any([x.size == 0 for x in axes]):\n+                # Return empty arrays with the correct shape\n+                if ra_dec_order and sky == 'output':\n+                    return (np.array([]).reshape(axes[0].shape),\n+                            np.array([]).reshape(axes[0].shape))\n+                return [np.array([]).reshape(axes[0].shape)\n+                        for i in range(self.naxis)]\n+\n             xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n \n             if ra_dec_order and sky == 'input':\n@@ -1235,6 +1244,11 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n                     \"of shape (N, {0})\".format(self.naxis))\n+            \n+            # Handle empty arrays\n+            if xy.size == 0:\n+                return np.empty((0, self.naxis))\n+            \n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n             result = func(xy, origin)\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..ab7efd1f7a\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,34 @@\n+#!/usr/bin/env python\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS\n+w = WCS(naxis=2)\n+w.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+w.wcs.crval = [0, 0]\n+w.wcs.crpix = [1, 1]\n+w.wcs.cdelt = [1, 1]\n+\n+print(\"Testing empty lists...\")\n+try:\n+    result = w.wcs_pix2world([], [], 0)\n+    print(\"Success! Result:\", result)\n+except Exception as e:\n+    print(\"Error:\", e)\n+\n+print(\"\\nTesting empty arrays...\")\n+try:\n+    result = w.wcs_pix2world(np.array([]), np.array([]), 0)\n+    print(\"Success! Result:\", result)\n+except Exception as e:\n+    print(\"Error:\", e)\n+\n+print(\"\\nTesting empty 2D array...\")\n+try:\n+    result = w.wcs_pix2world(np.empty((0, 2)), 0)\n+    print(\"Success! Result:\", result)\n+    print(\"Result shape:\", result.shape)\n+    print(\"Result type:\", type(result))\n+except Exception as e:\n+    print(\"Error:\", e)\n\\ No newline at end of file\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 0000000000..a004390ff4\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,50 @@\n+#!/usr/bin/env python\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS\n+w = WCS(naxis=2)\n+w.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+w.wcs.crval = [0, 0]\n+w.wcs.crpix = [1, 1]\n+w.wcs.cdelt = [1, 1]\n+\n+# Test methods that use _array_converter\n+methods_to_test = [\n+    'all_pix2world',\n+    'wcs_pix2world',\n+    'all_world2pix',\n+    'wcs_world2pix'\n+]\n+\n+for method_name in methods_to_test:\n+    method = getattr(w, method_name)\n+    print(f\"\\nTesting {method_name}...\")\n+    \n+    # Test empty lists\n+    try:\n+        if 'world2pix' in method_name:\n+            result = method([], [], 0)\n+        else:\n+            result = method([], [], 0)\n+        print(f\"  Empty lists: Success! Result: {result}\")\n+    except Exception as e:\n+        print(f\"  Empty lists: Error: {e}\")\n+    \n+    # Test empty arrays\n+    try:\n+        if 'world2pix' in method_name:\n+            result = method(np.array([]), np.array([]), 0)\n+        else:\n+            result = method(np.array([]), np.array([]), 0)\n+        print(f\"  Empty arrays: Success! Result: {result}\")\n+    except Exception as e:\n+        print(f\"  Empty arrays: Error: {e}\")\n+    \n+    # Test empty 2D array\n+    try:\n+        result = method(np.empty((0, 2)), 0)\n+        print(f\"  Empty 2D array: Success! Result shape: {result.shape}\")\n+    except Exception as e:\n+        print(f\"  Empty 2D array: Error: {e}\")\n\\ No newline at end of file\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..a583388026\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,75 @@\n+#!/usr/bin/env python\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Test with different naxis values\n+print(\"Testing with different naxis values...\")\n+\n+# 1D WCS\n+w1d = WCS(naxis=1)\n+w1d.wcs.ctype = [\"FREQ\"]\n+w1d.wcs.crval = [1e9]\n+w1d.wcs.crpix = [1]\n+w1d.wcs.cdelt = [1e6]\n+\n+print(\"\\n1D WCS:\")\n+try:\n+    result = w1d.wcs_pix2world([], 0)\n+    print(f\"  Empty list: Success! Result: {result}\")\n+except Exception as e:\n+    print(f\"  Empty list: Error: {e}\")\n+\n+try:\n+    result = w1d.wcs_pix2world(np.array([]), 0)\n+    print(f\"  Empty array: Success! Result: {result}\")\n+except Exception as e:\n+    print(f\"  Empty array: Error: {e}\")\n+\n+# 3D WCS\n+w3d = WCS(naxis=3)\n+w3d.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\", \"FREQ\"]\n+w3d.wcs.crval = [0, 0, 1e9]\n+w3d.wcs.crpix = [1, 1, 1]\n+w3d.wcs.cdelt = [1, 1, 1e6]\n+\n+print(\"\\n3D WCS:\")\n+try:\n+    result = w3d.wcs_pix2world([], [], [], 0)\n+    print(f\"  Empty lists: Success! Result: {result}\")\n+except Exception as e:\n+    print(f\"  Empty lists: Error: {e}\")\n+\n+try:\n+    result = w3d.wcs_pix2world(np.array([]), np.array([]), np.array([]), 0)\n+    print(f\"  Empty arrays: Success! Result: {result}\")\n+except Exception as e:\n+    print(f\"  Empty arrays: Error: {e}\")\n+\n+try:\n+    result = w3d.wcs_pix2world(np.empty((0, 3)), 0)\n+    print(f\"  Empty 2D array: Success! Result shape: {result.shape}\")\n+except Exception as e:\n+    print(f\"  Empty 2D array: Error: {e}\")\n+\n+# Test with ra_dec_order\n+print(\"\\n2D WCS with ra_dec_order=True:\")\n+w2d = WCS(naxis=2)\n+w2d.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+w2d.wcs.crval = [0, 0]\n+w2d.wcs.crpix = [1, 1]\n+w2d.wcs.cdelt = [1, 1]\n+\n+try:\n+    result = w2d.all_pix2world([], [], 0, ra_dec_order=True)\n+    print(f\"  Empty lists with ra_dec_order: Success! Result: {result}\")\n+except Exception as e:\n+    print(f\"  Empty lists with ra_dec_order: Error: {e}\")\n+\n+# Test mixed empty and non-empty (should fail with broadcasting error)\n+print(\"\\nTesting mixed empty and non-empty arrays (should fail):\")\n+try:\n+    result = w2d.wcs_pix2world([1, 2], [], 0)\n+    print(f\"  Mixed arrays: Unexpected success! Result: {result}\")\n+except Exception as e:\n+    print(f\"  Mixed arrays: Expected error: {e}\")\n\\ No newline at end of file\ndiff --git a/test_original_problem.py b/test_original_problem.py\nnew file mode 100644\nindex 0000000000..d7478d66dd\n--- /dev/null\n+++ b/test_original_problem.py\n@@ -0,0 +1,21 @@\n+#!/usr/bin/env python\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS (since we don't have the 2MASS_h.fits file)\n+wcs = WCS(naxis=2)\n+wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+wcs.wcs.crval = [0, 0]\n+wcs.wcs.crpix = [1, 1]\n+wcs.wcs.cdelt = [1, 1]\n+\n+print(\"Testing the original problem from the PR description...\")\n+\n+try:\n+    result = wcs.wcs_pix2world([], [], 0)\n+    print(\"Success! Result:\", result)\n+    print(\"Result types:\", [type(r) for r in result])\n+    print(\"Result shapes:\", [r.shape for r in result])\n+except Exception as e:\n+    print(\"Error:\", e)\n\\ No newline at end of file\ndiff --git a/test_other_methods.py b/test_other_methods.py\nnew file mode 100644\nindex 0000000000..82f2a030fc\n--- /dev/null\n+++ b/test_other_methods.py\n@@ -0,0 +1,43 @@\n+#!/usr/bin/env python\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS\n+w = WCS(naxis=2)\n+w.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+w.wcs.crval = [0, 0]\n+w.wcs.crpix = [1, 1]\n+w.wcs.cdelt = [1, 1]\n+\n+# Test other methods that use _array_converter\n+other_methods = [\n+    'pix2foc',\n+    'p4_pix2foc',\n+    'det2im'\n+]\n+\n+for method_name in other_methods:\n+    if hasattr(w, method_name):\n+        method = getattr(w, method_name)\n+        print(f\"\\nTesting {method_name}...\")\n+        \n+        try:\n+            result = method([], [], 0)\n+            print(f\"  Empty lists: Success! Result: {result}\")\n+        except Exception as e:\n+            print(f\"  Empty lists: Error: {e}\")\n+        \n+        try:\n+            result = method(np.array([]), np.array([]), 0)\n+            print(f\"  Empty arrays: Success! Result: {result}\")\n+        except Exception as e:\n+            print(f\"  Empty arrays: Error: {e}\")\n+        \n+        try:\n+            result = method(np.empty((0, 2)), 0)\n+            print(f\"  Empty 2D array: Success! Result shape: {result.shape}\")\n+        except Exception as e:\n+            print(f\"  Empty 2D array: Error: {e}\")\n+    else:\n+        print(f\"\\n{method_name} not available on this WCS\")\n\\ No newline at end of file\n"}