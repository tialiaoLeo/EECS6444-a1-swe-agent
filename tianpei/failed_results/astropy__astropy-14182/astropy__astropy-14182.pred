{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8ef..62951083d 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,21 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Find the separator line (contains only '=' and spaces)\n+        separator_line = None\n+        for line in lines:\n+            if line and set(line) <= {'=', ' '}:\n+                separator_line = line\n+                break\n+        \n+        if separator_line is None:\n+            # Fallback: generate separator line from first line\n+            separator_line = ''.join('=' if c != ' ' else ' ' for c in lines[0])\n+        \n+        lines = [separator_line] + lines + [separator_line]\n         return lines\ndiff --git a/debug_rst_write.py b/debug_rst_write.py\nnew file mode 100644\nindex 000000000..1925d9597\n--- /dev/null\n+++ b/debug_rst_write.py\n@@ -0,0 +1,30 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+from io import StringIO\n+from astropy.io import ascii\n+\n+# Create a test table\n+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"=== Testing RST without header_rows ===\")\n+out = StringIO()\n+tbl.write(out, format=\"ascii.rst\")\n+lines = out.getvalue().splitlines()\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: {repr(line)}\")\n+\n+print(\"\\n=== Testing FixedWidth with header_rows ===\")\n+out = StringIO()\n+tbl.write(out, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+lines = out.getvalue().splitlines()\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: {repr(line)}\")\n+\n+print(\"\\n=== Testing RST with header_rows (current broken output) ===\")\n+out = StringIO()\n+tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+lines = out.getvalue().splitlines()\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: {repr(line)}\")\n\\ No newline at end of file\ndiff --git a/debug_rst_write_detailed.py b/debug_rst_write_detailed.py\nnew file mode 100644\nindex 000000000..ac824f9c8\n--- /dev/null\n+++ b/debug_rst_write_detailed.py\n@@ -0,0 +1,49 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+from io import StringIO\n+from astropy.io import ascii\n+\n+# Let's debug the parent write method\n+class DebugRST(ascii.RST):\n+    def write(self, lines):\n+        print(\"=== Before parent write ===\")\n+        print(f\"lines: {lines}\")\n+        \n+        lines = super(ascii.RST, self).write(lines)  # Call FixedWidth.write()\n+        print(\"=== After parent write ===\")\n+        for i, line in enumerate(lines):\n+            print(f\"Line {i}: {repr(line)}\")\n+        \n+        # New RST logic\n+        print(\"=== New RST logic ===\")\n+        separator_line = None\n+        for line in lines:\n+            if line and set(line) <= {'=', ' '}:\n+                separator_line = line\n+                print(f\"Found separator line: {repr(line)}\")\n+                break\n+        \n+        if separator_line is None:\n+            # Fallback: generate separator line from first line\n+            separator_line = ''.join('=' if c != ' ' else ' ' for c in lines[0])\n+            print(f\"Generated separator line: {repr(separator_line)}\")\n+        \n+        result = [separator_line] + lines + [separator_line]\n+        print(\"=== Final result ===\")\n+        for i, line in enumerate(result):\n+            print(f\"Line {i}: {repr(line)}\")\n+        return result\n+\n+# Create a test table\n+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"=== Testing RST without header_rows ===\")\n+out = StringIO()\n+ascii.write(tbl, out, Writer=DebugRST)\n+\n+print(\"\\n\" + \"=\"*50)\n+print(\"=== Testing RST with header_rows ===\")\n+out = StringIO()\n+ascii.write(tbl, out, Writer=DebugRST, header_rows=[\"name\", \"unit\"])\n\\ No newline at end of file\ndiff --git a/debug_separator.py b/debug_separator.py\nnew file mode 100644\nindex 000000000..01ab70396\n--- /dev/null\n+++ b/debug_separator.py\n@@ -0,0 +1,10 @@\n+#!/usr/bin/env python3\n+\n+line = '===== ========'\n+print(f\"Line: {repr(line)}\")\n+print(f\"Line stripped: {repr(line.strip())}\")\n+print(f\"Set of characters: {set(line.strip())}\")\n+print(f\"Is subset of {'='}: {set(line.strip()) <= {'='}}\")\n+print(f\"Is subset of {'=', ' '}: {set(line.strip()) <= {'=', ' '}}\")\n+print(f\"Set of characters in line: {set(line)}\")\n+print(f\"Is subset of {'=', ' '}: {set(line) <= {'=', ' '}}\")\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..25011532d\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,21 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+\n+# Create a test table\n+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"Testing normal RST output:\")\n+tbl.write(sys.stdout, format=\"ascii.rst\")\n+\n+print(\"\\nTesting fixed_width with header_rows:\")\n+tbl.write(sys.stdout, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+\n+print(\"\\nTesting RST with header_rows (should fail):\")\n+try:\n+    tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+except Exception as e:\n+    print(f\"Error: {e}\")\n+    print(f\"Error type: {type(e)}\")\n\\ No newline at end of file\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 000000000..9551687d5\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,42 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+from io import StringIO\n+from astropy.io import ascii\n+\n+# Create a test table\n+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"=== Test 1: RST without header_rows ===\")\n+out = StringIO()\n+tbl.write(out, format=\"ascii.rst\")\n+print(out.getvalue())\n+\n+print(\"=== Test 2: RST with header_rows=['name', 'unit'] ===\")\n+out = StringIO()\n+tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+print(out.getvalue())\n+\n+print(\"=== Test 3: RST with header_rows=['name'] (default) ===\")\n+out = StringIO()\n+tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\"])\n+print(out.getvalue())\n+\n+print(\"=== Test 4: RST with header_rows=['unit', 'name'] (different order) ===\")\n+out = StringIO()\n+tbl.write(out, format=\"ascii.rst\", header_rows=[\"unit\", \"name\"])\n+print(out.getvalue())\n+\n+# Test with a more complex table\n+print(\"=== Test 5: Complex table with header_rows ===\")\n+complex_tbl = QTable({\n+    'name': ['star1', 'star2', 'star3'],\n+    'ra': [10.0, 20.0, 30.0] * u.deg,\n+    'dec': [-5.0, 15.0, 25.0] * u.deg,\n+    'mag': [12.5, 13.2, 11.8] * u.mag\n+})\n+\n+out = StringIO()\n+complex_tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+print(out.getvalue())\n\\ No newline at end of file\ndiff --git a/test_header_rows_expected.py b/test_header_rows_expected.py\nnew file mode 100644\nindex 000000000..d9aafc49d\n--- /dev/null\n+++ b/test_header_rows_expected.py\n@@ -0,0 +1,29 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+from io import StringIO\n+from astropy.io import ascii\n+\n+# Create a test table\n+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"Testing fixed_width with header_rows:\")\n+out = StringIO()\n+tbl.write(out, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+print(repr(out.getvalue()))\n+\n+print(\"\\nTesting fixed_width with header_rows (formatted):\")\n+out = StringIO()\n+tbl.write(out, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+print(out.getvalue())\n+\n+# Let's see what the expected RST output should look like\n+print(\"\\nExpected RST output with header_rows should be similar to:\")\n+print(\"===== ========\")\n+print(\" wave response\")\n+print(\"   nm       ct\")\n+print(\"===== ========\")\n+print(\"350.0      0.7\")\n+print(\"950.0      1.2\")\n+print(\"===== ========\")\n\\ No newline at end of file\n"}