{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb..56a867879 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -520,7 +520,7 @@ class NDArithmeticMixin:\n         elif self.mask is None and operand is not None:\n             # Make a copy so there is no reference in the result.\n             return deepcopy(operand.mask)\n-        elif operand is None:\n+        elif operand is None or operand.mask is None:\n             return deepcopy(self.mask)\n         else:\n             # Now lets calculate the resulting mask (operation enforces copy)\ndiff --git a/debug_scalar.py b/debug_scalar.py\nnew file mode 100644\nindex 000000000..113605428\n--- /dev/null\n+++ b/debug_scalar.py\n@@ -0,0 +1,22 @@\n+#!/usr/bin/env python3\n+\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+print(\"Testing scalar conversion...\")\n+\n+# Create test data\n+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+nref_mask = NDDataRef(array, mask=mask)\n+\n+# Convert scalar to NDDataRef\n+scalar_as_nddata = NDDataRef(1.)\n+print(f\"Scalar as NDData: {scalar_as_nddata}\")\n+print(f\"Scalar data: {scalar_as_nddata.data}\")\n+print(f\"Scalar mask: {scalar_as_nddata.mask}\")\n+print(f\"Scalar mask is None: {scalar_as_nddata.mask is None}\")\n+\n+print(f\"nref_mask.mask: {nref_mask.mask}\")\n+print(f\"nref_mask.mask is None: {nref_mask.mask is None}\")\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..9bfaf3c1c\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,55 @@\n+#!/usr/bin/env python3\n+\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+print(\"Testing NDDataRef mask propagation issue...\")\n+\n+# Create test data\n+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+nref_nomask = NDDataRef(array)\n+nref_mask = NDDataRef(array, mask=mask)\n+\n+print(\"Test 1: multiply no mask by constant (no mask * no mask)\")\n+try:\n+    result = nref_nomask.multiply(1., handle_mask=np.bitwise_or)\n+    print(f\"  Result mask: {result.mask}\")\n+    print(\"  SUCCESS\")\n+except Exception as e:\n+    print(f\"  ERROR: {e}\")\n+\n+print(\"\\nTest 2: multiply no mask by itself (no mask * no mask)\")\n+try:\n+    result = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    print(f\"  Result mask: {result.mask}\")\n+    print(\"  SUCCESS\")\n+except Exception as e:\n+    print(f\"  ERROR: {e}\")\n+\n+print(\"\\nTest 3: multiply mask by constant (mask * no mask)\")\n+try:\n+    result = nref_mask.multiply(1., handle_mask=np.bitwise_or)\n+    print(f\"  Result mask: {result.mask}\")\n+    print(\"  SUCCESS\")\n+except Exception as e:\n+    print(f\"  ERROR: {e}\")\n+\n+print(\"\\nTest 4: multiply mask by itself (mask * mask)\")\n+try:\n+    result = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or)\n+    print(f\"  Result mask: {result.mask}\")\n+    print(\"  SUCCESS\")\n+except Exception as e:\n+    print(f\"  ERROR: {e}\")\n+\n+print(\"\\nTest 5: multiply mask by no mask (mask * no mask)\")\n+try:\n+    result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    print(f\"  Result mask: {result.mask}\")\n+    print(\"  SUCCESS\")\n+except Exception as e:\n+    print(f\"  ERROR: {e}\")\n+\n+print(\"\\nDone.\")\n\\ No newline at end of file\ndiff --git a/test_all_operations.py b/test_all_operations.py\nnew file mode 100644\nindex 000000000..8dfe19a7b\n--- /dev/null\n+++ b/test_all_operations.py\n@@ -0,0 +1,58 @@\n+#!/usr/bin/env python3\n+\"\"\"\n+Test all arithmetic operations to ensure the fix works across all of them.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+def test_all_operations():\n+    \"\"\"Test all arithmetic operations with the mask propagation fix.\"\"\"\n+    print(\"Testing all arithmetic operations...\")\n+    \n+    array = np.array([[2, 4, 6], [8, 10, 12], [14, 16, 18]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    operations = [\n+        (\"add\", lambda x, y: x.add(y, handle_mask=np.bitwise_or)),\n+        (\"subtract\", lambda x, y: x.subtract(y, handle_mask=np.bitwise_or)),\n+        (\"multiply\", lambda x, y: x.multiply(y, handle_mask=np.bitwise_or)),\n+        (\"divide\", lambda x, y: x.divide(y, handle_mask=np.bitwise_or)),\n+    ]\n+\n+    for op_name, op_func in operations:\n+        print(f\"\\nTesting {op_name}:\")\n+        \n+        # mask * scalar\n+        try:\n+            result = op_func(nref_mask, 2.0)\n+            expected_mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+            np.testing.assert_array_equal(result.mask, expected_mask)\n+            print(f\"  \u2713 mask * scalar: PASS\")\n+        except Exception as e:\n+            print(f\"  \u2717 mask * scalar: FAIL - {e}\")\n+        \n+        # no mask * scalar\n+        try:\n+            result = op_func(nref_nomask, 2.0)\n+            assert result.mask is None, f\"Expected None, got {result.mask}\"\n+            print(f\"  \u2713 no mask * scalar: PASS\")\n+        except Exception as e:\n+            print(f\"  \u2717 no mask * scalar: FAIL - {e}\")\n+        \n+        # mask * no mask\n+        try:\n+            result = op_func(nref_mask, nref_nomask)\n+            expected_mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+            np.testing.assert_array_equal(result.mask, expected_mask)\n+            print(f\"  \u2713 mask * no mask: PASS\")\n+        except Exception as e:\n+            print(f\"  \u2717 mask * no mask: FAIL - {e}\")\n+\n+    print(\"\\nAll operations tested!\")\n+\n+if __name__ == \"__main__\":\n+    test_all_operations()\n\\ No newline at end of file\ndiff --git a/test_collapse_operations.py b/test_collapse_operations.py\nnew file mode 100644\nindex 000000000..4680fba84\n--- /dev/null\n+++ b/test_collapse_operations.py\n@@ -0,0 +1,43 @@\n+#!/usr/bin/env python3\n+\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+print(\"Testing collapse operations...\")\n+\n+# Create test data\n+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+nref_nomask = NDDataRef(array)\n+nref_mask = NDDataRef(array, mask=mask)\n+\n+collapse_operations = [\n+    (\"sum\", lambda x: x.sum()),\n+    (\"mean\", lambda x: x.mean()),\n+    (\"min\", lambda x: x.min()),\n+    (\"max\", lambda x: x.max()),\n+]\n+\n+for op_name, op_func in collapse_operations:\n+    print(f\"\\nTesting {op_name} operation:\")\n+    \n+    print(f\"  {op_name} on no mask:\")\n+    try:\n+        result = op_func(nref_nomask)\n+        print(f\"    Result: {result.data}\")\n+        print(f\"    Result mask: {result.mask}\")\n+        print(f\"    SUCCESS\")\n+    except Exception as e:\n+        print(f\"    ERROR: {e}\")\n+    \n+    print(f\"  {op_name} on mask:\")\n+    try:\n+        result = op_func(nref_mask)\n+        print(f\"    Result: {result.data}\")\n+        print(f\"    Result mask: {result.mask}\")\n+        print(f\"    SUCCESS\")\n+    except Exception as e:\n+        print(f\"    ERROR: {e}\")\n+\n+print(\"\\nDone.\")\n\\ No newline at end of file\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 000000000..11a74db10\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,56 @@\n+#!/usr/bin/env python3\n+\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+print(\"Testing edge cases for mask propagation...\")\n+\n+# Create test data\n+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+mask2 = np.array([[1, 0, 32], [4, 2, 0], [1, 0, 8]])\n+\n+nref_nomask = NDDataRef(array)\n+nref_mask = NDDataRef(array, mask=mask)\n+nref_mask2 = NDDataRef(array, mask=mask2)\n+\n+test_cases = [\n+    (\"no mask * no mask\", nref_nomask, nref_nomask),\n+    (\"mask * no mask\", nref_mask, nref_nomask),\n+    (\"no mask * mask\", nref_nomask, nref_mask),\n+    (\"mask * mask\", nref_mask, nref_mask2),\n+    (\"mask * scalar\", nref_mask, 2.0),\n+    (\"no mask * scalar\", nref_nomask, 3.0),\n+    (\"mask * numpy array\", nref_mask, np.array([1, 2, 3])),\n+    (\"no mask * numpy array\", nref_nomask, np.array([1, 2, 3])),\n+]\n+\n+for test_name, operand1, operand2 in test_cases:\n+    print(f\"\\nTest: {test_name}\")\n+    try:\n+        result = operand1.multiply(operand2, handle_mask=np.bitwise_or)\n+        print(f\"  Result mask: {result.mask}\")\n+        print(f\"  SUCCESS\")\n+    except Exception as e:\n+        print(f\"  ERROR: {e}\")\n+\n+# Test with different handle_mask functions\n+print(\"\\n\\nTesting with different handle_mask functions...\")\n+\n+handle_mask_functions = [\n+    (\"np.bitwise_or\", np.bitwise_or),\n+    (\"np.logical_or\", np.logical_or),\n+    (\"np.bitwise_and\", np.bitwise_and),\n+    (\"np.logical_and\", np.logical_and),\n+]\n+\n+for func_name, func in handle_mask_functions:\n+    print(f\"\\nTesting with {func_name}:\")\n+    try:\n+        result = nref_mask.multiply(2.0, handle_mask=func)\n+        print(f\"  Result mask: {result.mask}\")\n+        print(f\"  SUCCESS\")\n+    except Exception as e:\n+        print(f\"  ERROR: {e}\")\n+\n+print(\"\\nDone.\")\n\\ No newline at end of file\ndiff --git a/test_operand_none.py b/test_operand_none.py\nnew file mode 100644\nindex 000000000..ce06bd747\n--- /dev/null\n+++ b/test_operand_none.py\n@@ -0,0 +1,55 @@\n+#!/usr/bin/env python3\n+\"\"\"\n+Test that the fix handles the case where operand is None correctly.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+def test_operand_none():\n+    \"\"\"Test that operand=None case still works (for collapse operations).\"\"\"\n+    print(\"Testing operand=None case...\")\n+    \n+    # Create a simple NDDataRef with mask\n+    array = np.array([[1, 2, 3], [4, 5, 6]])\n+    mask = np.array([[0, 1, 0], [1, 0, 1]])\n+    nref_mask = NDDataRef(array, mask=mask)\n+    \n+    # Test the _arithmetic_mask method directly with operand=None\n+    from astropy.nddata.mixins.ndarithmetic import NDArithmeticMixin\n+    \n+    # Create a test class that includes the mixin\n+    class TestNDData(NDArithmeticMixin, NDDataRef):\n+        pass\n+    \n+    test_obj = TestNDData(array, mask=mask)\n+    \n+    # Test _arithmetic_mask with operand=None\n+    result_mask = test_obj._arithmetic_mask(\n+        operation=np.sum,\n+        operand=None,\n+        handle_mask=np.bitwise_or\n+    )\n+    \n+    # Should return a copy of self.mask\n+    expected_mask = np.array([[0, 1, 0], [1, 0, 1]])\n+    np.testing.assert_array_equal(result_mask, expected_mask)\n+    print(\"\u2713 operand=None case: PASS\")\n+    \n+    # Test with operand that has mask=None\n+    nref_nomask = TestNDData(array)  # No mask\n+    result_mask = test_obj._arithmetic_mask(\n+        operation=np.multiply,\n+        operand=nref_nomask,\n+        handle_mask=np.bitwise_or\n+    )\n+    \n+    # Should return a copy of self.mask\n+    expected_mask = np.array([[0, 1, 0], [1, 0, 1]])\n+    np.testing.assert_array_equal(result_mask, expected_mask)\n+    print(\"\u2713 operand.mask=None case: PASS\")\n+    \n+    print(\"All operand=None tests passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_operand_none()\n\\ No newline at end of file\ndiff --git a/test_pr_scenario.py b/test_pr_scenario.py\nnew file mode 100644\nindex 000000000..9be2c1601\n--- /dev/null\n+++ b/test_pr_scenario.py\n@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+\"\"\"\n+Test the exact scenario described in the PR to ensure it's fixed.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+def test_pr_scenario():\n+    \"\"\"Test the exact scenario from the PR description.\"\"\"\n+    print(\"Testing the exact PR scenario...\")\n+    \n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    result = nref_nomask.multiply(1., handle_mask=np.bitwise_or)\n+    assert result.mask is None, f\"Expected None, got {result.mask}\"\n+    print(\"\u2713 multiply no mask by constant: PASS\")\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    result = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    assert result.mask is None, f\"Expected None, got {result.mask}\"\n+    print(\"\u2713 multiply no mask by itself: PASS\")\n+\n+    # multiply mask by constant (mask * no mask)\n+    result = nref_mask.multiply(1., handle_mask=np.bitwise_or)\n+    expected_mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+    np.testing.assert_array_equal(result.mask, expected_mask)\n+    print(\"\u2713 multiply mask by constant: PASS\")\n+\n+    # multiply mask by itself (mask * mask)\n+    result = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or)\n+    expected_mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+    np.testing.assert_array_equal(result.mask, expected_mask)\n+    print(\"\u2713 multiply mask by itself: PASS\")\n+\n+    # multiply mask by no mask (mask * no mask)\n+    result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    expected_mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+    np.testing.assert_array_equal(result.mask, expected_mask)\n+    print(\"\u2713 multiply mask by no mask: PASS\")\n+\n+    print(\"All PR scenario tests passed!\")\n+\n+if __name__ == \"__main__\":\n+    test_pr_scenario()\n\\ No newline at end of file\n"}