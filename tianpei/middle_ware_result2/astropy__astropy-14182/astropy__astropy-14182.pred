{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8ef..40a9fd58a 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,21 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        # Find the separator line (contains position_char which is \"=\")\n+        separator_line = None\n+        for line in lines:\n+            if self.header.position_char in line:\n+                separator_line = line\n+                break\n+        \n+        if separator_line is None:\n+            # Fallback to the old behavior if no separator line is found\n+            separator_line = lines[1] if len(lines) > 1 else \"\"\n+        \n+        lines = [separator_line] + lines + [separator_line]\n         return lines\ndiff --git a/debug_output.py b/debug_output.py\nnew file mode 100644\nindex 000000000..3f6a42c38\n--- /dev/null\n+++ b/debug_output.py\n@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+from astropy.io.ascii import rst\n+\n+# Create a test table\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"Testing RST with header_rows - let's see what the parent write method returns:\")\n+\n+# Create an RST writer instance\n+writer = rst.RST(header_rows=[\"name\", \"unit\"])\n+\n+# Get the lines from the parent write method\n+from io import StringIO\n+output = StringIO()\n+tbl.write(output, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+fixed_width_output = output.getvalue()\n+print(\"Fixed width output:\")\n+print(repr(fixed_width_output))\n+print(\"Fixed width output (formatted):\")\n+print(fixed_width_output)\n+\n+# Now let's see what happens with RST\n+print(\"\\nNow testing RST parent write method:\")\n+# We need to manually call the parent's write method to see what it returns\n+# Let's create a custom RST class to debug this\n+\n+class DebugRST(rst.RST):\n+    def write(self, lines):\n+        parent_lines = super(rst.RST, self).write(lines)  # Call FixedWidth.write\n+        print(f\"Parent write returned {len(parent_lines)} lines:\")\n+        for i, line in enumerate(parent_lines):\n+            print(f\"  Line {i}: {repr(line)}\")\n+        \n+        # Now apply RST formatting\n+        rst_lines = [parent_lines[1]] + parent_lines + [parent_lines[1]]\n+        print(f\"RST write will return {len(rst_lines)} lines:\")\n+        for i, line in enumerate(rst_lines):\n+            print(f\"  Line {i}: {repr(line)}\")\n+        return rst_lines\n+\n+debug_writer = DebugRST(header_rows=[\"name\", \"unit\"])\n+output2 = StringIO()\n+tbl.write(output2, Writer=debug_writer)\n+rst_output = output2.getvalue()\n+print(\"Final RST output:\")\n+print(rst_output)\n\\ No newline at end of file\ndiff --git a/debug_rst_original.py b/debug_rst_original.py\nnew file mode 100644\nindex 000000000..bded4503a\n--- /dev/null\n+++ b/debug_rst_original.py\n@@ -0,0 +1,32 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+from astropy.io.ascii.rst import RST\n+\n+# Create a test table\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"Testing RST with default (no header_rows):\")\n+rst = RST()\n+\n+# Let's see what the parent class returns\n+class DebugRST(RST):\n+    def write(self, lines):\n+        parent_lines = super(RST, self).write(lines)  # Call FixedWidth.write\n+        print(f\"FixedWidth.write returned {len(parent_lines)} lines:\")\n+        for i, line in enumerate(parent_lines):\n+            print(f\"  Line {i}: {repr(line)}\")\n+        \n+        # Now apply RST formatting\n+        rst_lines = [parent_lines[1]] + parent_lines + [parent_lines[1]]\n+        print(f\"RST.write will return {len(rst_lines)} lines:\")\n+        for i, line in enumerate(rst_lines):\n+            print(f\"  Line {i}: {repr(line)}\")\n+        return rst_lines\n+\n+debug_rst = DebugRST()\n+lines = debug_rst.write(tbl)\n+print(\"\\nFinal output:\")\n+for line in lines:\n+    print(line)\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..485be6a40\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,23 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+\n+# Create a test table\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"Testing basic RST output:\")\n+tbl.write(sys.stdout, format=\"ascii.rst\")\n+print()\n+\n+print(\"Testing fixed_width with header_rows (this works):\")\n+tbl.write(sys.stdout, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+print()\n+\n+print(\"Testing RST with header_rows (this should fail):\")\n+try:\n+    tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+except Exception as e:\n+    print(f\"Error: {e}\")\n+    print(f\"Error type: {type(e).__name__}\")\n\\ No newline at end of file\ndiff --git a/simple_debug.py b/simple_debug.py\nnew file mode 100644\nindex 000000000..4fa0a6472\n--- /dev/null\n+++ b/simple_debug.py\n@@ -0,0 +1,27 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+from astropy.io.ascii.rst import RST\n+from astropy.io.ascii.fixedwidth import FixedWidth\n+\n+# Create a test table\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"Testing FixedWidth with header_rows:\")\n+fw = FixedWidth(header_rows=[\"name\", \"unit\"])\n+lines = fw.write(tbl)\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: {repr(line)}\")\n+\n+print(\"\\nTesting RST with default header_rows:\")\n+rst = RST()\n+lines = rst.write(tbl)\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: {repr(line)}\")\n+\n+print(\"\\nTesting RST with header_rows=['name', 'unit']:\")\n+rst2 = RST(header_rows=[\"name\", \"unit\"])\n+lines2 = rst2.write(tbl)\n+for i, line in enumerate(lines2):\n+    print(f\"Line {i}: {repr(line)}\")\n\\ No newline at end of file\ndiff --git a/test_complex.py b/test_complex.py\nnew file mode 100644\nindex 000000000..9cf50a4bd\n--- /dev/null\n+++ b/test_complex.py\n@@ -0,0 +1,20 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+\n+# Create a test table with more complex names and units\n+tbl = QTable({\n+    'wavelength_nm': [350, 950, 1200]*u.nm, \n+    'flux_density': [0.7, 1.2, 0.9]*u.Jy,\n+    'observation_id': ['obs1', 'obs2', 'obs3']\n+})\n+\n+print(\"Complex table with header_rows=['name', 'unit']:\")\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+print()\n+\n+print(\"Same table with fixed_width for comparison:\")\n+tbl.write(sys.stdout, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+print()\n\\ No newline at end of file\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 000000000..1bbc1aeda\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,34 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+\n+# Create a test table\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"Test 1: RST with header_rows=['name']\")\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\"])\n+print()\n+\n+print(\"Test 2: RST with header_rows=['name', 'unit']\")\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+print()\n+\n+print(\"Test 3: RST with header_rows=['name', 'unit', 'dtype']\")\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+print()\n+\n+print(\"Test 4: RST with header_rows=[]\")\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[])\n+print()\n+\n+print(\"Test 5: RST with default header_rows (should be same as Test 1)\")\n+tbl.write(sys.stdout, format=\"ascii.rst\")\n+print()\n+\n+# Test with a table that has no units\n+print(\"Test 6: Table without units, header_rows=['name', 'unit']\")\n+tbl_no_units = QTable({'col1': [1, 2], 'col2': [3.0, 4.0]})\n+tbl_no_units.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+print()\n\\ No newline at end of file\ndiff --git a/test_pr_example.py b/test_pr_example.py\nnew file mode 100644\nindex 000000000..0bb7a1130\n--- /dev/null\n+++ b/test_pr_example.py\n@@ -0,0 +1,77 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+from io import StringIO\n+\n+# Reproduce the exact example from the PR description\n+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"=== Testing the exact example from the PR description ===\")\n+\n+print(\"1. Basic RST output:\")\n+output1 = StringIO()\n+tbl.write(output1, format=\"ascii.rst\")\n+print(output1.getvalue())\n+\n+print(\"2. Fixed width with header_rows (should work):\")\n+output2 = StringIO()\n+tbl.write(output2, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+print(output2.getvalue())\n+\n+print(\"3. RST with header_rows (this was failing before our fix):\")\n+try:\n+    output3 = StringIO()\n+    tbl.write(output3, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    print(output3.getvalue())\n+    print(\"SUCCESS: No error occurred!\")\n+except Exception as e:\n+    print(f\"ERROR: {e}\")\n+    print(f\"Error type: {type(e).__name__}\")\n+\n+print(\"=== Additional verification ===\")\n+\n+print(\"4. Verify the output format matches RST specification:\")\n+output4 = StringIO()\n+tbl.write(output4, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+rst_output = output4.getvalue()\n+lines = rst_output.strip().split('\\n')\n+\n+print(f\"Number of lines: {len(lines)}\")\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: {repr(line)}\")\n+\n+# Verify the structure\n+expected_structure = [\n+    \"separator line (===)\",\n+    \"column names\",\n+    \"units\",\n+    \"separator line (===)\",\n+    \"data row 1\",\n+    \"data row 2\", \n+    \"separator line (===)\"\n+]\n+\n+print(\"\\nStructure verification:\")\n+for i, (line, expected) in enumerate(zip(lines, expected_structure)):\n+    if i in [0, 3, 6]:  # separator lines\n+        if '=' in line:\n+            print(f\"\u2713 Line {i}: {expected} - CORRECT\")\n+        else:\n+            print(f\"\u2717 Line {i}: {expected} - INCORRECT: {repr(line)}\")\n+    elif i == 1:  # column names\n+        if 'wave' in line and 'response' in line:\n+            print(f\"\u2713 Line {i}: {expected} - CORRECT\")\n+        else:\n+            print(f\"\u2717 Line {i}: {expected} - INCORRECT: {repr(line)}\")\n+    elif i == 2:  # units\n+        if 'nm' in line and 'ct' in line:\n+            print(f\"\u2713 Line {i}: {expected} - CORRECT\")\n+        else:\n+            print(f\"\u2717 Line {i}: {expected} - INCORRECT: {repr(line)}\")\n+    elif i in [4, 5]:  # data rows\n+        if any(str(val) in line for val in [350.0, 950.0, 0.7, 1.2]):\n+            print(f\"\u2713 Line {i}: {expected} - CORRECT\")\n+        else:\n+            print(f\"\u2717 Line {i}: {expected} - INCORRECT: {repr(line)}\")\n\\ No newline at end of file\n"}