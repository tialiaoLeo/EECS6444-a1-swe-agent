{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "django__django-10914", "model_patch": "diff --git a/debug_permission_test.py b/debug_permission_test.py\nnew file mode 100644\nindex 0000000000..02efdbb8af\n--- /dev/null\n+++ b/debug_permission_test.py\n@@ -0,0 +1,66 @@\n+#!/usr/bin/env python3\n+\n+import os\n+import tempfile\n+import shutil\n+import sys\n+\n+# Set up Django\n+import django\n+from django.conf import settings\n+\n+MEDIA_ROOT = tempfile.mkdtemp()\n+UPLOAD_TO = os.path.join(MEDIA_ROOT, 'test_upload')\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        MEDIA_ROOT=MEDIA_ROOT,\n+        DATABASES={\n+            'default': {\n+                'ENGINE': 'django.db.backends.sqlite3',\n+                'NAME': ':memory:',\n+            }\n+        },\n+        INSTALLED_APPS=[\n+            'django.contrib.contenttypes',\n+            'django.contrib.auth',\n+        ],\n+        USE_TZ=False,\n+    )\n+\n+django.setup()\n+\n+from django.core.files.uploadedfile import SimpleUploadedFile\n+from django.core.files.storage import default_storage\n+\n+def test_readonly_permission():\n+    print(\"Testing readonly permission behavior...\")\n+    print(f\"FILE_UPLOAD_PERMISSIONS setting: {settings.FILE_UPLOAD_PERMISSIONS}\")\n+    print(f\"MEDIA_ROOT: {MEDIA_ROOT}\")\n+    print(f\"UPLOAD_TO: {UPLOAD_TO}\")\n+    \n+    # Create the media root directory\n+    os.makedirs(MEDIA_ROOT, exist_ok=True)\n+    \n+    # Make the media root read-only\n+    print(f\"Setting MEDIA_ROOT permissions to 0o500 (read-only)\")\n+    os.chmod(MEDIA_ROOT, 0o500)\n+    \n+    try:\n+        print(\"Attempting to save file to read-only directory...\")\n+        file_content = SimpleUploadedFile('foo.txt', b'x')\n+        saved_path = default_storage.save('test_upload/foo.txt', file_content)\n+        print(f\"\u274c UNEXPECTED: File save succeeded - should have failed! Saved to: {saved_path}\")\n+    except PermissionError as e:\n+        print(f\"\u2705 EXPECTED: PermissionError raised: {e}\")\n+    except Exception as e:\n+        print(f\"\u274c UNEXPECTED: Different exception raised: {type(e).__name__}: {e}\")\n+    finally:\n+        # Restore permissions for cleanup\n+        os.chmod(MEDIA_ROOT, 0o700)\n+        shutil.rmtree(MEDIA_ROOT)\n+\n+if __name__ == '__main__':\n+    test_readonly_permission()\n\\ No newline at end of file\ndiff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..bdeec80610 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/reproduce_issue.py b/reproduce_issue.py\nnew file mode 100644\nindex 0000000000..548f38b6c7\n--- /dev/null\n+++ b/reproduce_issue.py\n@@ -0,0 +1,90 @@\n+#!/usr/bin/env python3\n+\n+import os\n+import tempfile\n+import shutil\n+from io import BytesIO\n+\n+# Set up Django\n+import django\n+from django.conf import settings\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        MEDIA_ROOT=tempfile.mkdtemp(),\n+        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary file usage\n+    )\n+\n+django.setup()\n+\n+from django.core.files.storage import default_storage\n+from django.core.files.uploadedfile import InMemoryUploadedFile, TemporaryUploadedFile\n+from django.core.files.uploadhandler import MemoryFileUploadHandler, TemporaryFileUploadHandler\n+\n+def test_file_permissions():\n+    print(\"Testing file upload permissions...\")\n+    print(f\"FILE_UPLOAD_PERMISSIONS setting: {settings.FILE_UPLOAD_PERMISSIONS}\")\n+    print(f\"MEDIA_ROOT: {settings.MEDIA_ROOT}\")\n+    \n+    # Test 1: Small file (InMemoryUploadedFile)\n+    print(\"\\n=== Test 1: Small file (InMemoryUploadedFile) ===\")\n+    small_content = b\"Small file content\"\n+    small_file = InMemoryUploadedFile(\n+        file=BytesIO(small_content),\n+        field_name='test_field',\n+        name='small_test.txt',\n+        content_type='text/plain',\n+        size=len(small_content),\n+        charset='utf-8'\n+    )\n+    \n+    small_path = default_storage.save('small_test.txt', small_file)\n+    full_small_path = default_storage.path(small_path)\n+    small_perms = oct(os.stat(full_small_path).st_mode)[-3:]\n+    print(f\"Small file saved to: {full_small_path}\")\n+    print(f\"Small file permissions: {small_perms}\")\n+    \n+    # Test 2: Large file (TemporaryUploadedFile)\n+    print(\"\\n=== Test 2: Large file (TemporaryUploadedFile) ===\")\n+    large_content = b\"Large file content \" * 100  # Make it larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n+    \n+    # Create a temporary file\n+    temp_file = tempfile.NamedTemporaryFile(delete=False)\n+    temp_file.write(large_content)\n+    temp_file.close()\n+    \n+    large_file = TemporaryUploadedFile(\n+        name='large_test.txt',\n+        content_type='text/plain',\n+        size=len(large_content),\n+        charset='utf-8'\n+    )\n+    large_file.file = open(temp_file.name, 'rb')\n+    large_file.temporary_file_path = lambda: temp_file.name\n+    \n+    large_path = default_storage.save('large_test.txt', large_file)\n+    full_large_path = default_storage.path(large_path)\n+    large_perms = oct(os.stat(full_large_path).st_mode)[-3:]\n+    print(f\"Large file saved to: {full_large_path}\")\n+    print(f\"Large file permissions: {large_perms}\")\n+    \n+    # Check if permissions are different\n+    print(f\"\\n=== Results ===\")\n+    print(f\"Small file permissions: {small_perms}\")\n+    print(f\"Large file permissions: {large_perms}\")\n+    \n+    if small_perms != large_perms:\n+        print(\"\u274c ISSUE CONFIRMED: File permissions are inconsistent!\")\n+        print(\"Small files (InMemoryUploadedFile) and large files (TemporaryUploadedFile) have different permissions.\")\n+    else:\n+        print(\"\u2705 File permissions are consistent.\")\n+    \n+    # Cleanup\n+    large_file.file.close()\n+    os.unlink(temp_file.name)\n+    shutil.rmtree(settings.MEDIA_ROOT)\n+\n+if __name__ == '__main__':\n+    test_file_permissions()\n\\ No newline at end of file\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..2a1c36bc5c\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,111 @@\n+#!/usr/bin/env python3\n+\n+import os\n+import tempfile\n+import shutil\n+from io import BytesIO\n+\n+# Test edge case 1: Explicit None setting should still work\n+import django\n+from django.conf import settings\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        MEDIA_ROOT=tempfile.mkdtemp(),\n+        FILE_UPLOAD_PERMISSIONS=None,  # Explicitly set to None\n+        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,\n+    )\n+\n+django.setup()\n+\n+from django.core.files.storage import default_storage, FileSystemStorage\n+from django.core.files.uploadedfile import InMemoryUploadedFile, TemporaryUploadedFile\n+\n+def test_edge_cases():\n+    print(\"Testing edge cases...\")\n+    print(f\"FILE_UPLOAD_PERMISSIONS setting: {settings.FILE_UPLOAD_PERMISSIONS}\")\n+    print(f\"MEDIA_ROOT: {settings.MEDIA_ROOT}\")\n+    \n+    # Test 1: Explicit None should still work (no chmod called)\n+    print(\"\\n=== Test 1: Explicit None setting ===\")\n+    small_content = b\"Small file content\"\n+    small_file = InMemoryUploadedFile(\n+        file=BytesIO(small_content),\n+        field_name='test_field',\n+        name='small_test.txt',\n+        content_type='text/plain',\n+        size=len(small_content),\n+        charset='utf-8'\n+    )\n+    \n+    small_path = default_storage.save('small_test.txt', small_file)\n+    full_small_path = default_storage.path(small_path)\n+    small_perms = oct(os.stat(full_small_path).st_mode)[-3:]\n+    print(f\"Small file permissions with None setting: {small_perms}\")\n+    \n+    # Test 2: Custom storage with explicit permissions\n+    print(\"\\n=== Test 2: Custom storage with explicit permissions ===\")\n+    custom_storage = FileSystemStorage(\n+        location=settings.MEDIA_ROOT,\n+        file_permissions_mode=0o600\n+    )\n+    \n+    custom_content = b\"Custom permissions test\"\n+    custom_file = InMemoryUploadedFile(\n+        file=BytesIO(custom_content),\n+        field_name='test_field',\n+        name='custom_test.txt',\n+        content_type='text/plain',\n+        size=len(custom_content),\n+        charset='utf-8'\n+    )\n+    \n+    custom_path = custom_storage.save('custom_test.txt', custom_file)\n+    full_custom_path = custom_storage.path(custom_path)\n+    custom_perms = oct(os.stat(full_custom_path).st_mode)[-3:]\n+    print(f\"Custom file permissions: {custom_perms}\")\n+    \n+    # Test 3: Storage with None permissions (should not call chmod)\n+    print(\"\\n=== Test 3: Storage with None permissions ===\")\n+    none_storage = FileSystemStorage(\n+        location=settings.MEDIA_ROOT,\n+        file_permissions_mode=None\n+    )\n+    \n+    none_content = b\"None permissions test\"\n+    none_file = InMemoryUploadedFile(\n+        file=BytesIO(none_content),\n+        field_name='test_field',\n+        name='none_test.txt',\n+        content_type='text/plain',\n+        size=len(none_content),\n+        charset='utf-8'\n+    )\n+    \n+    none_path = none_storage.save('none_test.txt', none_file)\n+    full_none_path = none_storage.path(none_path)\n+    none_perms = oct(os.stat(full_none_path).st_mode)[-3:]\n+    print(f\"None permissions file permissions: {none_perms}\")\n+    \n+    print(f\"\\n=== Results ===\")\n+    print(f\"With None setting: {small_perms}\")\n+    print(f\"With custom 0o600: {custom_perms}\")\n+    print(f\"With explicit None: {none_perms}\")\n+    \n+    if custom_perms == '600':\n+        print(\"\u2705 SUCCESS: Custom permissions override works!\")\n+    else:\n+        print(\"\u274c FAILURE: Custom permissions not working!\")\n+        \n+    if none_perms in ['644', '666']:  # Depends on umask\n+        print(\"\u2705 SUCCESS: None permissions work (no chmod called)!\")\n+    else:\n+        print(f\"\u26a0\ufe0f  WARNING: Unexpected permissions with None: {none_perms}\")\n+    \n+    # Cleanup\n+    shutil.rmtree(settings.MEDIA_ROOT)\n+\n+if __name__ == '__main__':\n+    test_edge_cases()\n\\ No newline at end of file\ndiff --git a/test_fix_comprehensive.py b/test_fix_comprehensive.py\nnew file mode 100644\nindex 0000000000..53c3630e00\n--- /dev/null\n+++ b/test_fix_comprehensive.py\n@@ -0,0 +1,120 @@\n+#!/usr/bin/env python3\n+\n+import os\n+import tempfile\n+import shutil\n+from io import BytesIO\n+\n+# Set up Django\n+import django\n+from django.conf import settings\n+\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        MEDIA_ROOT=tempfile.mkdtemp(),\n+        FILE_UPLOAD_MAX_MEMORY_SIZE=1024,  # Small size to force temporary file usage\n+    )\n+\n+django.setup()\n+\n+from django.core.files.storage import default_storage\n+from django.core.files.uploadedfile import InMemoryUploadedFile, TemporaryUploadedFile\n+\n+def test_file_permissions():\n+    print(\"Testing file upload permissions with the fix...\")\n+    print(f\"FILE_UPLOAD_PERMISSIONS setting: {settings.FILE_UPLOAD_PERMISSIONS} (decimal), {oct(settings.FILE_UPLOAD_PERMISSIONS)} (octal)\")\n+    print(f\"MEDIA_ROOT: {settings.MEDIA_ROOT}\")\n+    \n+    # Test 1: Small file (InMemoryUploadedFile)\n+    print(\"\\n=== Test 1: Small file (InMemoryUploadedFile) ===\")\n+    small_content = b\"Small file content\"\n+    small_file = InMemoryUploadedFile(\n+        file=BytesIO(small_content),\n+        field_name='test_field',\n+        name='small_test.txt',\n+        content_type='text/plain',\n+        size=len(small_content),\n+        charset='utf-8'\n+    )\n+    \n+    small_path = default_storage.save('small_test.txt', small_file)\n+    full_small_path = default_storage.path(small_path)\n+    small_perms = oct(os.stat(full_small_path).st_mode)[-3:]\n+    print(f\"Small file saved to: {full_small_path}\")\n+    print(f\"Small file permissions: {small_perms}\")\n+    \n+    # Test 2: Large file (TemporaryUploadedFile)\n+    print(\"\\n=== Test 2: Large file (TemporaryUploadedFile) ===\")\n+    large_content = b\"Large file content \" * 100  # Make it larger than FILE_UPLOAD_MAX_MEMORY_SIZE\n+    \n+    # Create a temporary file\n+    temp_file = tempfile.NamedTemporaryFile(delete=False)\n+    temp_file.write(large_content)\n+    temp_file.close()\n+    \n+    large_file = TemporaryUploadedFile(\n+        name='large_test.txt',\n+        content_type='text/plain',\n+        size=len(large_content),\n+        charset='utf-8'\n+    )\n+    large_file.file = open(temp_file.name, 'rb')\n+    large_file.temporary_file_path = lambda: temp_file.name\n+    \n+    large_path = default_storage.save('large_test.txt', large_file)\n+    full_large_path = default_storage.path(large_path)\n+    large_perms = oct(os.stat(full_large_path).st_mode)[-3:]\n+    print(f\"Large file saved to: {full_large_path}\")\n+    print(f\"Large file permissions: {large_perms}\")\n+    \n+    # Test 3: Test with custom FILE_UPLOAD_PERMISSIONS\n+    print(\"\\n=== Test 3: Custom FILE_UPLOAD_PERMISSIONS ===\")\n+    from django.core.files.storage import FileSystemStorage\n+    \n+    custom_storage = FileSystemStorage(\n+        location=settings.MEDIA_ROOT,\n+        file_permissions_mode=0o755\n+    )\n+    \n+    custom_content = b\"Custom permissions test\"\n+    custom_file = InMemoryUploadedFile(\n+        file=BytesIO(custom_content),\n+        field_name='test_field',\n+        name='custom_test.txt',\n+        content_type='text/plain',\n+        size=len(custom_content),\n+        charset='utf-8'\n+    )\n+    \n+    custom_path = custom_storage.save('custom_test.txt', custom_file)\n+    full_custom_path = custom_storage.path(custom_path)\n+    custom_perms = oct(os.stat(full_custom_path).st_mode)[-3:]\n+    print(f\"Custom file saved to: {full_custom_path}\")\n+    print(f\"Custom file permissions: {custom_perms}\")\n+    \n+    # Check results\n+    print(f\"\\n=== Results ===\")\n+    print(f\"Small file permissions: {small_perms}\")\n+    print(f\"Large file permissions: {large_perms}\")\n+    print(f\"Custom file permissions: {custom_perms}\")\n+    \n+    if small_perms == large_perms == '644':\n+        print(\"\u2705 SUCCESS: Both small and large files have consistent 644 permissions!\")\n+    else:\n+        print(\"\u274c FAILURE: File permissions are still inconsistent!\")\n+        \n+    if custom_perms == '755':\n+        print(\"\u2705 SUCCESS: Custom permissions work correctly!\")\n+    else:\n+        print(\"\u274c FAILURE: Custom permissions not working!\")\n+    \n+    # Cleanup\n+    large_file.file.close()\n+    if os.path.exists(temp_file.name):\n+        os.unlink(temp_file.name)\n+    shutil.rmtree(settings.MEDIA_ROOT)\n+\n+if __name__ == '__main__':\n+    test_file_permissions()\n\\ No newline at end of file\n"}