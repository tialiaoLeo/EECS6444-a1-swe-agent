{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8ef..d341e3647 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,23 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        \n+        # Find the separator line (line with \"=\" characters)\n+        separator_line = None\n+        separator_index = None\n+        for i, line in enumerate(lines):\n+            if line and set(line.strip()) <= {'=', ' '}:\n+                separator_line = line\n+                separator_index = i\n+                break\n+        \n+        if separator_line is not None:\n+            # Add separator line at the beginning and end, keeping the existing one in place\n+            lines = [separator_line] + lines + [separator_line]\n+        \n         return lines\ndiff --git a/debug_structure.py b/debug_structure.py\nnew file mode 100644\nindex 000000000..d140a356d\n--- /dev/null\n+++ b/debug_structure.py\n@@ -0,0 +1,30 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+from astropy.io.ascii import FixedWidth, RST\n+import io\n+\n+# Create a test table\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"=== FixedWidth with header_rows ===\")\n+output = io.StringIO()\n+tbl.write(output, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+lines = output.getvalue().split('\\n')\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: '{line}'\")\n+\n+print(\"\\n=== RST with header_rows (after fix) ===\")\n+output = io.StringIO()\n+tbl.write(output, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+lines = output.getvalue().split('\\n')\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: '{line}'\")\n+\n+print(\"\\n=== RST without header_rows ===\")\n+output = io.StringIO()\n+tbl.write(output, format=\"ascii.rst\")\n+lines = output.getvalue().split('\\n')\n+for i, line in enumerate(lines):\n+    print(f\"Line {i}: '{line}'\")\n\\ No newline at end of file\ndiff --git a/debug_test_failure.py b/debug_test_failure.py\nnew file mode 100644\nindex 000000000..33690ef65\n--- /dev/null\n+++ b/debug_test_failure.py\n@@ -0,0 +1,42 @@\n+#!/usr/bin/env python3\n+\n+from astropy.io import ascii\n+from io import StringIO\n+\n+# Recreate the test data\n+table = \"\"\"\\\n+==== ========= ==== ====\n+Col1      Col2 Col3 Col4\n+==== ========= ==== ====\n+ 1.2   \"hello\"    1    a\n+ 2.4 's worlds    2    2\n+==== ========= ==== ====\n+\"\"\"\n+dat = ascii.read(table, Reader=ascii.RST)\n+\n+print(\"=== Current output ===\")\n+out = StringIO()\n+ascii.write(dat, out, Writer=ascii.RST)\n+print(repr(out.getvalue()))\n+\n+print(\"\\n=== Expected output ===\")\n+expected = \"\"\"\\\n+==== ========= ==== ====\n+Col1      Col2 Col3 Col4\n+==== ========= ==== ====\n+ 1.2   \"hello\"    1    a\n+ 2.4 's worlds    2    2\n+==== ========= ==== ====\n+\"\"\"\n+print(repr(expected))\n+\n+print(\"\\n=== Line by line comparison ===\")\n+current_lines = out.getvalue().splitlines()\n+expected_lines = expected.splitlines()\n+\n+for i, (current, expected) in enumerate(zip(current_lines, expected_lines)):\n+    match = \"\u2713\" if current == expected else \"\u2717\"\n+    print(f\"Line {i}: {match} '{current}' vs '{expected}'\")\n+\n+if len(current_lines) != len(expected_lines):\n+    print(f\"Length mismatch: current={len(current_lines)}, expected={len(expected_lines)}\")\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..ce802a114\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,23 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+\n+# Create a test table\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"Testing basic RST output:\")\n+tbl.write(sys.stdout, format=\"ascii.rst\")\n+print()\n+\n+print(\"Testing fixed_width with header_rows (should work):\")\n+tbl.write(sys.stdout, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+print()\n+\n+print(\"Testing RST with header_rows (should fail):\")\n+try:\n+    tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+except Exception as e:\n+    print(f\"Error: {e}\")\n+    print(f\"Error type: {type(e).__name__}\")\n\\ No newline at end of file\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 000000000..c71e66a97\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,44 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable, Table\n+import astropy.units as u\n+import sys\n+\n+# Test case 1: Basic functionality with units\n+print(\"=== Test 1: Basic functionality with units ===\")\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+print()\n+\n+# Test case 2: Only name header row (default behavior)\n+print(\"=== Test 2: Only name header row ===\")\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\"])\n+print()\n+\n+# Test case 3: Table without units\n+print(\"=== Test 3: Table without units ===\")\n+tbl_no_units = Table({'col1': [1, 2, 3], 'col2': ['a', 'b', 'c']})\n+tbl_no_units.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+print()\n+\n+# Test case 4: Empty header_rows list\n+print(\"=== Test 4: Empty header_rows list ===\")\n+try:\n+    tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[])\n+    print()\n+except Exception as e:\n+    print(f\"Error with empty header_rows: {e}\")\n+    print()\n+\n+# Test case 5: Custom header row attributes\n+print(\"=== Test 5: Custom attributes (description) ===\")\n+tbl_with_desc = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+tbl_with_desc['wave'].info.description = 'Wavelength'\n+tbl_with_desc['response'].info.description = 'Response'\n+tbl_with_desc.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"description\"])\n+print()\n+\n+# Test case 6: Default behavior (no header_rows specified)\n+print(\"=== Test 6: Default behavior (no header_rows) ===\")\n+tbl.write(sys.stdout, format=\"ascii.rst\")\n+print()\n\\ No newline at end of file\ndiff --git a/test_pr_example.py b/test_pr_example.py\nnew file mode 100644\nindex 000000000..7b09b47e8\n--- /dev/null\n+++ b/test_pr_example.py\n@@ -0,0 +1,57 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+import io\n+\n+# Recreate the exact example from the PR description\n+tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"=== Basic RST output ===\")\n+tbl.write(sys.stdout, format=\"ascii.rst\")\n+print()\n+\n+print(\"=== Fixed width with header_rows ===\")\n+tbl.write(sys.stdout, format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\n+print()\n+\n+print(\"=== RST with header_rows (should now work!) ===\")\n+try:\n+    tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    print(\"\\n\u2713 SUCCESS: RST with header_rows now works!\")\n+except Exception as e:\n+    print(f\"\u2717 FAILED: {e}\")\n+\n+# Test that it produces the expected format\n+print(\"\\n=== Verifying output format ===\")\n+output = io.StringIO()\n+tbl.write(output, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+lines = output.getvalue().strip().split('\\n')\n+\n+# Check that we have the expected structure:\n+# 1. Separator line\n+# 2. Column names\n+# 3. Units\n+# 4. Separator line  \n+# 5. Data rows\n+# 6. Separator line\n+\n+expected_structure = [\n+    \"separator\",  # ===== ========\n+    \"names\",      #  wave response\n+    \"units\",      #    nm       ct\n+    \"separator\",  # ===== ========\n+    \"data1\",      # 350.0      0.7\n+    \"data2\",      # 950.0      1.2\n+    \"separator\"   # ===== ========\n+]\n+\n+print(f\"Number of lines: {len(lines)} (expected: {len(expected_structure)})\")\n+for i, (line, expected) in enumerate(zip(lines, expected_structure)):\n+    if expected == \"separator\":\n+        is_separator = set(line.strip()) <= {'=', ' '}\n+        status = \"\u2713\" if is_separator else \"\u2717\"\n+        print(f\"Line {i}: {status} {expected} - '{line}'\")\n+    else:\n+        print(f\"Line {i}: \u2713 {expected} - '{line}'\")\n\\ No newline at end of file\ndiff --git a/test_separator_detection.py b/test_separator_detection.py\nnew file mode 100644\nindex 000000000..7c2d26255\n--- /dev/null\n+++ b/test_separator_detection.py\n@@ -0,0 +1,20 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+import sys\n+\n+# Test with column names that might contain \"=\" characters\n+print(\"=== Test with tricky column names ===\")\n+tbl = QTable({'x=y': [1, 2]*u.m, 'a==b': [3, 4]*u.s})\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+print()\n+\n+# Test with very wide columns\n+print(\"=== Test with wide columns ===\")\n+tbl_wide = QTable({\n+    'very_long_column_name': [1.23456789, 9.87654321]*u.meter, \n+    'another_very_long_name': [100.123456, 200.654321]*u.second\n+})\n+tbl_wide.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+print()\n\\ No newline at end of file\ndiff --git a/test_table_interface.py b/test_table_interface.py\nnew file mode 100644\nindex 000000000..f15d846d2\n--- /dev/null\n+++ b/test_table_interface.py\n@@ -0,0 +1,35 @@\n+#!/usr/bin/env python3\n+\n+from astropy.table import QTable\n+import astropy.units as u\n+import io\n+\n+# Test that the table.write interface works with header_rows\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\n+\n+print(\"=== Testing table.write interface ===\")\n+\n+# Test 1: Using format string\n+output1 = io.StringIO()\n+tbl.write(output1, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+print(\"Format string method:\")\n+print(output1.getvalue())\n+\n+# Test 2: Using Writer class\n+from astropy.io.ascii import RST\n+output2 = io.StringIO()\n+tbl.write(output2, Writer=RST, header_rows=[\"name\", \"unit\"])\n+print(\"Writer class method:\")\n+print(output2.getvalue())\n+\n+# Verify both methods produce the same output\n+if output1.getvalue() == output2.getvalue():\n+    print(\"\u2713 Both methods produce identical output\")\n+else:\n+    print(\"\u2717 Methods produce different output\")\n+    print(\"Difference:\")\n+    lines1 = output1.getvalue().splitlines()\n+    lines2 = output2.getvalue().splitlines()\n+    for i, (l1, l2) in enumerate(zip(lines1, lines2)):\n+        if l1 != l2:\n+            print(f\"  Line {i}: '{l1}' vs '{l2}'\")\n\\ No newline at end of file\n"}