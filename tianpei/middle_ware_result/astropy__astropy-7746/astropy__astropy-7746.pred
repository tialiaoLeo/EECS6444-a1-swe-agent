{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex d3a06f2b31..cfa3dda859 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1218,6 +1218,15 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise ValueError(\n                     \"Coordinate arrays are not broadcastable to each other\")\n \n+            # Handle empty arrays\n+            if axes[0].size == 0:\n+                # Return empty arrays with the same shape as input for each output dimension\n+                if ra_dec_order and sky == 'output':\n+                    return (np.empty(axes[0].shape, dtype=float),\n+                            np.empty(axes[0].shape, dtype=float))\n+                return [np.empty(axes[0].shape, dtype=float)\n+                        for i in range(self.naxis)]\n+\n             xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n \n             if ra_dec_order and sky == 'input':\n@@ -1235,6 +1244,12 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n                     \"of shape (N, {0})\".format(self.naxis))\n+            \n+            # Handle empty arrays\n+            if xy.shape[0] == 0:\n+                # Return empty array with shape (0, naxis)\n+                return np.empty((0, self.naxis), dtype=float)\n+            \n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n             result = func(xy, origin)\ndiff --git a/debug_empty_arrays.py b/debug_empty_arrays.py\nnew file mode 100644\nindex 0000000000..048ce82f6e\n--- /dev/null\n+++ b/debug_empty_arrays.py\n@@ -0,0 +1,26 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Debug script to understand what happens with empty arrays.\n+\"\"\"\n+\n+import numpy as np\n+\n+# Simulate what happens in _return_list_of_arrays with empty arrays\n+axes = [np.array([]), np.array([])]\n+print(f\"Original axes: {axes}\")\n+print(f\"Axes shapes: {[x.shape for x in axes]}\")\n+\n+# Broadcast arrays\n+try:\n+    axes = np.broadcast_arrays(*axes)\n+    print(f\"After broadcast: {axes}\")\n+    print(f\"After broadcast shapes: {[x.shape for x in axes]}\")\n+except ValueError as e:\n+    print(f\"Broadcast error: {e}\")\n+\n+# Create xy array like in the original code\n+xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n+print(f\"xy array: {xy}\")\n+print(f\"xy shape: {xy.shape}\")\n+print(f\"xy size: {xy.size}\")\n\\ No newline at end of file\ndiff --git a/debug_func_output.py b/debug_func_output.py\nnew file mode 100644\nindex 0000000000..f7eb79c000\n--- /dev/null\n+++ b/debug_func_output.py\n@@ -0,0 +1,44 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Debug script to understand what func returns.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS object for testing\n+wcs = WCS(naxis=2)\n+wcs.wcs.crpix = [1, 1]\n+wcs.wcs.crval = [0, 0]\n+wcs.wcs.cdelt = [1, 1]\n+wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+\n+# Test the underlying function directly\n+xy = np.array([[1, 1], [2, 2]])\n+print(f\"Input xy: {xy}\")\n+print(f\"Input xy shape: {xy.shape}\")\n+\n+# This is what the lambda function does: lambda xy, o: self.wcs.p2s(xy, o)['world']\n+result = wcs.wcs.p2s(xy, 0)['world']\n+print(f\"Direct wcs.p2s result: {result}\")\n+print(f\"Direct wcs.p2s result shape: {result.shape}\")\n+\n+# Test with 3D WCS\n+print(\"\\nTesting with 3D WCS:\")\n+wcs3d = WCS(naxis=3)\n+wcs3d.wcs.crpix = [1, 1, 1]\n+wcs3d.wcs.crval = [0, 0, 0]\n+wcs3d.wcs.cdelt = [1, 1, 1]\n+wcs3d.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\", \"FREQ\"]\n+\n+xy3d = np.array([[1, 1, 1], [2, 2, 2]])\n+print(f\"3D Input xy: {xy3d}\")\n+print(f\"3D Input xy shape: {xy3d.shape}\")\n+\n+result3d = wcs3d.wcs.p2s(xy3d, 0)['world']\n+print(f\"3D Direct wcs.p2s result: {result3d}\")\n+print(f\"3D Direct wcs.p2s result shape: {result3d.shape}\")\n+\n+print(f\"WCS naxis: {wcs.naxis}\")\n+print(f\"3D WCS naxis: {wcs3d.naxis}\")\n\\ No newline at end of file\ndiff --git a/debug_output_structure.py b/debug_output_structure.py\nnew file mode 100644\nindex 0000000000..09286f4015\n--- /dev/null\n+++ b/debug_output_structure.py\n@@ -0,0 +1,46 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Debug script to understand the output structure for non-empty arrays.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS object for testing\n+wcs = WCS(naxis=2)\n+wcs.wcs.crpix = [1, 1]\n+wcs.wcs.crval = [0, 0]\n+wcs.wcs.cdelt = [1, 1]\n+wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+\n+# Test with non-empty arrays\n+print(\"Testing with non-empty arrays:\")\n+result = wcs.wcs_pix2world([1, 2], [1, 2], 0)\n+print(f\"Result: {result}\")\n+print(f\"Result type: {type(result)}\")\n+print(f\"Result length: {len(result)}\")\n+print(f\"Result[0] type: {type(result[0])}\")\n+print(f\"Result[0] shape: {result[0].shape}\")\n+print(f\"Result[1] type: {type(result[1])}\")\n+print(f\"Result[1] shape: {result[1].shape}\")\n+\n+# Test with single element arrays\n+print(\"\\nTesting with single element arrays:\")\n+result = wcs.wcs_pix2world([1], [1], 0)\n+print(f\"Result: {result}\")\n+print(f\"Result[0] shape: {result[0].shape}\")\n+print(f\"Result[1] shape: {result[1].shape}\")\n+\n+# Test with 3D WCS\n+print(\"\\nTesting with 3D WCS:\")\n+wcs3d = WCS(naxis=3)\n+wcs3d.wcs.crpix = [1, 1, 1]\n+wcs3d.wcs.crval = [0, 0, 0]\n+wcs3d.wcs.cdelt = [1, 1, 1]\n+wcs3d.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\", \"FREQ\"]\n+\n+result = wcs3d.wcs_pix2world([1, 2], [1, 2], [1, 2], 0)\n+print(f\"3D Result: {result}\")\n+print(f\"3D Result length: {len(result)}\")\n+print(f\"3D Result shapes: {[r.shape for r in result]}\")\n\\ No newline at end of file\ndiff --git a/debug_single_array.py b/debug_single_array.py\nnew file mode 100644\nindex 0000000000..5afad55a46\n--- /dev/null\n+++ b/debug_single_array.py\n@@ -0,0 +1,33 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Debug script to test single array input with empty arrays.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS object for testing\n+wcs = WCS(naxis=2)\n+wcs.wcs.crpix = [1, 1]\n+wcs.wcs.crval = [0, 0]\n+wcs.wcs.cdelt = [1, 1]\n+wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+\n+# Test with single empty 2D array\n+print(\"Testing with single empty 2D array:\")\n+try:\n+    result = wcs.wcs_pix2world(np.empty((0, 2)), 0)\n+    print(f\"Success! Result: {result}\")\n+    print(f\"Result shape: {result.shape}\")\n+except Exception as e:\n+    print(f\"Error: {e}\")\n+\n+# Test with single non-empty 2D array (control)\n+print(\"\\nTesting with single non-empty 2D array:\")\n+try:\n+    result = wcs.wcs_pix2world(np.array([[1, 1], [2, 2]]), 0)\n+    print(f\"Success! Result: {result}\")\n+    print(f\"Result shape: {result.shape}\")\n+except Exception as e:\n+    print(f\"Error: {e}\")\n\\ No newline at end of file\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..cb25b34285\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,49 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Script to reproduce the empty array issue with WCS transformations.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS object for testing\n+wcs = WCS(naxis=2)\n+wcs.wcs.crpix = [1, 1]\n+wcs.wcs.crval = [0, 0]\n+wcs.wcs.cdelt = [1, 1]\n+wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+\n+print(\"Testing WCS transformations with empty arrays...\")\n+\n+# Test case 1: Empty lists\n+print(\"\\nTest 1: Empty lists\")\n+try:\n+    result = wcs.wcs_pix2world([], [], 0)\n+    print(f\"Success! Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {e}\")\n+\n+# Test case 2: Empty numpy arrays\n+print(\"\\nTest 2: Empty numpy arrays\")\n+try:\n+    result = wcs.wcs_pix2world(np.array([]), np.array([]), 0)\n+    print(f\"Success! Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {e}\")\n+\n+# Test case 3: Single empty 2D array\n+print(\"\\nTest 3: Single empty 2D array\")\n+try:\n+    result = wcs.wcs_pix2world(np.empty((0, 2)), 0)\n+    print(f\"Success! Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {e}\")\n+\n+# Test case 4: Non-empty arrays (should work)\n+print(\"\\nTest 4: Non-empty arrays (control test)\")\n+try:\n+    result = wcs.wcs_pix2world([1, 2], [1, 2], 0)\n+    print(f\"Success! Result: {result}\")\n+except Exception as e:\n+    print(f\"Error: {e}\")\n\\ No newline at end of file\ndiff --git a/test_all_transformations.py b/test_all_transformations.py\nnew file mode 100644\nindex 0000000000..754be9547f\n--- /dev/null\n+++ b/test_all_transformations.py\n@@ -0,0 +1,46 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Test script for all transformation methods with empty arrays.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS object for testing\n+wcs = WCS(naxis=2)\n+wcs.wcs.crpix = [1, 1]\n+wcs.wcs.crval = [0, 0]\n+wcs.wcs.cdelt = [1, 1]\n+wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+\n+# List of transformation methods to test\n+methods = [\n+    'wcs_pix2world',\n+    'wcs_world2pix', \n+    'all_pix2world',\n+    'all_world2pix'\n+]\n+\n+print(\"Testing all transformation methods with empty arrays:\")\n+\n+for method_name in methods:\n+    print(f\"\\n{method_name}:\")\n+    try:\n+        method = getattr(wcs, method_name)\n+        result = method([], [], 0)\n+        print(f\"  Success! Result: {result}\")\n+        print(f\"  Result shapes: {[r.shape for r in result]}\")\n+    except Exception as e:\n+        print(f\"  Error: {e}\")\n+\n+# Test with single array format\n+print(\"\\nTesting single array format:\")\n+for method_name in methods:\n+    print(f\"\\n{method_name} (single array):\")\n+    try:\n+        method = getattr(wcs, method_name)\n+        result = method(np.empty((0, 2)), 0)\n+        print(f\"  Success! Result shape: {result.shape}\")\n+    except Exception as e:\n+        print(f\"  Error: {e}\")\n\\ No newline at end of file\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..7e33ad72ad\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,73 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Test script for edge cases with empty arrays.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Test with 2D WCS\n+print(\"=== Testing 2D WCS ===\")\n+wcs2d = WCS(naxis=2)\n+wcs2d.wcs.crpix = [1, 1]\n+wcs2d.wcs.crval = [0, 0]\n+wcs2d.wcs.cdelt = [1, 1]\n+wcs2d.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+\n+# Test different transformation methods\n+print(\"\\n1. wcs_pix2world with empty lists:\")\n+result = wcs2d.wcs_pix2world([], [], 0)\n+print(f\"Result: {result}\")\n+print(f\"Result types: {[type(r) for r in result]}\")\n+print(f\"Result shapes: {[r.shape for r in result]}\")\n+\n+print(\"\\n2. all_pix2world with empty lists:\")\n+result = wcs2d.all_pix2world([], [], 0)\n+print(f\"Result: {result}\")\n+print(f\"Result types: {[type(r) for r in result]}\")\n+print(f\"Result shapes: {[r.shape for r in result]}\")\n+\n+print(\"\\n3. wcs_world2pix with empty lists:\")\n+result = wcs2d.wcs_world2pix([], [], 0)\n+print(f\"Result: {result}\")\n+print(f\"Result types: {[type(r) for r in result]}\")\n+print(f\"Result shapes: {[r.shape for r in result]}\")\n+\n+# Test with 3D WCS\n+print(\"\\n=== Testing 3D WCS ===\")\n+wcs3d = WCS(naxis=3)\n+wcs3d.wcs.crpix = [1, 1, 1]\n+wcs3d.wcs.crval = [0, 0, 0]\n+wcs3d.wcs.cdelt = [1, 1, 1]\n+wcs3d.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\", \"FREQ\"]\n+\n+print(\"\\n4. wcs_pix2world with 3D empty lists:\")\n+result = wcs3d.wcs_pix2world([], [], [], 0)\n+print(f\"Result: {result}\")\n+print(f\"Result length: {len(result)}\")\n+print(f\"Result shapes: {[r.shape for r in result]}\")\n+\n+print(\"\\n5. Single empty 3D array:\")\n+result = wcs3d.wcs_pix2world(np.empty((0, 3)), 0)\n+print(f\"Result: {result}\")\n+print(f\"Result shape: {result.shape}\")\n+\n+# Test with 1D WCS\n+print(\"\\n=== Testing 1D WCS ===\")\n+wcs1d = WCS(naxis=1)\n+wcs1d.wcs.crpix = [1]\n+wcs1d.wcs.crval = [0]\n+wcs1d.wcs.cdelt = [1]\n+wcs1d.wcs.ctype = [\"FREQ\"]\n+\n+print(\"\\n6. wcs_pix2world with 1D empty list:\")\n+result = wcs1d.wcs_pix2world([], 0)\n+print(f\"Result: {result}\")\n+print(f\"Result length: {len(result)}\")\n+print(f\"Result shapes: {[r.shape for r in result]}\")\n+\n+print(\"\\n7. Single empty 1D array:\")\n+result = wcs1d.wcs_pix2world(np.empty((0, 1)), 0)\n+print(f\"Result: {result}\")\n+print(f\"Result shape: {result.shape}\")\n\\ No newline at end of file\ndiff --git a/test_edge_cases_comprehensive.py b/test_edge_cases_comprehensive.py\nnew file mode 100644\nindex 0000000000..2a7951b6fb\n--- /dev/null\n+++ b/test_edge_cases_comprehensive.py\n@@ -0,0 +1,96 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Comprehensive test for edge cases with empty arrays.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+def test_mixed_empty_non_empty():\n+    \"\"\"Test that we get proper error messages when mixing empty and non-empty arrays.\"\"\"\n+    \n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.crval = [0, 0]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    \n+    # This should fail with a broadcasting error\n+    try:\n+        result = wcs.wcs_pix2world([], [1, 2], 0)\n+        print(\"ERROR: Should have failed with broadcasting error\")\n+    except ValueError as e:\n+        print(f\"Correctly caught broadcasting error: {e}\")\n+    \n+    try:\n+        result = wcs.wcs_pix2world([1, 2], [], 0)\n+        print(\"ERROR: Should have failed with broadcasting error\")\n+    except ValueError as e:\n+        print(f\"Correctly caught broadcasting error: {e}\")\n+\n+\n+def test_different_empty_shapes():\n+    \"\"\"Test different ways to create empty arrays.\"\"\"\n+    \n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.crval = [0, 0]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    \n+    # Different ways to create empty arrays\n+    empty_arrays = [\n+        [],\n+        np.array([]),\n+        np.empty(0),\n+        np.zeros(0),\n+        np.ones(0),\n+        np.array([], dtype=int),\n+        np.array([], dtype=float),\n+    ]\n+    \n+    for i, empty1 in enumerate(empty_arrays):\n+        for j, empty2 in enumerate(empty_arrays):\n+            print(f\"Testing empty array types {i}, {j}\")\n+            result = wcs.wcs_pix2world(empty1, empty2, 0)\n+            assert isinstance(result, list)\n+            assert len(result) == 2\n+            assert result[0].shape == (0,)\n+            assert result[1].shape == (0,)\n+            print(f\"  Success!\")\n+\n+\n+def test_empty_arrays_different_shapes():\n+    \"\"\"Test single empty arrays with different shapes.\"\"\"\n+    \n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.crval = [0, 0]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    \n+    # Different ways to create empty 2D arrays\n+    empty_2d_arrays = [\n+        np.empty((0, 2)),\n+        np.zeros((0, 2)),\n+        np.ones((0, 2)),\n+        np.array([]).reshape(0, 2),\n+        np.array([], dtype=int).reshape(0, 2),\n+        np.array([], dtype=float).reshape(0, 2),\n+    ]\n+    \n+    for i, empty_array in enumerate(empty_2d_arrays):\n+        print(f\"Testing empty 2D array type {i}: shape={empty_array.shape}, dtype={empty_array.dtype}\")\n+        result = wcs.wcs_pix2world(empty_array, 0)\n+        assert isinstance(result, np.ndarray)\n+        assert result.shape == (0, 2)\n+        assert result.dtype == float\n+        print(f\"  Success!\")\n+\n+\n+if __name__ == \"__main__\":\n+    test_mixed_empty_non_empty()\n+    test_different_empty_shapes()\n+    test_empty_arrays_different_shapes()\n+    print(\"All edge case tests passed!\")\n\\ No newline at end of file\ndiff --git a/test_empty_arrays_fix.py b/test_empty_arrays_fix.py\nnew file mode 100644\nindex 0000000000..cabd1dc6b0\n--- /dev/null\n+++ b/test_empty_arrays_fix.py\n@@ -0,0 +1,152 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Test script to verify the fix for empty arrays in WCS transformations.\n+This test should be added to the official test suite.\n+\"\"\"\n+\n+import numpy as np\n+import pytest\n+from astropy.wcs import WCS\n+\n+\n+def test_empty_arrays_wcs_transformations():\n+    \"\"\"Test that WCS transformations handle empty arrays correctly.\"\"\"\n+    \n+    # Create a simple 2D WCS object for testing\n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.crval = [0, 0]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    \n+    # Test list of empty arrays\n+    result = wcs.wcs_pix2world([], [], 0)\n+    assert isinstance(result, list)\n+    assert len(result) == 2\n+    assert isinstance(result[0], np.ndarray)\n+    assert isinstance(result[1], np.ndarray)\n+    assert result[0].shape == (0,)\n+    assert result[1].shape == (0,)\n+    assert result[0].dtype == float\n+    assert result[1].dtype == float\n+    \n+    # Test numpy empty arrays\n+    result = wcs.wcs_pix2world(np.array([]), np.array([]), 0)\n+    assert isinstance(result, list)\n+    assert len(result) == 2\n+    assert result[0].shape == (0,)\n+    assert result[1].shape == (0,)\n+    \n+    # Test single empty 2D array\n+    result = wcs.wcs_pix2world(np.empty((0, 2)), 0)\n+    assert isinstance(result, np.ndarray)\n+    assert result.shape == (0, 2)\n+    assert result.dtype == float\n+    \n+    # Test with ra_dec_order=True\n+    result = wcs.wcs_pix2world([], [], 0, ra_dec_order=True)\n+    assert isinstance(result, tuple)\n+    assert len(result) == 2\n+    assert result[0].shape == (0,)\n+    assert result[1].shape == (0,)\n+    \n+    # Test with ra_dec_order=False\n+    result = wcs.wcs_pix2world([], [], 0, ra_dec_order=False)\n+    assert isinstance(result, list)\n+    assert len(result) == 2\n+    assert result[0].shape == (0,)\n+    assert result[1].shape == (0,)\n+\n+\n+def test_empty_arrays_3d_wcs():\n+    \"\"\"Test that 3D WCS transformations handle empty arrays correctly.\"\"\"\n+    \n+    # Create a 3D WCS object\n+    wcs = WCS(naxis=3)\n+    wcs.wcs.crpix = [1, 1, 1]\n+    wcs.wcs.crval = [0, 0, 0]\n+    wcs.wcs.cdelt = [1, 1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\", \"FREQ\"]\n+    \n+    # Test list of empty arrays\n+    result = wcs.wcs_pix2world([], [], [], 0)\n+    assert isinstance(result, list)\n+    assert len(result) == 3\n+    for i in range(3):\n+        assert isinstance(result[i], np.ndarray)\n+        assert result[i].shape == (0,)\n+        assert result[i].dtype == float\n+    \n+    # Test single empty 3D array\n+    result = wcs.wcs_pix2world(np.empty((0, 3)), 0)\n+    assert isinstance(result, np.ndarray)\n+    assert result.shape == (0, 3)\n+    assert result.dtype == float\n+\n+\n+def test_empty_arrays_1d_wcs():\n+    \"\"\"Test that 1D WCS transformations handle empty arrays correctly.\"\"\"\n+    \n+    # Create a 1D WCS object\n+    wcs = WCS(naxis=1)\n+    wcs.wcs.crpix = [1]\n+    wcs.wcs.crval = [0]\n+    wcs.wcs.cdelt = [1]\n+    wcs.wcs.ctype = [\"FREQ\"]\n+    \n+    # Test list of empty arrays\n+    result = wcs.wcs_pix2world([], 0)\n+    assert isinstance(result, list)\n+    assert len(result) == 1\n+    assert isinstance(result[0], np.ndarray)\n+    assert result[0].shape == (0,)\n+    assert result[0].dtype == float\n+    \n+    # Test single empty 1D array\n+    result = wcs.wcs_pix2world(np.empty((0, 1)), 0)\n+    assert isinstance(result, np.ndarray)\n+    assert result.shape == (0, 1)\n+    assert result.dtype == float\n+\n+\n+def test_empty_arrays_all_transformation_methods():\n+    \"\"\"Test that all WCS transformation methods handle empty arrays correctly.\"\"\"\n+    \n+    # Create a simple 2D WCS object\n+    wcs = WCS(naxis=2)\n+    wcs.wcs.crpix = [1, 1]\n+    wcs.wcs.crval = [0, 0]\n+    wcs.wcs.cdelt = [1, 1]\n+    wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+    \n+    # List of transformation methods to test\n+    methods = [\n+        'wcs_pix2world',\n+        'wcs_world2pix', \n+        'all_pix2world',\n+        'all_world2pix'\n+    ]\n+    \n+    for method_name in methods:\n+        method = getattr(wcs, method_name)\n+        \n+        # Test list format\n+        result = method([], [], 0)\n+        assert isinstance(result, list)\n+        assert len(result) == 2\n+        assert result[0].shape == (0,)\n+        assert result[1].shape == (0,)\n+        \n+        # Test single array format\n+        result = method(np.empty((0, 2)), 0)\n+        assert isinstance(result, np.ndarray)\n+        assert result.shape == (0, 2)\n+\n+\n+if __name__ == \"__main__\":\n+    test_empty_arrays_wcs_transformations()\n+    test_empty_arrays_3d_wcs()\n+    test_empty_arrays_1d_wcs()\n+    test_empty_arrays_all_transformation_methods()\n+    print(\"All tests passed!\")\n\\ No newline at end of file\ndiff --git a/test_original_issue.py b/test_original_issue.py\nnew file mode 100644\nindex 0000000000..15b76f2d85\n--- /dev/null\n+++ b/test_original_issue.py\n@@ -0,0 +1,28 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Test the original issue from the PR description.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS object (we can't use the 2MASS_h.fits file from the example)\n+wcs = WCS(naxis=2)\n+wcs.wcs.crpix = [1, 1]\n+wcs.wcs.crval = [0, 0]\n+wcs.wcs.cdelt = [1, 1]\n+wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+\n+print(\"Testing the original issue from the PR description...\")\n+\n+# This was the failing case from the PR description\n+try:\n+    result = wcs.wcs_pix2world([], [], 0)\n+    print(f\"SUCCESS! Result: {result}\")\n+    print(f\"Result type: {type(result)}\")\n+    print(f\"Result shapes: {[r.shape for r in result]}\")\n+except Exception as e:\n+    print(f\"FAILED: {e}\")\n+\n+print(\"\\nThe issue has been fixed!\")\n\\ No newline at end of file\ndiff --git a/test_ra_dec_order.py b/test_ra_dec_order.py\nnew file mode 100644\nindex 0000000000..bd2a49179c\n--- /dev/null\n+++ b/test_ra_dec_order.py\n@@ -0,0 +1,60 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Test script for ra_dec_order parameter with empty arrays.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS object for testing\n+wcs = WCS(naxis=2)\n+wcs.wcs.crpix = [1, 1]\n+wcs.wcs.crval = [0, 0]\n+wcs.wcs.cdelt = [1, 1]\n+wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+\n+print(\"Testing ra_dec_order parameter with empty arrays:\")\n+\n+# Test with ra_dec_order=True\n+print(\"\\n1. wcs_pix2world with ra_dec_order=True:\")\n+try:\n+    result = wcs.wcs_pix2world([], [], 0, ra_dec_order=True)\n+    print(f\"  Success! Result: {result}\")\n+    print(f\"  Result type: {type(result)}\")\n+    print(f\"  Result length: {len(result)}\")\n+    print(f\"  Result shapes: {[r.shape for r in result]}\")\n+except Exception as e:\n+    print(f\"  Error: {e}\")\n+\n+# Test with ra_dec_order=False (default)\n+print(\"\\n2. wcs_pix2world with ra_dec_order=False:\")\n+try:\n+    result = wcs.wcs_pix2world([], [], 0, ra_dec_order=False)\n+    print(f\"  Success! Result: {result}\")\n+    print(f\"  Result type: {type(result)}\")\n+    print(f\"  Result length: {len(result)}\")\n+    print(f\"  Result shapes: {[r.shape for r in result]}\")\n+except Exception as e:\n+    print(f\"  Error: {e}\")\n+\n+# Test with non-empty arrays for comparison\n+print(\"\\n3. wcs_pix2world with ra_dec_order=True (non-empty):\")\n+try:\n+    result = wcs.wcs_pix2world([1, 2], [1, 2], 0, ra_dec_order=True)\n+    print(f\"  Success! Result: {result}\")\n+    print(f\"  Result type: {type(result)}\")\n+    print(f\"  Result length: {len(result)}\")\n+    print(f\"  Result shapes: {[r.shape for r in result]}\")\n+except Exception as e:\n+    print(f\"  Error: {e}\")\n+\n+print(\"\\n4. wcs_pix2world with ra_dec_order=False (non-empty):\")\n+try:\n+    result = wcs.wcs_pix2world([1, 2], [1, 2], 0, ra_dec_order=False)\n+    print(f\"  Success! Result: {result}\")\n+    print(f\"  Result type: {type(result)}\")\n+    print(f\"  Result length: {len(result)}\")\n+    print(f\"  Result shapes: {[r.shape for r in result]}\")\n+except Exception as e:\n+    print(f\"  Error: {e}\")\n\\ No newline at end of file\ndiff --git a/test_single_array_output.py b/test_single_array_output.py\nnew file mode 100644\nindex 0000000000..4baae1cd20\n--- /dev/null\n+++ b/test_single_array_output.py\n@@ -0,0 +1,29 @@\n+#!/usr/bin/env python\n+\n+\"\"\"\n+Test script to check single array output format.\n+\"\"\"\n+\n+import numpy as np\n+from astropy.wcs import WCS\n+\n+# Create a simple WCS object for testing\n+wcs = WCS(naxis=2)\n+wcs.wcs.crpix = [1, 1]\n+wcs.wcs.crval = [0, 0]\n+wcs.wcs.cdelt = [1, 1]\n+wcs.wcs.ctype = [\"RA---TAN\", \"DEC--TAN\"]\n+\n+# Test with single non-empty 2D array\n+print(\"Testing with single non-empty 2D array:\")\n+result = wcs.wcs_pix2world(np.array([[1, 1], [2, 2]]), 0)\n+print(f\"Result: {result}\")\n+print(f\"Result type: {type(result)}\")\n+print(f\"Result shape: {result.shape}\")\n+\n+# Test with single empty 2D array\n+print(\"\\nTesting with single empty 2D array:\")\n+result = wcs.wcs_pix2world(np.empty((0, 2)), 0)\n+print(f\"Result: {result}\")\n+print(f\"Result type: {type(result)}\")\n+print(f\"Result shape: {result.shape}\")\n\\ No newline at end of file\n"}