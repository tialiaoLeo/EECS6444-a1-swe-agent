{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "astropy__astropy-14365", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004a..7e69972ef 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -67,7 +67,7 @@ def _line_type(line, delimiter=None):\n         sep = r\"\\s+\"\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n-    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n+    _type_re = rf\"(?i)^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n     _line_type_re = re.compile(_type_re)\n     line = line.strip()\n     if not line:\n@@ -293,7 +293,9 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n                 for cline in command_lines.strip().split(\"\\n\"):\n-                    command = cline.strip().split()\n+                    # Remove comments from command line\n+                    command_part = cline.split('!')[0].strip()\n+                    command = command_part.split()\n                     # This should never happen, but just in case.\n                     if len(command) < 3:\n                         continue\ndiff --git a/reproduce_issue.py b/reproduce_issue.py\nnew file mode 100644\nindex 000000000..af1736258\n--- /dev/null\n+++ b/reproduce_issue.py\n@@ -0,0 +1,96 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Script to reproduce the QDP case sensitivity issue.\"\"\"\n+\n+import tempfile\n+import os\n+from astropy.table import Table\n+\n+def test_case_sensitivity():\n+    \"\"\"Test that QDP files with lowercase commands work.\"\"\"\n+    \n+    # Create a test QDP file with lowercase commands\n+    test_content = \"\"\"read serr 1 2 \n+1 0.5 1 0.5\n+\"\"\"\n+    \n+    # Write to a temporary file\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(test_content)\n+        temp_filename = f.name\n+    \n+    try:\n+        print(\"Testing lowercase QDP commands...\")\n+        print(f\"File content:\\n{test_content}\")\n+        \n+        # Try to read the table\n+        table = Table.read(temp_filename, format='ascii.qdp')\n+        print(\"SUCCESS: Table read successfully!\")\n+        print(f\"Table columns: {table.colnames}\")\n+        print(f\"Table data:\\n{table}\")\n+        \n+    except Exception as e:\n+        print(f\"ERROR: {e}\")\n+        return False\n+    finally:\n+        # Clean up\n+        os.unlink(temp_filename)\n+    \n+    return True\n+\n+def test_uppercase_still_works():\n+    \"\"\"Test that uppercase commands still work after our fix.\"\"\"\n+    \n+    # Create a test QDP file with uppercase commands\n+    test_content = \"\"\"READ SERR 1 2 \n+1 0.5 1 0.5\n+\"\"\"\n+    \n+    # Write to a temporary file\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(test_content)\n+        temp_filename = f.name\n+    \n+    try:\n+        print(\"\\nTesting uppercase QDP commands...\")\n+        print(f\"File content:\\n{test_content}\")\n+        \n+        # Try to read the table\n+        table = Table.read(temp_filename, format='ascii.qdp')\n+        print(\"SUCCESS: Table read successfully!\")\n+        print(f\"Table columns: {table.colnames}\")\n+        print(f\"Table data:\\n{table}\")\n+        \n+    except Exception as e:\n+        print(f\"ERROR: {e}\")\n+        return False\n+    finally:\n+        # Clean up\n+        os.unlink(temp_filename)\n+    \n+    return True\n+\n+if __name__ == \"__main__\":\n+    print(\"=\" * 50)\n+    print(\"Testing QDP case sensitivity issue\")\n+    print(\"=\" * 50)\n+    \n+    # First, let's build the extension modules as suggested by the error\n+    print(\"Building extension modules first...\")\n+    import subprocess\n+    result = subprocess.run(['python', 'setup.py', 'build_ext', '--inplace'], \n+                          cwd='/testbed', capture_output=True, text=True)\n+    if result.returncode != 0:\n+        print(f\"Build failed: {result.stderr}\")\n+    else:\n+        print(\"Build successful!\")\n+    \n+    success1 = test_case_sensitivity()\n+    success2 = test_uppercase_still_works()\n+    \n+    if success1 and success2:\n+        print(\"\\n\" + \"=\" * 50)\n+        print(\"All tests passed!\")\n+    else:\n+        print(\"\\n\" + \"=\" * 50)\n+        print(\"Some tests failed!\")\n\\ No newline at end of file\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 000000000..e0634caea\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,127 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Comprehensive test for QDP case sensitivity fix.\"\"\"\n+\n+import tempfile\n+import os\n+from astropy.table import Table\n+\n+def test_mixed_case_commands():\n+    \"\"\"Test various case combinations.\"\"\"\n+    \n+    test_cases = [\n+        (\"read serr 1 2\", \"lowercase\"),\n+        (\"READ SERR 1 2\", \"uppercase\"),\n+        (\"Read Serr 1 2\", \"title case\"),\n+        (\"read SERR 1 2\", \"mixed case 1\"),\n+        (\"READ serr 1 2\", \"mixed case 2\"),\n+        (\"rEaD sErR 1 2\", \"random case\"),\n+        (\"read terr 1\", \"lowercase terr\"),\n+        (\"READ TERR 1\", \"uppercase terr\"),\n+        (\"Read Terr 1\", \"title case terr\"),\n+    ]\n+    \n+    for command, description in test_cases:\n+        print(f\"\\nTesting {description}: '{command}'\")\n+        \n+        # Create test content\n+        test_content = f\"\"\"{command}\n+1 0.5 1 0.5\n+\"\"\"\n+        \n+        # Write to a temporary file\n+        with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+            f.write(test_content)\n+            temp_filename = f.name\n+        \n+        try:\n+            # Try to read the table\n+            table = Table.read(temp_filename, format='ascii.qdp')\n+            print(f\"  SUCCESS: {table.colnames}\")\n+            \n+        except Exception as e:\n+            print(f\"  ERROR: {e}\")\n+            return False\n+        finally:\n+            # Clean up\n+            os.unlink(temp_filename)\n+    \n+    return True\n+\n+def test_multiple_commands():\n+    \"\"\"Test files with multiple commands in different cases.\"\"\"\n+    \n+    test_content = \"\"\"read serr 1 2\n+READ TERR 3\n+1 0.5 1 0.5 2 0.1 0.2\n+\"\"\"\n+    \n+    print(f\"\\nTesting multiple commands with mixed case:\")\n+    print(f\"Content:\\n{test_content}\")\n+    \n+    # Write to a temporary file\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(test_content)\n+        temp_filename = f.name\n+    \n+    try:\n+        # Try to read the table\n+        table = Table.read(temp_filename, format='ascii.qdp')\n+        print(f\"SUCCESS: {table.colnames}\")\n+        print(f\"Table data:\\n{table}\")\n+        \n+    except Exception as e:\n+        print(f\"ERROR: {e}\")\n+        return False\n+    finally:\n+        # Clean up\n+        os.unlink(temp_filename)\n+    \n+    return True\n+\n+def test_with_comments():\n+    \"\"\"Test commands with comments.\"\"\"\n+    \n+    test_content = \"\"\"! This is a comment\n+read serr 1 2  ! Another comment\n+! More comments\n+1 0.5 1 0.5\n+\"\"\"\n+    \n+    print(f\"\\nTesting commands with comments:\")\n+    print(f\"Content:\\n{test_content}\")\n+    \n+    # Write to a temporary file\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(test_content)\n+        temp_filename = f.name\n+    \n+    try:\n+        # Try to read the table\n+        table = Table.read(temp_filename, format='ascii.qdp')\n+        print(f\"SUCCESS: {table.colnames}\")\n+        \n+    except Exception as e:\n+        print(f\"ERROR: {e}\")\n+        return False\n+    finally:\n+        # Clean up\n+        os.unlink(temp_filename)\n+    \n+    return True\n+\n+if __name__ == \"__main__\":\n+    print(\"=\" * 60)\n+    print(\"Comprehensive QDP case sensitivity test\")\n+    print(\"=\" * 60)\n+    \n+    success1 = test_mixed_case_commands()\n+    success2 = test_multiple_commands()\n+    success3 = test_with_comments()\n+    \n+    if success1 and success2 and success3:\n+        print(\"\\n\" + \"=\" * 60)\n+        print(\"All comprehensive tests passed!\")\n+    else:\n+        print(\"\\n\" + \"=\" * 60)\n+        print(\"Some comprehensive tests failed!\")\n\\ No newline at end of file\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 000000000..2739ebd0b\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,132 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Test edge cases for QDP case sensitivity fix.\"\"\"\n+\n+import tempfile\n+import os\n+from astropy.table import Table\n+\n+def test_case_sensitivity_doesnt_affect_data():\n+    \"\"\"Test that case insensitivity doesn't affect data parsing.\"\"\"\n+    \n+    # Test that \"NO\" values are still case-sensitive (they should be uppercase)\n+    test_content = \"\"\"read serr 1 2\n+1 0.5 NO 0.5\n+\"\"\"\n+    \n+    print(\"Testing that 'NO' values are still case-sensitive...\")\n+    print(f\"File content:\\n{test_content}\")\n+    \n+    # Write to a temporary file\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(test_content)\n+        temp_filename = f.name\n+    \n+    try:\n+        # Try to read the table\n+        table = Table.read(temp_filename, format='ascii.qdp')\n+        print(\"SUCCESS: Table read successfully!\")\n+        print(f\"Table columns: {table.colnames}\")\n+        print(f\"Table data:\\n{table}\")\n+        \n+        # Check that the NO value was properly masked\n+        import numpy as np\n+        if np.ma.is_masked(table['col2'][0]):\n+            print(\"\u2713 'NO' value was properly masked\")\n+        else:\n+            print(\"\u2717 'NO' value was not masked\")\n+            return False\n+        \n+        return True\n+        \n+    except Exception as e:\n+        print(f\"ERROR: {e}\")\n+        return False\n+    finally:\n+        # Clean up\n+        os.unlink(temp_filename)\n+\n+def test_lowercase_no_should_not_be_masked():\n+    \"\"\"Test that lowercase 'no' is not treated as a masked value.\"\"\"\n+    \n+    # Test that lowercase \"no\" is treated as regular data, not as a mask\n+    test_content = \"\"\"read serr 1 2\n+1 0.5 no 0.5\n+\"\"\"\n+    \n+    print(\"\\nTesting that lowercase 'no' is not treated as masked...\")\n+    print(f\"File content:\\n{test_content}\")\n+    \n+    # Write to a temporary file\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(test_content)\n+        temp_filename = f.name\n+    \n+    try:\n+        # This should fail because 'no' is not a valid number and not 'NO'\n+        table = Table.read(temp_filename, format='ascii.qdp')\n+        print(\"ERROR: This should have failed!\")\n+        return False\n+        \n+    except Exception as e:\n+        print(f\"SUCCESS: Expected error occurred: {e}\")\n+        return True\n+    finally:\n+        # Clean up\n+        os.unlink(temp_filename)\n+\n+def test_mixed_case_with_numbers():\n+    \"\"\"Test mixed case commands with various number formats.\"\"\"\n+    \n+    test_content = \"\"\"read SERR 1 2\n+READ terr 3\n+1.5e-3 0.5 2.0 0.1 3 0.2 0.3\n+\"\"\"\n+    \n+    print(\"\\nTesting mixed case commands with various number formats...\")\n+    print(f\"File content:\\n{test_content}\")\n+    \n+    # Write to a temporary file\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(test_content)\n+        temp_filename = f.name\n+    \n+    try:\n+        # Try to read the table\n+        table = Table.read(temp_filename, format='ascii.qdp')\n+        print(\"SUCCESS: Table read successfully!\")\n+        print(f\"Table columns: {table.colnames}\")\n+        print(f\"Table data:\\n{table}\")\n+        \n+        # Check that we have the right number of columns\n+        expected_columns = ['col1', 'col1_err', 'col2', 'col2_err', 'col3', 'col3_perr', 'col3_nerr']\n+        if table.colnames == expected_columns:\n+            print(\"\u2713 Column structure is correct\")\n+        else:\n+            print(f\"\u2717 Expected {expected_columns}, got {table.colnames}\")\n+            return False\n+        \n+        return True\n+        \n+    except Exception as e:\n+        print(f\"ERROR: {e}\")\n+        return False\n+    finally:\n+        # Clean up\n+        os.unlink(temp_filename)\n+\n+if __name__ == \"__main__\":\n+    print(\"=\" * 60)\n+    print(\"Testing edge cases for QDP case sensitivity fix\")\n+    print(\"=\" * 60)\n+    \n+    success1 = test_case_sensitivity_doesnt_affect_data()\n+    success2 = test_lowercase_no_should_not_be_masked()\n+    success3 = test_mixed_case_with_numbers()\n+    \n+    if success1 and success2 and success3:\n+        print(\"\\n\" + \"=\" * 60)\n+        print(\"All edge case tests passed!\")\n+    else:\n+        print(\"\\n\" + \"=\" * 60)\n+        print(\"Some edge case tests failed!\")\n\\ No newline at end of file\ndiff --git a/test_pr_example.py b/test_pr_example.py\nnew file mode 100644\nindex 000000000..0771f630f\n--- /dev/null\n+++ b/test_pr_example.py\n@@ -0,0 +1,66 @@\n+#!/usr/bin/env python3\n+\n+\"\"\"Test the exact example from the PR description.\"\"\"\n+\n+import tempfile\n+import os\n+from astropy.table import Table\n+\n+def test_pr_example():\n+    \"\"\"Test the exact example from the PR description.\"\"\"\n+    \n+    # Create the exact content from the PR\n+    test_content = \"\"\"read serr 1 2 \n+1 0.5 1 0.5\n+\"\"\"\n+    \n+    # Write to a temporary file\n+    with tempfile.NamedTemporaryFile(mode='w', suffix='.qdp', delete=False) as f:\n+        f.write(test_content)\n+        temp_filename = f.name\n+    \n+    try:\n+        print(\"Testing the exact PR example...\")\n+        print(f\"File content:\\n{test_content}\")\n+        \n+        # Try to read the table - this should work now\n+        table = Table.read(temp_filename, format='ascii.qdp')\n+        print(\"SUCCESS: Table read successfully!\")\n+        print(f\"Table columns: {table.colnames}\")\n+        print(f\"Table data:\\n{table}\")\n+        \n+        # Verify the structure is correct\n+        expected_columns = ['col1', 'col1_err', 'col2', 'col2_err']\n+        if table.colnames == expected_columns:\n+            print(\"\u2713 Column names are correct\")\n+        else:\n+            print(f\"\u2717 Expected columns {expected_columns}, got {table.colnames}\")\n+            return False\n+            \n+        # Verify the data\n+        if len(table) == 1 and table['col1'][0] == 1 and table['col1_err'][0] == 0.5:\n+            print(\"\u2713 Data values are correct\")\n+        else:\n+            print(\"\u2717 Data values are incorrect\")\n+            return False\n+        \n+        return True\n+        \n+    except Exception as e:\n+        print(f\"ERROR: {e}\")\n+        return False\n+    finally:\n+        # Clean up\n+        os.unlink(temp_filename)\n+\n+if __name__ == \"__main__\":\n+    print(\"=\" * 50)\n+    print(\"Testing PR example\")\n+    print(\"=\" * 50)\n+    \n+    if test_pr_example():\n+        print(\"\\n\" + \"=\" * 50)\n+        print(\"PR example test PASSED!\")\n+    else:\n+        print(\"\\n\" + \"=\" * 50)\n+        print(\"PR example test FAILED!\")\n\\ No newline at end of file\n"}