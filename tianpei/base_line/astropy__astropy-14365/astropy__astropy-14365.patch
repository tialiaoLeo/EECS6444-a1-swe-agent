diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py
index abdeba8ef..5bf5c36b1 100644
--- a/astropy/io/ascii/rst.py
+++ b/astropy/io/ascii/rst.py
@@ -57,10 +57,47 @@ class RST(FixedWidth):
     data_class = SimpleRSTData
     header_class = SimpleRSTHeader
 
-    def __init__(self):
-        super().__init__(delimiter_pad=None, bookend=False)
+    def __init__(self, header_rows=None):
+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)
 
     def write(self, lines):
         lines = super().write(lines)
-        lines = [lines[1]] + lines + [lines[1]]
+        
+        # For RST format, we need to add separator lines at the beginning and end
+        # The separator line should be generated based on column positions
+        
+        # Find the position line that was generated by the parent class
+        position_line_idx = None
+        separator_line = None
+        for i, line in enumerate(lines):
+            if line and set(line.strip()) <= {self.header.position_char, ' ', self.data.splitter.delimiter}:
+                position_line_idx = i
+                separator_line = line
+                break
+        
+        if separator_line is None:
+            # Generate separator line based on the first non-empty content line
+            content_line = None
+            for line in lines:
+                if line.strip():  # Find first non-empty line
+                    content_line = line
+                    break
+            
+            if content_line:
+                # Create separator line matching the column structure
+                separator_chars = []
+                for char in content_line:
+                    if char == ' ':
+                        separator_chars.append(' ')
+                    else:
+                        separator_chars.append('=')
+                separator_line = ''.join(separator_chars).rstrip()
+            else:
+                separator_line = '===== ========'
+        
+        # Add separator lines at the beginning and end
+        # Keep the position line in the middle if it exists
+        if separator_line.strip():
+            lines = [separator_line] + lines + [separator_line]
+        
         return lines
diff --git a/debug_rst.py b/debug_rst.py
new file mode 100644
index 000000000..d78da142e
--- /dev/null
+++ b/debug_rst.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python3
+
+from astropy.table import QTable
+import astropy.units as u
+from astropy.io import ascii
+from io import StringIO
+
+# Create a test table
+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})
+
+print("=== Testing RST without header_rows ===")
+out = StringIO()
+writer = ascii.get_writer(Writer=ascii.RST)
+lines = writer.write(tbl)
+for i, line in enumerate(lines):
+    print(f"Line {i}: '{line}'")
+
+print("\n=== Testing RST with header_rows ===")
+out = StringIO()
+writer = ascii.get_writer(Writer=ascii.RST, header_rows=["name", "unit"])
+lines = writer.write(tbl)
+for i, line in enumerate(lines):
+    print(f"Line {i}: '{line}'")
+
+print("\n=== Testing FixedWidth with header_rows for comparison ===")
+out = StringIO()
+writer = ascii.get_writer(Writer=ascii.FixedWidth, header_rows=["name", "unit"])
+lines = writer.write(tbl)
+for i, line in enumerate(lines):
+    print(f"Line {i}: '{line}'")
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..511c376ba
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python3
+
+from astropy.table import QTable
+import astropy.units as u
+import sys
+
+# Create a test table
+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})
+
+print("Testing basic RST output:")
+tbl.write(sys.stdout, format="ascii.rst")
+print()
+
+print("Testing fixed_width with header_rows (this works):")
+tbl.write(sys.stdout, format="ascii.fixed_width", header_rows=["name", "unit"])
+print()
+
+print("Testing RST with header_rows (this should fail):")
+try:
+    tbl.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit"])
+except Exception as e:
+    print(f"Error: {e}")
+    print(f"Error type: {type(e)}")
\ No newline at end of file
diff --git a/test_comprehensive.py b/test_comprehensive.py
new file mode 100644
index 000000000..05cc2ea02
--- /dev/null
+++ b/test_comprehensive.py
@@ -0,0 +1,32 @@
+#!/usr/bin/env python3
+
+from astropy.table import QTable
+import astropy.units as u
+import sys
+
+# Create a test table with more metadata
+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})
+tbl['wave'].description = 'Wavelength'
+tbl['response'].description = 'Response value'
+tbl['wave'].format = '.1f'
+tbl['response'].format = '.2f'
+
+print("=== Testing RST with name only (default) ===")
+tbl.write(sys.stdout, format="ascii.rst")
+print()
+
+print("=== Testing RST with name and unit ===")
+tbl.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit"])
+print()
+
+print("=== Testing RST with name, unit, and description ===")
+tbl.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit", "description"])
+print()
+
+print("=== Testing RST with all metadata ===")
+tbl.write(sys.stdout, format="ascii.rst", header_rows=["name", "unit", "format", "description"])
+print()
+
+print("=== Testing RST with just unit ===")
+tbl.write(sys.stdout, format="ascii.rst", header_rows=["unit"])
+print()
\ No newline at end of file
