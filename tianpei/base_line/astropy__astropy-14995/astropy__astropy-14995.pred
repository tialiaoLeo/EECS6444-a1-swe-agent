{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb..a9adc82bd 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -522,6 +522,9 @@ class NDArithmeticMixin:\n             return deepcopy(operand.mask)\n         elif operand is None:\n             return deepcopy(self.mask)\n+        elif operand is not None and operand.mask is None:\n+            # operand has no mask, but self does - return self's mask\n+            return deepcopy(self.mask)\n         else:\n             # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..df83522b3\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,52 @@\n+#!/usr/bin/env python3\n+\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+print(\"Testing NDDataRef mask propagation issue...\")\n+\n+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+nref_nomask = NDDataRef(array)\n+nref_mask = NDDataRef(array, mask=mask)\n+\n+print(\"Test 1: multiply no mask by constant (no mask * no mask)\")\n+try:\n+    result = nref_nomask.multiply(1., handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result.mask}\")\n+    print(\"\u2713 PASS\")\n+except Exception as e:\n+    print(f\"\u2717 FAIL: {e}\")\n+\n+print(\"\\nTest 2: multiply no mask by itself (no mask * no mask)\")\n+try:\n+    result = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result.mask}\")\n+    print(\"\u2713 PASS\")\n+except Exception as e:\n+    print(f\"\u2717 FAIL: {e}\")\n+\n+print(\"\\nTest 3: multiply mask by constant (mask * no mask)\")\n+try:\n+    result = nref_mask.multiply(1., handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result.mask}\")\n+    print(\"\u2713 PASS\")\n+except Exception as e:\n+    print(f\"\u2717 FAIL: {e}\")\n+\n+print(\"\\nTest 4: multiply mask by itself (mask * mask)\")\n+try:\n+    result = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result.mask}\")\n+    print(\"\u2713 PASS\")\n+except Exception as e:\n+    print(f\"\u2717 FAIL: {e}\")\n+\n+print(\"\\nTest 5: multiply mask by no mask (mask * no mask)\")\n+try:\n+    result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    print(f\"Result mask: {result.mask}\")\n+    print(\"\u2713 PASS\")\n+except Exception as e:\n+    print(f\"\u2717 FAIL: {e}\")\n\\ No newline at end of file\ndiff --git a/test_bitwise_or_fix.py b/test_bitwise_or_fix.py\nnew file mode 100644\nindex 000000000..5dc5c45f9\n--- /dev/null\n+++ b/test_bitwise_or_fix.py\n@@ -0,0 +1,46 @@\n+#!/usr/bin/env python3\n+\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+print(\"Testing the specific bitwise_or issue from the PR...\")\n+\n+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+nref_nomask = NDDataRef(array)\n+nref_mask = NDDataRef(array, mask=mask)\n+\n+# This was the failing case in the original issue\n+print(\"Testing: nref_mask.multiply(1., handle_mask=np.bitwise_or)\")\n+try:\n+    result = nref_mask.multiply(1., handle_mask=np.bitwise_or)\n+    print(\"\u2713 SUCCESS: No exception raised\")\n+    print(f\"Result mask:\\n{result.mask}\")\n+    print(f\"Expected mask:\\n{mask}\")\n+    print(f\"Masks are equal: {np.array_equal(result.mask, mask)}\")\n+except Exception as e:\n+    print(f\"\u2717 FAILED: {e}\")\n+\n+print(\"\\nTesting: nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)\")\n+try:\n+    result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+    print(\"\u2713 SUCCESS: No exception raised\")\n+    print(f\"Result mask:\\n{result.mask}\")\n+    print(f\"Expected mask:\\n{mask}\")\n+    print(f\"Masks are equal: {np.array_equal(result.mask, mask)}\")\n+except Exception as e:\n+    print(f\"\u2717 FAILED: {e}\")\n+\n+# Test the reverse case too\n+print(\"\\nTesting: nref_nomask.multiply(nref_mask, handle_mask=np.bitwise_or)\")\n+try:\n+    result = nref_nomask.multiply(nref_mask, handle_mask=np.bitwise_or)\n+    print(\"\u2713 SUCCESS: No exception raised\")\n+    print(f\"Result mask:\\n{result.mask}\")\n+    print(f\"Expected mask:\\n{mask}\")\n+    print(f\"Masks are equal: {np.array_equal(result.mask, mask)}\")\n+except Exception as e:\n+    print(f\"\u2717 FAILED: {e}\")\n+\n+print(\"\\nAll bitwise_or tests completed successfully!\")\n\\ No newline at end of file\ndiff --git a/test_comprehensive.py b/test_comprehensive.py\nnew file mode 100644\nindex 000000000..7cd376223\n--- /dev/null\n+++ b/test_comprehensive.py\n@@ -0,0 +1,112 @@\n+#!/usr/bin/env python3\n+\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+print(\"Comprehensive test for NDDataRef mask propagation...\")\n+\n+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+nref_nomask = NDDataRef(array)\n+nref_mask = NDDataRef(array, mask=mask)\n+\n+def test_operation(name, operation_func, expected_mask):\n+    try:\n+        result = operation_func()\n+        if expected_mask is None:\n+            if result.mask is None:\n+                print(f\"\u2713 {name}: PASS (mask is None as expected)\")\n+            else:\n+                print(f\"\u2717 {name}: FAIL (expected None, got {result.mask})\")\n+        else:\n+            if result.mask is not None and np.array_equal(result.mask, expected_mask):\n+                print(f\"\u2713 {name}: PASS (mask matches expected)\")\n+            else:\n+                print(f\"\u2717 {name}: FAIL (expected {expected_mask}, got {result.mask})\")\n+    except Exception as e:\n+        print(f\"\u2717 {name}: FAIL with exception: {e}\")\n+\n+# Test all arithmetic operations with different handle_mask functions\n+operations = ['add', 'subtract', 'multiply', 'divide']\n+handle_mask_funcs = [np.bitwise_or, np.logical_or, np.bitwise_and, np.logical_and]\n+\n+print(\"\\n=== Testing with scalar operands ===\")\n+for op_name in operations:\n+    for mask_func in handle_mask_funcs:\n+        mask_func_name = mask_func.__name__\n+        \n+        # Test: mask * scalar (should return mask)\n+        test_operation(\n+            f\"{op_name} mask by scalar with {mask_func_name}\",\n+            lambda: getattr(nref_mask, op_name)(1.0, handle_mask=mask_func),\n+            mask\n+        )\n+        \n+        # Test: nomask * scalar (should return None)\n+        test_operation(\n+            f\"{op_name} nomask by scalar with {mask_func_name}\",\n+            lambda: getattr(nref_nomask, op_name)(1.0, handle_mask=mask_func),\n+            None\n+        )\n+\n+print(\"\\n=== Testing with NDDataRef operands ===\")\n+for op_name in operations:\n+    for mask_func in handle_mask_funcs:\n+        mask_func_name = mask_func.__name__\n+        \n+        # Test: mask * nomask (should return mask)\n+        test_operation(\n+            f\"{op_name} mask by nomask with {mask_func_name}\",\n+            lambda: getattr(nref_mask, op_name)(nref_nomask, handle_mask=mask_func),\n+            mask\n+        )\n+        \n+        # Test: nomask * mask (should return mask)\n+        test_operation(\n+            f\"{op_name} nomask by mask with {mask_func_name}\",\n+            lambda: getattr(nref_nomask, op_name)(nref_mask, handle_mask=mask_func),\n+            mask\n+        )\n+        \n+        # Test: nomask * nomask (should return None)\n+        test_operation(\n+            f\"{op_name} nomask by nomask with {mask_func_name}\",\n+            lambda: getattr(nref_nomask, op_name)(nref_nomask, handle_mask=mask_func),\n+            None\n+        )\n+        \n+        # Test: mask * mask (should return mask_func(mask, mask))\n+        expected_mask_mask = mask_func(mask, mask)\n+        test_operation(\n+            f\"{op_name} mask by mask with {mask_func_name}\",\n+            lambda: getattr(nref_mask, op_name)(nref_mask, handle_mask=mask_func),\n+            expected_mask_mask\n+        )\n+\n+print(\"\\n=== Testing edge cases ===\")\n+\n+# Test with different mask shapes/values\n+mask2 = np.array([[1, 0, 1], [0, 1, 0], [1, 0, 1]])\n+nref_mask2 = NDDataRef(array, mask=mask2)\n+\n+test_operation(\n+    \"multiply different masks with bitwise_or\",\n+    lambda: nref_mask.multiply(nref_mask2, handle_mask=np.bitwise_or),\n+    np.bitwise_or(mask, mask2)\n+)\n+\n+# Test with handle_mask=None (should return None regardless)\n+test_operation(\n+    \"multiply mask by nomask with handle_mask=None\",\n+    lambda: nref_mask.multiply(nref_nomask, handle_mask=None),\n+    None\n+)\n+\n+test_operation(\n+    \"multiply mask by mask with handle_mask=None\",\n+    lambda: nref_mask.multiply(nref_mask, handle_mask=None),\n+    None\n+)\n+\n+print(\"\\nAll tests completed!\")\n\\ No newline at end of file\ndiff --git a/test_original_issue.py b/test_original_issue.py\nnew file mode 100644\nindex 000000000..ddb41282b\n--- /dev/null\n+++ b/test_original_issue.py\n@@ -0,0 +1,38 @@\n+#!/usr/bin/env python3\n+\n+# Test the exact examples from the PR description\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+nref_nomask = NDDataRef(array)\n+nref_mask = NDDataRef(array, mask=mask)\n+\n+print(\"Testing original issue examples...\")\n+\n+# multiply no mask by constant (no mask * no mask)\n+result = nref_nomask.multiply(1., handle_mask=np.bitwise_or)\n+print(f\"nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask = {result.mask}\")\n+\n+# multiply no mask by itself (no mask * no mask)\n+result = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+print(f\"nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask = {result.mask}\")\n+\n+# multiply mask by constant (mask * no mask)\n+result = nref_mask.multiply(1., handle_mask=np.bitwise_or)\n+print(f\"nref_mask.multiply(1., handle_mask=np.bitwise_or).mask =\")\n+print(result.mask)\n+\n+# multiply mask by itself (mask * mask)\n+result = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or)\n+print(f\"nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask =\")\n+print(result.mask)\n+\n+# multiply mask by no mask (mask * no mask)\n+result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)\n+print(f\"nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask =\")\n+print(result.mask)\n+\n+print(\"All original examples work correctly!\")\n\\ No newline at end of file\n"}