{"model_name_or_path": "default__claude-sonnet-4-20250514__t-0.00__p-1.00__c-0.50___swe_bench_lite_test", "instance_id": "django__django-11019", "model_patch": "diff --git a/analyze_conflicts.py b/analyze_conflicts.py\nnew file mode 100644\nindex 0000000000..1d91bb7753\n--- /dev/null\n+++ b/analyze_conflicts.py\n@@ -0,0 +1,105 @@\n+#!/usr/bin/env python3\n+\n+import warnings\n+import sys\n+import os\n+\n+# Add the testbed directory to the Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Set up Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        USE_TZ=True,\n+    )\n+\n+django.setup()\n+\n+from django.forms import Media\n+\n+def test_genuine_conflict():\n+    \"\"\"Test a case where there's a genuine ordering conflict\"\"\"\n+    print(\"=== Testing genuine conflict ===\")\n+    \n+    # This should warn because both lists explicitly specify different orders for A and B\n+    list1 = ['A', 'B']\n+    list2 = ['B', 'A']\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        result = Media.merge(list1, list2)\n+        print(f\"merge({list1}, {list2}) = {result}\")\n+        if w:\n+            print(f\"Warnings: {len(w)}\")\n+            for warning in w:\n+                print(f\"  {warning.message}\")\n+        else:\n+            print(\"No warnings\")\n+\n+def test_false_positive():\n+    \"\"\"Test the case from the PR - this should NOT warn\"\"\"\n+    print(\"\\n=== Testing false positive (PR case) ===\")\n+    \n+    # This is the problematic case from the PR\n+    list1 = ['color-picker.js', 'text-editor.js']  # Artificial ordering from previous merge\n+    list2 = ['text-editor.js', 'text-editor-extras.js', 'color-picker.js']  # Explicit dependency order\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        result = Media.merge(list1, list2)\n+        print(f\"merge({list1}, {list2}) = {result}\")\n+        if w:\n+            print(f\"Warnings: {len(w)} (should be 0)\")\n+            for warning in w:\n+                print(f\"  {warning.message}\")\n+        else:\n+            print(\"No warnings (correct)\")\n+\n+def test_dependency_chain():\n+    \"\"\"Test various dependency chain scenarios\"\"\"\n+    print(\"\\n=== Testing dependency chains ===\")\n+    \n+    test_cases = [\n+        # (list1, list2, should_warn, description)\n+        (['A'], ['A', 'B'], False, \"Adding dependency\"),\n+        (['A', 'B'], ['A', 'B', 'C'], False, \"Extending chain\"),\n+        (['A', 'C'], ['A', 'B', 'C'], False, \"Inserting in middle\"),\n+        (['C', 'A'], ['A', 'B', 'C'], False, \"Reordering with dependency\"),\n+        (['A', 'B'], ['B', 'A'], True, \"Genuine conflict\"),\n+        (['A', 'B', 'C'], ['C', 'B', 'A'], True, \"Multiple conflicts\"),\n+    ]\n+    \n+    for list1, list2, should_warn, description in test_cases:\n+        print(f\"\\n{description}:\")\n+        print(f\"  merge({list1}, {list2})\")\n+        \n+        with warnings.catch_warnings(record=True) as w:\n+            warnings.simplefilter(\"always\")\n+            result = Media.merge(list1, list2)\n+            print(f\"  Result: {result}\")\n+            \n+            if should_warn:\n+                if w:\n+                    print(f\"  \u2713 Correctly warned ({len(w)} warnings)\")\n+                else:\n+                    print(f\"  \u2717 Should have warned but didn't\")\n+            else:\n+                if w:\n+                    print(f\"  \u2717 Incorrectly warned ({len(w)} warnings)\")\n+                    for warning in w:\n+                        print(f\"    {warning.message}\")\n+                else:\n+                    print(f\"  \u2713 Correctly no warning\")\n+\n+if __name__ == \"__main__\":\n+    test_genuine_conflict()\n+    test_false_positive()\n+    test_dependency_chain()\n\\ No newline at end of file\ndiff --git a/debug_final_merge.py b/debug_final_merge.py\nnew file mode 100644\nindex 0000000000..0b6bb09c1c\n--- /dev/null\n+++ b/debug_final_merge.py\n@@ -0,0 +1,68 @@\n+#!/usr/bin/env python3\n+\n+import warnings\n+import sys\n+import os\n+\n+# Add the testbed directory to the Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Set up Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        USE_TZ=True,\n+    )\n+\n+django.setup()\n+\n+from django.forms import Media\n+\n+def debug_final_merge_step():\n+    \"\"\"Debug just the final merge step\"\"\"\n+    print(\"=== Debugging final merge step ===\")\n+    \n+    # These are the actual lists that get merged in the final step\n+    form_media_js = ['custom_widget.js', 'jquery.js', 'uses_jquery.js']\n+    inline_media_js = ['jquery.js', 'also_jquery.js', 'custom_widget.js']\n+    \n+    print(f\"form_media_js: {form_media_js}\")\n+    print(f\"inline_media_js: {inline_media_js}\")\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        result = Media.merge(form_media_js, inline_media_js)\n+        print(f\"Merge result: {result}\")\n+        print(f\"Warnings: {len(w)}\")\n+        for warning in w:\n+            print(f\"  {warning.message}\")\n+\n+def debug_media_addition():\n+    \"\"\"Debug the Media.__add__ method\"\"\"\n+    print(\"\\n=== Debugging Media.__add__ ===\")\n+    \n+    form_media = Media(js=['custom_widget.js', 'jquery.js', 'uses_jquery.js'])\n+    inline_media = Media(js=['jquery.js', 'also_jquery.js', 'custom_widget.js'])\n+    \n+    print(f\"form_media._js_lists: {form_media._js_lists}\")\n+    print(f\"inline_media._js_lists: {inline_media._js_lists}\")\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        combined = form_media + inline_media\n+        print(f\"combined._js_lists: {combined._js_lists}\")\n+        print(f\"combined._js: {combined._js}\")\n+        print(f\"Warnings: {len(w)}\")\n+        for warning in w:\n+            print(f\"  {warning.message}\")\n+\n+if __name__ == \"__main__\":\n+    debug_final_merge_step()\n+    debug_media_addition()\n\\ No newline at end of file\ndiff --git a/debug_merge.py b/debug_merge.py\nnew file mode 100644\nindex 0000000000..70d9edc9c1\n--- /dev/null\n+++ b/debug_merge.py\n@@ -0,0 +1,126 @@\n+#!/usr/bin/env python3\n+\n+import warnings\n+import sys\n+import os\n+\n+# Add the testbed directory to the Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Set up Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        USE_TZ=True,\n+    )\n+\n+django.setup()\n+\n+from django.forms import Media\n+\n+def test_merge_step_by_step():\n+    print(\"=== Testing merge step by step ===\")\n+    \n+    # Simulate the problem case\n+    list1 = ['color-picker.js', 'text-editor.js']  # Result of first merge\n+    list2 = ['text-editor.js', 'text-editor-extras.js', 'color-picker.js']  # FancyTextWidget\n+    \n+    print(f\"list1: {list1}\")\n+    print(f\"list2: {list2}\")\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        result = Media.merge(list1, list2)\n+        print(f\"Result: {result}\")\n+        if w:\n+            for warning in w:\n+                print(f\"Warning: {warning.message}\")\n+    \n+    print(\"\\n=== Let's trace through the algorithm ===\")\n+    \n+    # Manual trace of the merge algorithm\n+    combined_list = list(list1)\n+    last_insert_index = len(list1)\n+    print(f\"Initial combined_list: {combined_list}\")\n+    print(f\"Initial last_insert_index: {last_insert_index}\")\n+    \n+    # Walk list_2 in reverse\n+    for i, path in enumerate(reversed(list2)):\n+        print(f\"\\nStep {i+1}: Processing '{path}'\")\n+        try:\n+            index = combined_list.index(path)\n+            print(f\"  '{path}' found at index {index}\")\n+            if index > last_insert_index:\n+                print(f\"  WARNING: index {index} > last_insert_index {last_insert_index}\")\n+                print(f\"  Files in opposite order: {combined_list[last_insert_index]} vs {combined_list[index]}\")\n+            last_insert_index = index\n+            print(f\"  Updated last_insert_index to {last_insert_index}\")\n+        except ValueError:\n+            print(f\"  '{path}' not found, inserting at index {last_insert_index}\")\n+            combined_list.insert(last_insert_index, path)\n+            print(f\"  Updated combined_list: {combined_list}\")\n+    \n+    print(f\"\\nFinal result: {combined_list}\")\n+\n+def test_ideal_case():\n+    print(\"\\n=== Testing what the ideal result should be ===\")\n+    \n+    # The ideal order should be: text-editor.js, text-editor-extras.js, color-picker.js\n+    # Because text-editor-extras.js depends on text-editor.js\n+    \n+    # Let's see what happens if we merge in a different order\n+    media1 = Media(js=['color-picker.js'])\n+    media2 = Media(js=['text-editor.js'])\n+    media3 = Media(js=['text-editor.js', 'text-editor-extras.js', 'color-picker.js'])\n+    \n+    print(\"Individual media objects:\")\n+    print(f\"media1 (ColorPicker): {media1._js}\")\n+    print(f\"media2 (SimpleText): {media2._js}\")\n+    print(f\"media3 (FancyText): {media3._js}\")\n+    \n+    # Try different merge orders\n+    print(\"\\nTrying different merge orders:\")\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        \n+        # Current problematic order: media1 + media2 + media3\n+        result1 = media1 + media2 + media3\n+        print(f\"media1 + media2 + media3: {result1._js}\")\n+        if w:\n+            print(f\"  Warnings: {len(w)}\")\n+            for warning in w:\n+                print(f\"    {warning.message}\")\n+        \n+        # Clear warnings\n+        w.clear()\n+        \n+        # Try: media2 + media1 + media3\n+        result2 = media2 + media1 + media3\n+        print(f\"media2 + media1 + media3: {result2._js}\")\n+        if w:\n+            print(f\"  Warnings: {len(w)}\")\n+            for warning in w:\n+                print(f\"    {warning.message}\")\n+        \n+        # Clear warnings\n+        w.clear()\n+        \n+        # Try: media3 + media1 + media2\n+        result3 = media3 + media1 + media2\n+        print(f\"media3 + media1 + media2: {result3._js}\")\n+        if w:\n+            print(f\"  Warnings: {len(w)}\")\n+            for warning in w:\n+                print(f\"    {warning.message}\")\n+\n+if __name__ == \"__main__\":\n+    test_merge_step_by_step()\n+    test_ideal_case()\n\\ No newline at end of file\ndiff --git a/debug_three_way.py b/debug_three_way.py\nnew file mode 100644\nindex 0000000000..3faaf05a03\n--- /dev/null\n+++ b/debug_three_way.py\n@@ -0,0 +1,121 @@\n+#!/usr/bin/env python3\n+\n+import warnings\n+import sys\n+import os\n+\n+# Add the testbed directory to the Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Set up Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        USE_TZ=True,\n+    )\n+\n+django.setup()\n+\n+from django.forms import Media\n+\n+def debug_merge():\n+    \"\"\"Debug the merge process step by step\"\"\"\n+    print(\"=== Debugging merge process ===\")\n+    \n+    # Test the final merge step from Django test case\n+    list1 = ['custom_widget.js', 'jquery.js', 'uses_jquery.js']\n+    list2 = ['jquery.js', 'also_jquery.js', 'custom_widget.js']\n+    \n+    print(f\"list1: {list1}\")\n+    print(f\"list2: {list2}\")\n+    \n+    # Test our conflict detection\n+    common = set(list1) & set(list2)\n+    print(f\"common elements: {common}\")\n+    \n+    def get_relative_order(lst, elements):\n+        return [item for item in lst if item in elements]\n+    \n+    order1 = get_relative_order(list1, common)\n+    order2 = get_relative_order(list2, common)\n+    \n+    print(f\"order1: {order1}\")\n+    print(f\"order2: {order2}\")\n+    \n+    # Check for conflicts\n+    for i in range(len(order1)):\n+        for j in range(i + 1, len(order1)):\n+            elem1, elem2 = order1[i], order1[j]\n+            print(f\"Checking pair: {elem1}, {elem2}\")\n+            try:\n+                idx1_in_2 = order2.index(elem1)\n+                idx2_in_2 = order2.index(elem2)\n+                print(f\"  In order2: {elem1} at {idx1_in_2}, {elem2} at {idx2_in_2}\")\n+                if idx1_in_2 > idx2_in_2:\n+                    print(f\"  CONFLICT: {elem1} comes after {elem2} in order2\")\n+                else:\n+                    print(f\"  OK: same relative order\")\n+            except ValueError as e:\n+                print(f\"  ERROR: {e}\")\n+    \n+    # Now test the actual merge\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        result = Media.merge(list1, list2)\n+        print(f\"Merge result: {result}\")\n+        if w:\n+            print(f\"Warnings: {len(w)}\")\n+            for warning in w:\n+                print(f\"  {warning.message}\")\n+        else:\n+            print(\"No warnings\")\n+\n+def debug_pr_case():\n+    \"\"\"Debug the PR case\"\"\"\n+    print(\"\\n=== Debugging PR case ===\")\n+    \n+    list1 = ['color-picker.js', 'text-editor.js']\n+    list2 = ['text-editor.js', 'text-editor-extras.js', 'color-picker.js']\n+    \n+    print(f\"list1: {list1}\")\n+    print(f\"list2: {list2}\")\n+    \n+    # Test our conflict detection\n+    common = set(list1) & set(list2)\n+    print(f\"common elements: {common}\")\n+    \n+    def get_relative_order(lst, elements):\n+        return [item for item in lst if item in elements]\n+    \n+    order1 = get_relative_order(list1, common)\n+    order2 = get_relative_order(list2, common)\n+    \n+    print(f\"order1: {order1}\")\n+    print(f\"order2: {order2}\")\n+    \n+    # Check for conflicts\n+    for i in range(len(order1)):\n+        for j in range(i + 1, len(order1)):\n+            elem1, elem2 = order1[i], order1[j]\n+            print(f\"Checking pair: {elem1}, {elem2}\")\n+            try:\n+                idx1_in_2 = order2.index(elem1)\n+                idx2_in_2 = order2.index(elem2)\n+                print(f\"  In order2: {elem1} at {idx1_in_2}, {elem2} at {idx2_in_2}\")\n+                if idx1_in_2 > idx2_in_2:\n+                    print(f\"  CONFLICT: {elem1} comes after {elem2} in order2\")\n+                else:\n+                    print(f\"  OK: same relative order\")\n+            except ValueError as e:\n+                print(f\"  ERROR: {e}\")\n+\n+if __name__ == \"__main__\":\n+    debug_merge()\n+    debug_pr_case()\n\\ No newline at end of file\ndiff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 02aa32b207..7adcc49eb9 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -125,6 +125,45 @@ class Media:\n         in a certain order. In JavaScript you may not be able to reference a\n         global or in CSS you might want to override a style.\n         \"\"\"\n+        # Check for genuine conflicts before merging\n+        # Only warn if files that appear in both lists have different relative orders\n+        def has_conflict(l1, l2):\n+            # Find common elements and their relative orders in both lists\n+            common = set(l1) & set(l2)\n+            if len(common) < 2:\n+                return False\n+            \n+            # Get relative order of common elements in each list\n+            def get_relative_order(lst, elements):\n+                return [item for item in lst if item in elements]\n+            \n+            order1 = get_relative_order(l1, common)\n+            order2 = get_relative_order(l2, common)\n+            \n+            # Check if any pair of elements has different relative order\n+            for i in range(len(order1)):\n+                for j in range(i + 1, len(order1)):\n+                    elem1, elem2 = order1[i], order1[j]\n+                    try:\n+                        idx1_in_2 = order2.index(elem1)\n+                        idx2_in_2 = order2.index(elem2)\n+                        # If relative order is different, we have a conflict\n+                        if idx1_in_2 > idx2_in_2:\n+                            return elem1, elem2\n+                    except ValueError:\n+                        # One of the elements is not in order2, which shouldn't happen\n+                        # since we're only looking at common elements\n+                        continue\n+            return False\n+        \n+        conflict = has_conflict(list_1, list_2)\n+        if conflict:\n+            warnings.warn(\n+                'Detected duplicate Media files in an opposite order:\\n'\n+                '%s\\n%s' % conflict,\n+                MediaOrderConflictWarning,\n+            )\n+        \n         # Start with a copy of list_1.\n         combined_list = list(list_1)\n         last_insert_index = len(list_1)\n@@ -138,12 +177,6 @@ class Media:\n                 # Add path to combined_list since it doesn't exist.\n                 combined_list.insert(last_insert_index, path)\n             else:\n-                if index > last_insert_index:\n-                    warnings.warn(\n-                        'Detected duplicate Media files in an opposite order:\\n'\n-                        '%s\\n%s' % (combined_list[last_insert_index], combined_list[index]),\n-                        MediaOrderConflictWarning,\n-                    )\n                 # path already exists in the list. Update last_insert_index so\n                 # that the following elements are inserted in front of this one.\n                 last_insert_index = index\ndiff --git a/reproduce_issue.py b/reproduce_issue.py\nnew file mode 100644\nindex 0000000000..e1cf9d753b\n--- /dev/null\n+++ b/reproduce_issue.py\n@@ -0,0 +1,91 @@\n+#!/usr/bin/env python3\n+\n+import warnings\n+import sys\n+import os\n+\n+# Add the testbed directory to the Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Set up Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        USE_TZ=True,\n+    )\n+\n+django.setup()\n+\n+from django import forms\n+\n+class ColorPicker(forms.Widget):\n+    class Media:\n+        js = ['color-picker.js']\n+\n+class SimpleTextWidget(forms.Widget):\n+    class Media:\n+        js = ['text-editor.js']\n+\n+class FancyTextWidget(forms.Widget):\n+    class Media:\n+        js = ['text-editor.js', 'text-editor-extras.js', 'color-picker.js']\n+\n+class MyForm(forms.Form):\n+    background_color = forms.CharField(widget=ColorPicker())\n+    intro = forms.CharField(widget=SimpleTextWidget())\n+    body = forms.CharField(widget=FancyTextWidget())\n+\n+print(\"Testing the media merging issue...\")\n+\n+# Capture warnings\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    \n+    # This should trigger the MediaOrderConflictWarning\n+    media = MyForm().media\n+    \n+    print(f\"Final media: {media}\")\n+    print(f\"Number of warnings: {len(w)}\")\n+    \n+    if w:\n+        for warning in w:\n+            print(f\"Warning: {warning.message}\")\n+            print(f\"Category: {warning.category}\")\n+    else:\n+        print(\"No warnings generated\")\n+\n+print(\"\\nLet's also test the individual merges:\")\n+\n+# Test individual merges to understand the problem\n+color_picker_media = ColorPicker().media\n+simple_text_media = SimpleTextWidget().media\n+fancy_text_media = FancyTextWidget().media\n+\n+print(f\"ColorPicker media: {color_picker_media}\")\n+print(f\"SimpleTextWidget media: {simple_text_media}\")\n+print(f\"FancyTextWidget media: {fancy_text_media}\")\n+\n+# Test step by step merging\n+with warnings.catch_warnings(record=True) as w:\n+    warnings.simplefilter(\"always\")\n+    \n+    step1 = color_picker_media + simple_text_media\n+    print(f\"Step 1 (ColorPicker + SimpleText): {step1}\")\n+    if w:\n+        print(f\"  Warnings in step 1: {len(w)}\")\n+        for warning in w:\n+            print(f\"    {warning.message}\")\n+    \n+    step2 = step1 + fancy_text_media\n+    print(f\"Step 2 (Step1 + FancyText): {step2}\")\n+    if len(w) > 0:\n+        print(f\"  Total warnings after step 2: {len(w)}\")\n+        for i, warning in enumerate(w):\n+            print(f\"    Warning {i+1}: {warning.message}\")\n\\ No newline at end of file\ndiff --git a/test_isolated.py b/test_isolated.py\nnew file mode 100644\nindex 0000000000..927b31007f\n--- /dev/null\n+++ b/test_isolated.py\n@@ -0,0 +1,63 @@\n+#!/usr/bin/env python3\n+\n+import warnings\n+import sys\n+import os\n+\n+# Add the testbed directory to the Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Set up Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        USE_TZ=True,\n+    )\n+\n+django.setup()\n+\n+from django.forms import Media\n+\n+def test_exact_django_case():\n+    \"\"\"Test the exact case from Django's test suite\"\"\"\n+    print(\"=== Testing exact Django test case ===\")\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        \n+        # Replicate the exact test case\n+        widget1 = Media(js=['custom_widget.js'])\n+        widget2 = Media(js=['jquery.js', 'uses_jquery.js'])\n+        form_media = widget1 + widget2\n+        \n+        print(f\"Step 1: widget1 + widget2 = {form_media._js}\")\n+        print(f\"Warnings after step 1: {len(w)}\")\n+        \n+        # The inline also uses custom_widget.js. This time, it's at the end.\n+        inline_media = Media(js=['jquery.js', 'also_jquery.js']) + Media(js=['custom_widget.js'])\n+        \n+        print(f\"inline_media = {inline_media._js}\")\n+        print(f\"Warnings after creating inline_media: {len(w)}\")\n+        \n+        merged = form_media + inline_media\n+        \n+        print(f\"Final merged = {merged._js}\")\n+        print(f\"Total warnings: {len(w)}\")\n+        \n+        expected = ['custom_widget.js', 'jquery.js', 'uses_jquery.js', 'also_jquery.js']\n+        print(f\"Expected: {expected}\")\n+        print(f\"Match: {merged._js == expected}\")\n+        \n+        if w:\n+            for i, warning in enumerate(w):\n+                print(f\"Warning {i+1}: {warning.message}\")\n+\n+if __name__ == \"__main__\":\n+    test_exact_django_case()\n\\ No newline at end of file\ndiff --git a/test_three_way.py b/test_three_way.py\nnew file mode 100644\nindex 0000000000..9d81767e0d\n--- /dev/null\n+++ b/test_three_way.py\n@@ -0,0 +1,60 @@\n+#!/usr/bin/env python3\n+\n+import warnings\n+import sys\n+import os\n+\n+# Add the testbed directory to the Python path\n+sys.path.insert(0, '/testbed')\n+\n+# Set up Django\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+import django\n+from django.conf import settings\n+\n+# Configure Django settings\n+if not settings.configured:\n+    settings.configure(\n+        DEBUG=True,\n+        SECRET_KEY='test-secret-key',\n+        USE_TZ=True,\n+    )\n+\n+django.setup()\n+\n+from django.forms import Media\n+\n+def test_three_way_merge():\n+    \"\"\"Test the three-way merge from Django's test suite\"\"\"\n+    print(\"=== Testing three-way merge from Django test suite ===\")\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        \n+        # custom_widget.js doesn't depend on jquery.js.\n+        widget1 = Media(js=['custom_widget.js'])\n+        widget2 = Media(js=['jquery.js', 'uses_jquery.js'])\n+        form_media = widget1 + widget2\n+        print(f\"widget1 + widget2 = {form_media._js}\")\n+        \n+        # The inline also uses custom_widget.js. This time, it's at the end.\n+        inline_media = Media(js=['jquery.js', 'also_jquery.js']) + Media(js=['custom_widget.js'])\n+        print(f\"inline_media = {inline_media._js}\")\n+        \n+        merged = form_media + inline_media\n+        print(f\"final merged = {merged._js}\")\n+        \n+        expected = ['custom_widget.js', 'jquery.js', 'uses_jquery.js', 'also_jquery.js']\n+        print(f\"expected = {expected}\")\n+        print(f\"matches expected: {merged._js == expected}\")\n+        \n+        if w:\n+            print(f\"Warnings: {len(w)}\")\n+            for warning in w:\n+                print(f\"  {warning.message}\")\n+        else:\n+            print(\"No warnings (correct)\")\n+\n+if __name__ == \"__main__\":\n+    test_three_way_merge()\n\\ No newline at end of file\n"}