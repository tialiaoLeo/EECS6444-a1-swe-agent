{
  "instance_id": "django__django-10914",
  "variant": "oracle",
  "split": "test",
  "meta": {
    "instance_id": "django__django-10914",
    "repo": "django/django",
    "base_commit": "e7fd69d051eaa67cb17f172a39b57253e9cb831a",
    "patch": "<patch>\ndiff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ def gettext_noop(s):\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n\n</patch>",
    "test_patch": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1099,7 +1099,7 @@ def test_override_file_upload_permissions(self):\n         the file_permissions_mode attribute of\n         django.core.files.storage.default_storage.\n         \"\"\"\n-        self.assertIsNone(default_storage.file_permissions_mode)\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
    "created_at": "2019-01-30T13:13:20Z",
    "version": "3.0",
    "FAIL_TO_PASS": "[\"test_override_file_upload_permissions (test_utils.tests.OverrideSettingsTests)\"]",
    "PASS_TO_PASS": "[\"test_allowed_database_chunked_cursor_queries (test_utils.tests.AllowedDatabaseQueriesTests)\", \"test_allowed_database_queries (test_utils.tests.AllowedDatabaseQueriesTests)\", \"test_skip_if_db_feature (test_utils.tests.SkippingTestCase)\", \"test_skip_unless_db_feature (test_utils.tests.SkippingTestCase)\", \"test_equal_parsing_errors (test_utils.tests.JSONEqualTests)\", \"test_not_equal_parsing_errors (test_utils.tests.JSONEqualTests)\", \"test_simple_equal (test_utils.tests.JSONEqualTests)\", \"test_simple_equal_raise (test_utils.tests.JSONEqualTests)\", \"test_simple_equal_unordered (test_utils.tests.JSONEqualTests)\", \"test_simple_not_equal (test_utils.tests.JSONEqualTests)\", \"test_simple_not_equal_raise (test_utils.tests.JSONEqualTests)\", \"test_assert_raises_message (test_utils.tests.AssertRaisesMsgTest)\", \"assertRaisesMessage shouldn't interpret RE special chars.\", \"test_failure_in_setUpTestData_should_rollback_transaction (test_utils.tests.TestBadSetUpTestData)\", \"test_all (test_utils.tests.DatabaseAliasTests)\", \"test_close_match (test_utils.tests.DatabaseAliasTests)\", \"test_match (test_utils.tests.DatabaseAliasTests)\", \"test_no_close_match (test_utils.tests.DatabaseAliasTests)\", \"test_missing_default_databases (test_utils.tests.SkippingClassTestCase)\", \"test_skip_class_unless_db_feature (test_utils.tests.SkippingClassTestCase)\", \"test_ordered (test_utils.tests.AssertQuerysetEqualTests)\", \"test_repeated_values (test_utils.tests.AssertQuerysetEqualTests)\", \"test_transform (test_utils.tests.AssertQuerysetEqualTests)\", \"test_undefined_order (test_utils.tests.AssertQuerysetEqualTests)\", \"test_unordered (test_utils.tests.AssertQuerysetEqualTests)\", \"test_disallowed_database_chunked_cursor_queries (test_utils.tests.DisallowedDatabaseQueriesTests)\", \"test_disallowed_database_connections (test_utils.tests.DisallowedDatabaseQueriesTests)\", \"test_disallowed_database_queries (test_utils.tests.DisallowedDatabaseQueriesTests)\", \"test_equal (test_utils.tests.AssertURLEqualTests)\", \"test_message (test_utils.tests.AssertURLEqualTests)\", \"test_msg_prefix (test_utils.tests.AssertURLEqualTests)\", \"test_not_equal (test_utils.tests.AssertURLEqualTests)\", \"test_allowed_hosts (test_utils.tests.SetupTestEnvironmentTests)\", \"test_setup_test_environment_calling_more_than_once (test_utils.tests.SetupTestEnvironmentTests)\", \"An exception is setUp() is reraised after disable() is called.\", \"test_callable (test_utils.tests.AssertWarnsMessageTests)\", \"test_context_manager (test_utils.tests.AssertWarnsMessageTests)\", \"test_context_manager_failure (test_utils.tests.AssertWarnsMessageTests)\", \"test_special_re_chars (test_utils.tests.AssertWarnsMessageTests)\", \"test_comment_root (test_utils.tests.XMLEqualTests)\", \"test_parsing_errors (test_utils.tests.XMLEqualTests)\", \"test_simple_equal (test_utils.tests.XMLEqualTests)\", \"test_simple_equal_raise (test_utils.tests.XMLEqualTests)\", \"test_simple_equal_raises_message (test_utils.tests.XMLEqualTests)\", \"test_simple_equal_unordered (test_utils.tests.XMLEqualTests)\", \"test_simple_equal_with_leading_or_trailing_whitespace (test_utils.tests.XMLEqualTests)\", \"test_simple_not_equal (test_utils.tests.XMLEqualTests)\", \"test_simple_not_equal_raise (test_utils.tests.XMLEqualTests)\", \"test_simple_not_equal_with_whitespace_in_the_middle (test_utils.tests.XMLEqualTests)\", \"test_attributes (test_utils.tests.HTMLEqualTests)\", \"test_complex_examples (test_utils.tests.HTMLEqualTests)\", \"test_contains_html (test_utils.tests.HTMLEqualTests)\", \"test_count (test_utils.tests.HTMLEqualTests)\", \"test_html_contain (test_utils.tests.HTMLEqualTests)\", \"test_html_parser (test_utils.tests.HTMLEqualTests)\", \"test_ignore_comments (test_utils.tests.HTMLEqualTests)\", \"test_parse_html_in_script (test_utils.tests.HTMLEqualTests)\", \"test_parsing_errors (test_utils.tests.HTMLEqualTests)\", \"test_self_closing_tags (test_utils.tests.HTMLEqualTests)\", \"test_simple_equal_html (test_utils.tests.HTMLEqualTests)\", \"test_unequal_html (test_utils.tests.HTMLEqualTests)\", \"test_unicode_handling (test_utils.tests.HTMLEqualTests)\", \"test_assert_field_output (test_utils.tests.AssertFieldOutputTests)\", \"test_custom_required_message (test_utils.tests.AssertFieldOutputTests)\", \"test_class_decoration (test_utils.tests.IsolatedAppsTests)\", \"test_context_manager (test_utils.tests.IsolatedAppsTests)\", \"test_installed_apps (test_utils.tests.IsolatedAppsTests)\", \"test_method_decoration (test_utils.tests.IsolatedAppsTests)\", \"test_nested (test_utils.tests.IsolatedAppsTests)\", \"test_ignores_connection_configuration_queries (test_utils.tests.AssertNumQueriesUponConnectionTests)\", \"test_override_database_routers (test_utils.tests.OverrideSettingsTests)\", \"test_override_file_upload_directory_permissions (test_utils.tests.OverrideSettingsTests)\", \"test_override_media_root (test_utils.tests.OverrideSettingsTests)\", \"test_override_media_url (test_utils.tests.OverrideSettingsTests)\", \"test_override_static_root (test_utils.tests.OverrideSettingsTests)\", \"test_override_static_url (test_utils.tests.OverrideSettingsTests)\", \"test_override_staticfiles_dirs (test_utils.tests.OverrideSettingsTests)\", \"test_override_staticfiles_finders (test_utils.tests.OverrideSettingsTests)\", \"test_override_staticfiles_storage (test_utils.tests.OverrideSettingsTests)\", \"test_urlconf_cache (test_utils.tests.OverrideSettingsTests)\", \"test_urlconf_first (test_utils.tests.OverrideSettingsTests)\", \"test_urlconf_second (test_utils.tests.OverrideSettingsTests)\", \"test_failure (test_utils.tests.AssertNumQueriesContextManagerTests)\", \"test_simple (test_utils.tests.AssertNumQueriesContextManagerTests)\", \"test_with_client (test_utils.tests.AssertNumQueriesContextManagerTests)\", \"test_assert_used_on_http_response (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_error_message (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_failure (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_nested_usage (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_not_used (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_usage (test_utils.tests.AssertTemplateUsedContextManagerTests)\", \"test_failure (test_utils.tests.CaptureQueriesContextManagerTests)\", \"test_nested (test_utils.tests.CaptureQueriesContextManagerTests)\", \"test_simple (test_utils.tests.CaptureQueriesContextManagerTests)\", \"test_with_client (test_utils.tests.CaptureQueriesContextManagerTests)\", \"test_within (test_utils.tests.CaptureQueriesContextManagerTests)\", \"test_assert_num_queries (test_utils.tests.AssertNumQueriesTests)\", \"test_assert_num_queries_with_client (test_utils.tests.AssertNumQueriesTests)\"]"
  },
  "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nSet default FILE_UPLOAD_PERMISSION to 0o644.\nDescription\n\t\nHello,\nAs far as I can see, the ​File Uploads documentation page does not mention any permission issues.\nWhat I would like to see is a warning that in absence of explicitly configured FILE_UPLOAD_PERMISSIONS, the permissions for a file uploaded to FileSystemStorage might not be consistent depending on whether a MemoryUploadedFile or a TemporaryUploadedFile was used for temporary storage of the uploaded data (which, with the default FILE_UPLOAD_HANDLERS, in turn depends on the uploaded data size).\nThe tempfile.NamedTemporaryFile + os.rename sequence causes the resulting file permissions to be 0o0600 on some systems (I experience it here on CentOS 7.4.1708 and Python 3.6.5). In all probability, the implementation of Python's built-in tempfile module explicitly sets such permissions for temporary files due to security considerations.\nI found mentions of this issue ​on GitHub, but did not manage to find any existing bug report in Django's bug tracker.\n\n</issue>\n<code>\n[start of README.rst]\n1 Django is a high-level Python Web framework that encourages rapid development\n2 and clean, pragmatic design. Thanks for checking it out.\n3 \n4 All documentation is in the \"``docs``\" directory and online at\n5 https://docs.djangoproject.com/en/stable/. If you're just getting started,\n6 here's how we recommend you read the docs:\n7 \n8 * First, read ``docs/intro/install.txt`` for instructions on installing Django.\n9 \n10 * Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n11   ``docs/intro/tutorial02.txt``, etc.).\n12 \n13 * If you want to set up an actual deployment server, read\n14   ``docs/howto/deployment/index.txt`` for instructions.\n15 \n16 * You'll probably want to read through the topical guides (in ``docs/topics``)\n17   next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n18   problems, and check out the reference (``docs/ref``) for gory details.\n19 \n20 * See ``docs/README`` for instructions on building an HTML version of the docs.\n21 \n22 Docs are updated rigorously. If you find any problems in the docs, or think\n23 they should be clarified in any way, please take 30 seconds to fill out a\n24 ticket here: https://code.djangoproject.com/newticket\n25 \n26 To get more help:\n27 \n28 * Join the ``#django`` channel on irc.freenode.net. Lots of helpful people hang\n29   out there. See https://en.wikipedia.org/wiki/Wikipedia:IRC/Tutorial if you're\n30   new to IRC.\n31 \n32 * Join the django-users mailing list, or read the archives, at\n33   https://groups.google.com/group/django-users.\n34 \n35 To contribute to Django:\n36 \n37 * Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n38   information about getting involved.\n39 \n40 To run Django's test suite:\n41 \n42 * Follow the instructions in the \"Unit tests\" section of\n43   ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n44   https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n45 \n[end of README.rst]\n[start of django/conf/global_settings.py]\n1 \"\"\"\n2 Default Django settings. Override these with settings in the module pointed to\n3 by the DJANGO_SETTINGS_MODULE environment variable.\n4 \"\"\"\n5 \n6 \n7 # This is defined here as a do-nothing function because we can't import\n8 # django.utils.translation -- that module depends on the settings.\n9 def gettext_noop(s):\n10     return s\n11 \n12 \n13 ####################\n14 # CORE             #\n15 ####################\n16 \n17 DEBUG = False\n18 \n19 # Whether the framework should propagate raw exceptions rather than catching\n20 # them. This is useful under some testing situations and should never be used\n21 # on a live site.\n22 DEBUG_PROPAGATE_EXCEPTIONS = False\n23 \n24 # People who get code error notifications.\n25 # In the format [('Full Name', 'email@example.com'), ('Full Name', 'anotheremail@example.com')]\n26 ADMINS = []\n27 \n28 # List of IP addresses, as strings, that:\n29 #   * See debug comments, when DEBUG is true\n30 #   * Receive x-headers\n31 INTERNAL_IPS = []\n32 \n33 # Hosts/domain names that are valid for this site.\n34 # \"*\" matches anything, \".example.com\" matches example.com and all subdomains\n35 ALLOWED_HOSTS = []\n36 \n37 # Local time zone for this installation. All choices can be found here:\n38 # https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\n39 # systems may support all possibilities). When USE_TZ is True, this is\n40 # interpreted as the default user time zone.\n41 TIME_ZONE = 'America/Chicago'\n42 \n43 # If you set this to True, Django will use timezone-aware datetimes.\n44 USE_TZ = False\n45 \n46 # Language code for this installation. All choices can be found here:\n47 # http://www.i18nguy.com/unicode/language-identifiers.html\n48 LANGUAGE_CODE = 'en-us'\n49 \n50 # Languages we provide translations for, out of the box.\n51 LANGUAGES = [\n52     ('af', gettext_noop('Afrikaans')),\n53     ('ar', gettext_noop('Arabic')),\n54     ('ast', gettext_noop('Asturian')),\n55     ('az', gettext_noop('Azerbaijani')),\n56     ('bg', gettext_noop('Bulgarian')),\n57     ('be', gettext_noop('Belarusian')),\n58     ('bn', gettext_noop('Bengali')),\n59     ('br', gettext_noop('Breton')),\n60     ('bs', gettext_noop('Bosnian')),\n61     ('ca', gettext_noop('Catalan')),\n62     ('cs', gettext_noop('Czech')),\n63     ('cy', gettext_noop('Welsh')),\n64     ('da', gettext_noop('Danish')),\n65     ('de', gettext_noop('German')),\n66     ('dsb', gettext_noop('Lower Sorbian')),\n67     ('el', gettext_noop('Greek')),\n68     ('en', gettext_noop('English')),\n69     ('en-au', gettext_noop('Australian English')),\n70     ('en-gb', gettext_noop('British English')),\n71     ('eo', gettext_noop('Esperanto')),\n72     ('es', gettext_noop('Spanish')),\n73     ('es-ar', gettext_noop('Argentinian Spanish')),\n74     ('es-co', gettext_noop('Colombian Spanish')),\n75     ('es-mx', gettext_noop('Mexican Spanish')),\n76     ('es-ni', gettext_noop('Nicaraguan Spanish')),\n77     ('es-ve', gettext_noop('Venezuelan Spanish')),\n78     ('et', gettext_noop('Estonian')),\n79     ('eu', gettext_noop('Basque')),\n80     ('fa', gettext_noop('Persian')),\n81     ('fi', gettext_noop('Finnish')),\n82     ('fr', gettext_noop('French')),\n83     ('fy', gettext_noop('Frisian')),\n84     ('ga', gettext_noop('Irish')),\n85     ('gd', gettext_noop('Scottish Gaelic')),\n86     ('gl', gettext_noop('Galician')),\n87     ('he', gettext_noop('Hebrew')),\n88     ('hi', gettext_noop('Hindi')),\n89     ('hr', gettext_noop('Croatian')),\n90     ('hsb', gettext_noop('Upper Sorbian')),\n91     ('hu', gettext_noop('Hungarian')),\n92     ('hy', gettext_noop('Armenian')),\n93     ('ia', gettext_noop('Interlingua')),\n94     ('id', gettext_noop('Indonesian')),\n95     ('io', gettext_noop('Ido')),\n96     ('is', gettext_noop('Icelandic')),\n97     ('it', gettext_noop('Italian')),\n98     ('ja', gettext_noop('Japanese')),\n99     ('ka', gettext_noop('Georgian')),\n100     ('kab', gettext_noop('Kabyle')),\n101     ('kk', gettext_noop('Kazakh')),\n102     ('km', gettext_noop('Khmer')),\n103     ('kn', gettext_noop('Kannada')),\n104     ('ko', gettext_noop('Korean')),\n105     ('lb', gettext_noop('Luxembourgish')),\n106     ('lt', gettext_noop('Lithuanian')),\n107     ('lv', gettext_noop('Latvian')),\n108     ('mk', gettext_noop('Macedonian')),\n109     ('ml', gettext_noop('Malayalam')),\n110     ('mn', gettext_noop('Mongolian')),\n111     ('mr', gettext_noop('Marathi')),\n112     ('my', gettext_noop('Burmese')),\n113     ('nb', gettext_noop('Norwegian Bokmål')),\n114     ('ne', gettext_noop('Nepali')),\n115     ('nl', gettext_noop('Dutch')),\n116     ('nn', gettext_noop('Norwegian Nynorsk')),\n117     ('os', gettext_noop('Ossetic')),\n118     ('pa', gettext_noop('Punjabi')),\n119     ('pl', gettext_noop('Polish')),\n120     ('pt', gettext_noop('Portuguese')),\n121     ('pt-br', gettext_noop('Brazilian Portuguese')),\n122     ('ro', gettext_noop('Romanian')),\n123     ('ru', gettext_noop('Russian')),\n124     ('sk', gettext_noop('Slovak')),\n125     ('sl', gettext_noop('Slovenian')),\n126     ('sq', gettext_noop('Albanian')),\n127     ('sr', gettext_noop('Serbian')),\n128     ('sr-latn', gettext_noop('Serbian Latin')),\n129     ('sv', gettext_noop('Swedish')),\n130     ('sw', gettext_noop('Swahili')),\n131     ('ta', gettext_noop('Tamil')),\n132     ('te', gettext_noop('Telugu')),\n133     ('th', gettext_noop('Thai')),\n134     ('tr', gettext_noop('Turkish')),\n135     ('tt', gettext_noop('Tatar')),\n136     ('udm', gettext_noop('Udmurt')),\n137     ('uk', gettext_noop('Ukrainian')),\n138     ('ur', gettext_noop('Urdu')),\n139     ('vi', gettext_noop('Vietnamese')),\n140     ('zh-hans', gettext_noop('Simplified Chinese')),\n141     ('zh-hant', gettext_noop('Traditional Chinese')),\n142 ]\n143 \n144 # Languages using BiDi (right-to-left) layout\n145 LANGUAGES_BIDI = [\"he\", \"ar\", \"fa\", \"ur\"]\n146 \n147 # If you set this to False, Django will make some optimizations so as not\n148 # to load the internationalization machinery.\n149 USE_I18N = True\n150 LOCALE_PATHS = []\n151 \n152 # Settings for language cookie\n153 LANGUAGE_COOKIE_NAME = 'django_language'\n154 LANGUAGE_COOKIE_AGE = None\n155 LANGUAGE_COOKIE_DOMAIN = None\n156 LANGUAGE_COOKIE_PATH = '/'\n157 \n158 \n159 # If you set this to True, Django will format dates, numbers and calendars\n160 # according to user current locale.\n161 USE_L10N = False\n162 \n163 # Not-necessarily-technical managers of the site. They get broken link\n164 # notifications and other various emails.\n165 MANAGERS = ADMINS\n166 \n167 # Default charset to use for all HttpResponse objects, if a MIME type isn't\n168 # manually specified. It's used to construct the Content-Type header.\n169 DEFAULT_CHARSET = 'utf-8'\n170 \n171 # Encoding of files read from disk (template and initial SQL files).\n172 FILE_CHARSET = 'utf-8'\n173 \n174 # Email address that error messages come from.\n175 SERVER_EMAIL = 'root@localhost'\n176 \n177 # Database connection info. If left empty, will default to the dummy backend.\n178 DATABASES = {}\n179 \n180 # Classes used to implement DB routing behavior.\n181 DATABASE_ROUTERS = []\n182 \n183 # The email backend to use. For possible shortcuts see django.core.mail.\n184 # The default is to use the SMTP backend.\n185 # Third-party backends can be specified by providing a Python path\n186 # to a module that defines an EmailBackend class.\n187 EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\n188 \n189 # Host for sending email.\n190 EMAIL_HOST = 'localhost'\n191 \n192 # Port for sending email.\n193 EMAIL_PORT = 25\n194 \n195 # Whether to send SMTP 'Date' header in the local time zone or in UTC.\n196 EMAIL_USE_LOCALTIME = False\n197 \n198 # Optional SMTP authentication information for EMAIL_HOST.\n199 EMAIL_HOST_USER = ''\n200 EMAIL_HOST_PASSWORD = ''\n201 EMAIL_USE_TLS = False\n202 EMAIL_USE_SSL = False\n203 EMAIL_SSL_CERTFILE = None\n204 EMAIL_SSL_KEYFILE = None\n205 EMAIL_TIMEOUT = None\n206 \n207 # List of strings representing installed apps.\n208 INSTALLED_APPS = []\n209 \n210 TEMPLATES = []\n211 \n212 # Default form rendering class.\n213 FORM_RENDERER = 'django.forms.renderers.DjangoTemplates'\n214 \n215 # Default email address to use for various automated correspondence from\n216 # the site managers.\n217 DEFAULT_FROM_EMAIL = 'webmaster@localhost'\n218 \n219 # Subject-line prefix for email messages send with django.core.mail.mail_admins\n220 # or ...mail_managers.  Make sure to include the trailing space.\n221 EMAIL_SUBJECT_PREFIX = '[Django] '\n222 \n223 # Whether to append trailing slashes to URLs.\n224 APPEND_SLASH = True\n225 \n226 # Whether to prepend the \"www.\" subdomain to URLs that don't have it.\n227 PREPEND_WWW = False\n228 \n229 # Override the server-derived value of SCRIPT_NAME\n230 FORCE_SCRIPT_NAME = None\n231 \n232 # List of compiled regular expression objects representing User-Agent strings\n233 # that are not allowed to visit any page, systemwide. Use this for bad\n234 # robots/crawlers. Here are a few examples:\n235 #     import re\n236 #     DISALLOWED_USER_AGENTS = [\n237 #         re.compile(r'^NaverBot.*'),\n238 #         re.compile(r'^EmailSiphon.*'),\n239 #         re.compile(r'^SiteSucker.*'),\n240 #         re.compile(r'^sohu-search'),\n241 #     ]\n242 DISALLOWED_USER_AGENTS = []\n243 \n244 ABSOLUTE_URL_OVERRIDES = {}\n245 \n246 # List of compiled regular expression objects representing URLs that need not\n247 # be reported by BrokenLinkEmailsMiddleware. Here are a few examples:\n248 #    import re\n249 #    IGNORABLE_404_URLS = [\n250 #        re.compile(r'^/apple-touch-icon.*\\.png$'),\n251 #        re.compile(r'^/favicon.ico$'),\n252 #        re.compile(r'^/robots.txt$'),\n253 #        re.compile(r'^/phpmyadmin/'),\n254 #        re.compile(r'\\.(cgi|php|pl)$'),\n255 #    ]\n256 IGNORABLE_404_URLS = []\n257 \n258 # A secret key for this particular Django installation. Used in secret-key\n259 # hashing algorithms. Set this in your settings, or Django will complain\n260 # loudly.\n261 SECRET_KEY = ''\n262 \n263 # Default file storage mechanism that holds media.\n264 DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\n265 \n266 # Absolute filesystem path to the directory that will hold user-uploaded files.\n267 # Example: \"/var/www/example.com/media/\"\n268 MEDIA_ROOT = ''\n269 \n270 # URL that handles the media served from MEDIA_ROOT.\n271 # Examples: \"http://example.com/media/\", \"http://media.example.com/\"\n272 MEDIA_URL = ''\n273 \n274 # Absolute path to the directory static files should be collected to.\n275 # Example: \"/var/www/example.com/static/\"\n276 STATIC_ROOT = None\n277 \n278 # URL that handles the static files served from STATIC_ROOT.\n279 # Example: \"http://example.com/static/\", \"http://static.example.com/\"\n280 STATIC_URL = None\n281 \n282 # List of upload handler classes to be applied in order.\n283 FILE_UPLOAD_HANDLERS = [\n284     'django.core.files.uploadhandler.MemoryFileUploadHandler',\n285     'django.core.files.uploadhandler.TemporaryFileUploadHandler',\n286 ]\n287 \n288 # Maximum size, in bytes, of a request before it will be streamed to the\n289 # file system instead of into memory.\n290 FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n291 \n292 # Maximum size in bytes of request data (excluding file uploads) that will be\n293 # read before a SuspiciousOperation (RequestDataTooBig) is raised.\n294 DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n295 \n296 # Maximum number of GET/POST parameters that will be read before a\n297 # SuspiciousOperation (TooManyFieldsSent) is raised.\n298 DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n299 \n300 # Directory in which upload streamed files will be temporarily saved. A value of\n301 # `None` will make Django use the operating system's default temporary directory\n302 # (i.e. \"/tmp\" on *nix systems).\n303 FILE_UPLOAD_TEMP_DIR = None\n304 \n305 # The numeric mode to set newly-uploaded files to. The value should be a mode\n306 # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n307 FILE_UPLOAD_PERMISSIONS = None\n308 \n309 # The numeric mode to assign to newly-created directories, when uploading files.\n310 # The value should be a mode as you'd pass to os.chmod;\n311 # see https://docs.python.org/library/os.html#files-and-directories.\n312 FILE_UPLOAD_DIRECTORY_PERMISSIONS = None\n313 \n314 # Python module path where user will place custom format definition.\n315 # The directory where this setting is pointing should contain subdirectories\n316 # named as the locales, containing a formats.py file\n317 # (i.e. \"myproject.locale\" for myproject/locale/en/formats.py etc. use)\n318 FORMAT_MODULE_PATH = None\n319 \n320 # Default formatting for date objects. See all available format strings here:\n321 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n322 DATE_FORMAT = 'N j, Y'\n323 \n324 # Default formatting for datetime objects. See all available format strings here:\n325 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n326 DATETIME_FORMAT = 'N j, Y, P'\n327 \n328 # Default formatting for time objects. See all available format strings here:\n329 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n330 TIME_FORMAT = 'P'\n331 \n332 # Default formatting for date objects when only the year and month are relevant.\n333 # See all available format strings here:\n334 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n335 YEAR_MONTH_FORMAT = 'F Y'\n336 \n337 # Default formatting for date objects when only the month and day are relevant.\n338 # See all available format strings here:\n339 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n340 MONTH_DAY_FORMAT = 'F j'\n341 \n342 # Default short formatting for date objects. See all available format strings here:\n343 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n344 SHORT_DATE_FORMAT = 'm/d/Y'\n345 \n346 # Default short formatting for datetime objects.\n347 # See all available format strings here:\n348 # https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n349 SHORT_DATETIME_FORMAT = 'm/d/Y P'\n350 \n351 # Default formats to be used when parsing dates from input boxes, in order\n352 # See all available format string here:\n353 # https://docs.python.org/library/datetime.html#strftime-behavior\n354 # * Note that these format strings are different from the ones to display dates\n355 DATE_INPUT_FORMATS = [\n356     '%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y',  # '2006-10-25', '10/25/2006', '10/25/06'\n357     '%b %d %Y', '%b %d, %Y',             # 'Oct 25 2006', 'Oct 25, 2006'\n358     '%d %b %Y', '%d %b, %Y',             # '25 Oct 2006', '25 Oct, 2006'\n359     '%B %d %Y', '%B %d, %Y',             # 'October 25 2006', 'October 25, 2006'\n360     '%d %B %Y', '%d %B, %Y',             # '25 October 2006', '25 October, 2006'\n361 ]\n362 \n363 # Default formats to be used when parsing times from input boxes, in order\n364 # See all available format string here:\n365 # https://docs.python.org/library/datetime.html#strftime-behavior\n366 # * Note that these format strings are different from the ones to display dates\n367 TIME_INPUT_FORMATS = [\n368     '%H:%M:%S',     # '14:30:59'\n369     '%H:%M:%S.%f',  # '14:30:59.000200'\n370     '%H:%M',        # '14:30'\n371 ]\n372 \n373 # Default formats to be used when parsing dates and times from input boxes,\n374 # in order\n375 # See all available format string here:\n376 # https://docs.python.org/library/datetime.html#strftime-behavior\n377 # * Note that these format strings are different from the ones to display dates\n378 DATETIME_INPUT_FORMATS = [\n379     '%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'\n380     '%Y-%m-%d %H:%M:%S.%f',  # '2006-10-25 14:30:59.000200'\n381     '%Y-%m-%d %H:%M',        # '2006-10-25 14:30'\n382     '%Y-%m-%d',              # '2006-10-25'\n383     '%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'\n384     '%m/%d/%Y %H:%M:%S.%f',  # '10/25/2006 14:30:59.000200'\n385     '%m/%d/%Y %H:%M',        # '10/25/2006 14:30'\n386     '%m/%d/%Y',              # '10/25/2006'\n387     '%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'\n388     '%m/%d/%y %H:%M:%S.%f',  # '10/25/06 14:30:59.000200'\n389     '%m/%d/%y %H:%M',        # '10/25/06 14:30'\n390     '%m/%d/%y',              # '10/25/06'\n391 ]\n392 \n393 # First day of week, to be used on calendars\n394 # 0 means Sunday, 1 means Monday...\n395 FIRST_DAY_OF_WEEK = 0\n396 \n397 # Decimal separator symbol\n398 DECIMAL_SEPARATOR = '.'\n399 \n400 # Boolean that sets whether to add thousand separator when formatting numbers\n401 USE_THOUSAND_SEPARATOR = False\n402 \n403 # Number of digits that will be together, when splitting them by\n404 # THOUSAND_SEPARATOR. 0 means no grouping, 3 means splitting by thousands...\n405 NUMBER_GROUPING = 0\n406 \n407 # Thousand separator symbol\n408 THOUSAND_SEPARATOR = ','\n409 \n410 # The tablespaces to use for each model when not specified otherwise.\n411 DEFAULT_TABLESPACE = ''\n412 DEFAULT_INDEX_TABLESPACE = ''\n413 \n414 # Default X-Frame-Options header value\n415 X_FRAME_OPTIONS = 'SAMEORIGIN'\n416 \n417 USE_X_FORWARDED_HOST = False\n418 USE_X_FORWARDED_PORT = False\n419 \n420 # The Python dotted path to the WSGI application that Django's internal server\n421 # (runserver) will use. If `None`, the return value of\n422 # 'django.core.wsgi.get_wsgi_application' is used, thus preserving the same\n423 # behavior as previous versions of Django. Otherwise this should point to an\n424 # actual WSGI application object.\n425 WSGI_APPLICATION = None\n426 \n427 # If your Django app is behind a proxy that sets a header to specify secure\n428 # connections, AND that proxy ensures that user-submitted headers with the\n429 # same name are ignored (so that people can't spoof it), set this value to\n430 # a tuple of (header_name, header_value). For any requests that come in with\n431 # that header/value, request.is_secure() will return True.\n432 # WARNING! Only set this if you fully understand what you're doing. Otherwise,\n433 # you may be opening yourself up to a security risk.\n434 SECURE_PROXY_SSL_HEADER = None\n435 \n436 ##############\n437 # MIDDLEWARE #\n438 ##############\n439 \n440 # List of middleware to use. Order is important; in the request phase, these\n441 # middleware will be applied in the order given, and in the response\n442 # phase the middleware will be applied in reverse order.\n443 MIDDLEWARE = []\n444 \n445 ############\n446 # SESSIONS #\n447 ############\n448 \n449 # Cache to store session data if using the cache session backend.\n450 SESSION_CACHE_ALIAS = 'default'\n451 # Cookie name. This can be whatever you want.\n452 SESSION_COOKIE_NAME = 'sessionid'\n453 # Age of cookie, in seconds (default: 2 weeks).\n454 SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2\n455 # A string like \"example.com\", or None for standard domain cookie.\n456 SESSION_COOKIE_DOMAIN = None\n457 # Whether the session cookie should be secure (https:// only).\n458 SESSION_COOKIE_SECURE = False\n459 # The path of the session cookie.\n460 SESSION_COOKIE_PATH = '/'\n461 # Whether to use the non-RFC standard httpOnly flag (IE, FF3+, others)\n462 SESSION_COOKIE_HTTPONLY = True\n463 # Whether to set the flag restricting cookie leaks on cross-site requests.\n464 # This can be 'Lax', 'Strict', or None to disable the flag.\n465 SESSION_COOKIE_SAMESITE = 'Lax'\n466 # Whether to save the session data on every request.\n467 SESSION_SAVE_EVERY_REQUEST = False\n468 # Whether a user's session cookie expires when the Web browser is closed.\n469 SESSION_EXPIRE_AT_BROWSER_CLOSE = False\n470 # The module to store session data\n471 SESSION_ENGINE = 'django.contrib.sessions.backends.db'\n472 # Directory to store session files if using the file session module. If None,\n473 # the backend will use a sensible default.\n474 SESSION_FILE_PATH = None\n475 # class to serialize session data\n476 SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'\n477 \n478 #########\n479 # CACHE #\n480 #########\n481 \n482 # The cache backends to use.\n483 CACHES = {\n484     'default': {\n485         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\n486     }\n487 }\n488 CACHE_MIDDLEWARE_KEY_PREFIX = ''\n489 CACHE_MIDDLEWARE_SECONDS = 600\n490 CACHE_MIDDLEWARE_ALIAS = 'default'\n491 \n492 ##################\n493 # AUTHENTICATION #\n494 ##################\n495 \n496 AUTH_USER_MODEL = 'auth.User'\n497 \n498 AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']\n499 \n500 LOGIN_URL = '/accounts/login/'\n501 \n502 LOGIN_REDIRECT_URL = '/accounts/profile/'\n503 \n504 LOGOUT_REDIRECT_URL = None\n505 \n506 # The number of days a password reset link is valid for\n507 PASSWORD_RESET_TIMEOUT_DAYS = 3\n508 \n509 # the first hasher in this list is the preferred algorithm.  any\n510 # password using different algorithms will be converted automatically\n511 # upon login\n512 PASSWORD_HASHERS = [\n513     'django.contrib.auth.hashers.PBKDF2PasswordHasher',\n514     'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',\n515     'django.contrib.auth.hashers.Argon2PasswordHasher',\n516     'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',\n517 ]\n518 \n519 AUTH_PASSWORD_VALIDATORS = []\n520 \n521 ###########\n522 # SIGNING #\n523 ###########\n524 \n525 SIGNING_BACKEND = 'django.core.signing.TimestampSigner'\n526 \n527 ########\n528 # CSRF #\n529 ########\n530 \n531 # Dotted path to callable to be used as view when a request is\n532 # rejected by the CSRF middleware.\n533 CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'\n534 \n535 # Settings for CSRF cookie.\n536 CSRF_COOKIE_NAME = 'csrftoken'\n537 CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52\n538 CSRF_COOKIE_DOMAIN = None\n539 CSRF_COOKIE_PATH = '/'\n540 CSRF_COOKIE_SECURE = False\n541 CSRF_COOKIE_HTTPONLY = False\n542 CSRF_COOKIE_SAMESITE = 'Lax'\n543 CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'\n544 CSRF_TRUSTED_ORIGINS = []\n545 CSRF_USE_SESSIONS = False\n546 \n547 ############\n548 # MESSAGES #\n549 ############\n550 \n551 # Class to use as messages backend\n552 MESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage'\n553 \n554 # Default values of MESSAGE_LEVEL and MESSAGE_TAGS are defined within\n555 # django.contrib.messages to avoid imports in this settings file.\n556 \n557 ###########\n558 # LOGGING #\n559 ###########\n560 \n561 # The callable to use to configure logging\n562 LOGGING_CONFIG = 'logging.config.dictConfig'\n563 \n564 # Custom logging configuration.\n565 LOGGING = {}\n566 \n567 # Default exception reporter filter class used in case none has been\n568 # specifically assigned to the HttpRequest instance.\n569 DEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'\n570 \n571 ###########\n572 # TESTING #\n573 ###########\n574 \n575 # The name of the class to use to run the test suite\n576 TEST_RUNNER = 'django.test.runner.DiscoverRunner'\n577 \n578 # Apps that don't need to be serialized at test database creation time\n579 # (only apps with migrations are to start with)\n580 TEST_NON_SERIALIZED_APPS = []\n581 \n582 ############\n583 # FIXTURES #\n584 ############\n585 \n586 # The list of directories to search for fixtures\n587 FIXTURE_DIRS = []\n588 \n589 ###############\n590 # STATICFILES #\n591 ###############\n592 \n593 # A list of locations of additional static files\n594 STATICFILES_DIRS = []\n595 \n596 # The default file storage backend used during the build process\n597 STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'\n598 \n599 # List of finder classes that know how to find static files in\n600 # various locations.\n601 STATICFILES_FINDERS = [\n602     'django.contrib.staticfiles.finders.FileSystemFinder',\n603     'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n604     # 'django.contrib.staticfiles.finders.DefaultStorageFinder',\n605 ]\n606 \n607 ##############\n608 # MIGRATIONS #\n609 ##############\n610 \n611 # Migration module overrides for apps, by app label.\n612 MIGRATION_MODULES = {}\n613 \n614 #################\n615 # SYSTEM CHECKS #\n616 #################\n617 \n618 # List of all issues generated by system checks that should be silenced. Light\n619 # issues like warnings, infos or debugs will not generate a message. Silencing\n620 # serious issues like errors and criticals does not result in hiding the\n621 # message, but Django will not stop you from e.g. running server.\n622 SILENCED_SYSTEM_CHECKS = []\n623 \n624 #######################\n625 # SECURITY MIDDLEWARE #\n626 #######################\n627 SECURE_BROWSER_XSS_FILTER = False\n628 SECURE_CONTENT_TYPE_NOSNIFF = False\n629 SECURE_HSTS_INCLUDE_SUBDOMAINS = False\n630 SECURE_HSTS_PRELOAD = False\n631 SECURE_HSTS_SECONDS = 0\n632 SECURE_REDIRECT_EXEMPT = []\n633 SECURE_SSL_HOST = None\n634 SECURE_SSL_REDIRECT = False\n635 \n[end of django/conf/global_settings.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n"
}