{
  "instance_id": "astropy__astropy-7746",
  "variant": "oracle",
  "split": "test",
  "meta": {
    "instance_id": "astropy__astropy-7746",
    "repo": "astropy/astropy",
    "base_commit": "d5bd3f68bb6d5ce3a61bdce9883ee750d1afade5",
    "patch": "<patch>\ndiff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1212,6 +1212,9 @@ def _array_converter(self, func, sky, *args, ra_dec_order=False):\n         \"\"\"\n \n         def _return_list_of_arrays(axes, origin):\n+            if any([x.size == 0 for x in axes]):\n+                return axes\n+\n             try:\n                 axes = np.broadcast_arrays(*axes)\n             except ValueError:\n@@ -1235,6 +1238,8 @@ def _return_single_array(xy, origin):\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n                     \"of shape (N, {0})\".format(self.naxis))\n+            if 0 in xy.shape:\n+                return xy\n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n             result = func(xy, origin)\n\n</patch>",
    "test_patch": "diff --git a/astropy/wcs/tests/test_wcs.py b/astropy/wcs/tests/test_wcs.py\n--- a/astropy/wcs/tests/test_wcs.py\n+++ b/astropy/wcs/tests/test_wcs.py\n@@ -1093,3 +1093,21 @@ def test_keyedsip():\n     assert isinstance( w.sip, wcs.Sip )\n     assert w.sip.crpix[0] == 2048\n     assert w.sip.crpix[1] == 1026\n+\n+\n+def test_zero_size_input():\n+    with fits.open(get_pkg_data_filename('data/sip.fits')) as f:\n+        w = wcs.WCS(f[0].header)\n+\n+    inp = np.zeros((0, 2))\n+    assert_array_equal(inp, w.all_pix2world(inp, 0))\n+    assert_array_equal(inp, w.all_world2pix(inp, 0))\n+\n+    inp = [], [1]\n+    result = w.all_pix2world([], [1], 0)\n+    assert_array_equal(inp[0], result[0])\n+    assert_array_equal(inp[1], result[1])\n+\n+    result = w.all_world2pix([], [1], 0)\n+    assert_array_equal(inp[0], result[0])\n+    assert_array_equal(inp[1], result[1])\n",
    "created_at": "2018-08-20T14:07:20Z",
    "version": "1.3",
    "FAIL_TO_PASS": "[\"astropy/wcs/tests/test_wcs.py::test_zero_size_input\"]",
    "PASS_TO_PASS": "[\"astropy/wcs/tests/test_wcs.py::TestMaps::test_consistency\", \"astropy/wcs/tests/test_wcs.py::TestMaps::test_maps\", \"astropy/wcs/tests/test_wcs.py::TestSpectra::test_consistency\", \"astropy/wcs/tests/test_wcs.py::TestSpectra::test_spectra\", \"astropy/wcs/tests/test_wcs.py::test_fixes\", \"astropy/wcs/tests/test_wcs.py::test_outside_sky\", \"astropy/wcs/tests/test_wcs.py::test_pix2world\", \"astropy/wcs/tests/test_wcs.py::test_load_fits_path\", \"astropy/wcs/tests/test_wcs.py::test_dict_init\", \"astropy/wcs/tests/test_wcs.py::test_extra_kwarg\", \"astropy/wcs/tests/test_wcs.py::test_3d_shapes\", \"astropy/wcs/tests/test_wcs.py::test_preserve_shape\", \"astropy/wcs/tests/test_wcs.py::test_broadcasting\", \"astropy/wcs/tests/test_wcs.py::test_shape_mismatch\", \"astropy/wcs/tests/test_wcs.py::test_invalid_shape\", \"astropy/wcs/tests/test_wcs.py::test_warning_about_defunct_keywords\", \"astropy/wcs/tests/test_wcs.py::test_warning_about_defunct_keywords_exception\", \"astropy/wcs/tests/test_wcs.py::test_to_header_string\", \"astropy/wcs/tests/test_wcs.py::test_to_fits\", \"astropy/wcs/tests/test_wcs.py::test_to_header_warning\", \"astropy/wcs/tests/test_wcs.py::test_no_comments_in_header\", \"astropy/wcs/tests/test_wcs.py::test_find_all_wcs_crash\", \"astropy/wcs/tests/test_wcs.py::test_validate\", \"astropy/wcs/tests/test_wcs.py::test_validate_with_2_wcses\", \"astropy/wcs/tests/test_wcs.py::test_crpix_maps_to_crval\", \"astropy/wcs/tests/test_wcs.py::test_all_world2pix\", \"astropy/wcs/tests/test_wcs.py::test_scamp_sip_distortion_parameters\", \"astropy/wcs/tests/test_wcs.py::test_fixes2\", \"astropy/wcs/tests/test_wcs.py::test_unit_normalization\", \"astropy/wcs/tests/test_wcs.py::test_footprint_to_file\", \"astropy/wcs/tests/test_wcs.py::test_validate_faulty_wcs\", \"astropy/wcs/tests/test_wcs.py::test_error_message\", \"astropy/wcs/tests/test_wcs.py::test_out_of_bounds\", \"astropy/wcs/tests/test_wcs.py::test_calc_footprint_1\", \"astropy/wcs/tests/test_wcs.py::test_calc_footprint_2\", \"astropy/wcs/tests/test_wcs.py::test_calc_footprint_3\", \"astropy/wcs/tests/test_wcs.py::test_sip\", \"astropy/wcs/tests/test_wcs.py::test_printwcs\", \"astropy/wcs/tests/test_wcs.py::test_invalid_spherical\", \"astropy/wcs/tests/test_wcs.py::test_no_iteration\", \"astropy/wcs/tests/test_wcs.py::test_sip_tpv_agreement\", \"astropy/wcs/tests/test_wcs.py::test_tpv_copy\", \"astropy/wcs/tests/test_wcs.py::test_hst_wcs\", \"astropy/wcs/tests/test_wcs.py::test_list_naxis\", \"astropy/wcs/tests/test_wcs.py::test_sip_broken\", \"astropy/wcs/tests/test_wcs.py::test_no_truncate_crval\", \"astropy/wcs/tests/test_wcs.py::test_no_truncate_crval_try2\", \"astropy/wcs/tests/test_wcs.py::test_no_truncate_crval_p17\", \"astropy/wcs/tests/test_wcs.py::test_no_truncate_using_compare\", \"astropy/wcs/tests/test_wcs.py::test_passing_ImageHDU\", \"astropy/wcs/tests/test_wcs.py::test_inconsistent_sip\", \"astropy/wcs/tests/test_wcs.py::test_bounds_check\", \"astropy/wcs/tests/test_wcs.py::test_naxis\", \"astropy/wcs/tests/test_wcs.py::test_sip_with_altkey\", \"astropy/wcs/tests/test_wcs.py::test_to_fits_1\", \"astropy/wcs/tests/test_wcs.py::test_keyedsip\"]"
  },
  "text": "You will be provided with a partial code base and an issue statement explaining a problem to resolve.\n<issue>\nIssue when passing empty lists/arrays to WCS transformations\nThe following should not fail but instead should return empty lists/arrays:\r\n\r\n```\r\nIn [1]: from astropy.wcs import WCS\r\n\r\nIn [2]: wcs = WCS('2MASS_h.fits')\r\n\r\nIn [3]: wcs.wcs_pix2world([], [], 0)\r\n---------------------------------------------------------------------------\r\nInconsistentAxisTypesError                Traceback (most recent call last)\r\n<ipython-input-3-e2cc0e97941a> in <module>()\r\n----> 1 wcs.wcs_pix2world([], [], 0)\r\n\r\n~/Dropbox/Code/Astropy/astropy/astropy/wcs/wcs.py in wcs_pix2world(self, *args, **kwargs)\r\n   1352         return self._array_converter(\r\n   1353             lambda xy, o: self.wcs.p2s(xy, o)['world'],\r\n-> 1354             'output', *args, **kwargs)\r\n   1355     wcs_pix2world.__doc__ = \"\"\"\r\n   1356         Transforms pixel coordinates to world coordinates by doing\r\n\r\n~/Dropbox/Code/Astropy/astropy/astropy/wcs/wcs.py in _array_converter(self, func, sky, ra_dec_order, *args)\r\n   1267                     \"a 1-D array for each axis, followed by an origin.\")\r\n   1268 \r\n-> 1269             return _return_list_of_arrays(axes, origin)\r\n   1270 \r\n   1271         raise TypeError(\r\n\r\n~/Dropbox/Code/Astropy/astropy/astropy/wcs/wcs.py in _return_list_of_arrays(axes, origin)\r\n   1223             if ra_dec_order and sky == 'input':\r\n   1224                 xy = self._denormalize_sky(xy)\r\n-> 1225             output = func(xy, origin)\r\n   1226             if ra_dec_order and sky == 'output':\r\n   1227                 output = self._normalize_sky(output)\r\n\r\n~/Dropbox/Code/Astropy/astropy/astropy/wcs/wcs.py in <lambda>(xy, o)\r\n   1351             raise ValueError(\"No basic WCS settings were created.\")\r\n   1352         return self._array_converter(\r\n-> 1353             lambda xy, o: self.wcs.p2s(xy, o)['world'],\r\n   1354             'output', *args, **kwargs)\r\n   1355     wcs_pix2world.__doc__ = \"\"\"\r\n\r\nInconsistentAxisTypesError: ERROR 4 in wcsp2s() at line 2646 of file cextern/wcslib/C/wcs.c:\r\nncoord and/or nelem inconsistent with the wcsprm.\r\n```\n\n</issue>\n<code>\n[start of README.rst]\n1 =======\n2 Astropy\n3 =======\n4 \n5 .. image:: https://img.shields.io/pypi/v/astropy.svg\n6     :target: https://pypi.python.org/pypi/astropy\n7 \n8 Astropy (http://www.astropy.org) is a package intended to contain much of\n9 the core functionality and some common tools needed for performing\n10 astronomy and astrophysics with Python.\n11 \n12 Releases are `registered on PyPI <http://pypi.python.org/pypi/astropy>`_,\n13 and development is occurring at the\n14 `project's github page <http://github.com/astropy/astropy>`_.\n15 \n16 For installation instructions, see the `online documentation <http://docs.astropy.org/>`_\n17 or  ``docs/install.rst`` in this source distribution.\n18 \n19 For system packagers: Please install Astropy with the command::\n20 \n21     $ python setup.py --offline install\n22 \n23 This will prevent the astropy_helpers bootstrap script from attempting to\n24 reach out to PyPI.\n25 \n26 Project Status\n27 --------------\n28 \n29 .. image:: https://travis-ci.org/astropy/astropy.svg\n30     :target: https://travis-ci.org/astropy/astropy\n31     :alt: Astropy's Travis CI Status\n32 \n33 .. image:: https://coveralls.io/repos/astropy/astropy/badge.svg\n34     :target: https://coveralls.io/r/astropy/astropy\n35     :alt: Astropy's Coveralls Status\n36 \n37 .. image:: https://ci.appveyor.com/api/projects/status/ym7lxajcs5qwm31e/branch/master?svg=true\n38     :target: https://ci.appveyor.com/project/Astropy/astropy/branch/master\n39     :alt: Astropy's Appveyor Status\n40 \n41 For an overview of the testing and build status of all packages associated\n42 with the Astropy Project, see http://dashboard.astropy.org.\n43 \n44 .. image:: https://img.shields.io/badge/powered%20by-NumFOCUS-orange.svg?style=flat&colorA=E1523D&colorB=007D8A\n45     :target: http://numfocus.org\n46     :alt: Powered by NumFOCUS\n47 \n48 \n49 Contributing Code, Documentation, or Feedback\n50 ---------------------------------------------\n51 The Astropy project is made both by and for its users, so we welcome and encourage\n52 contributions of many kinds. Our goal is to keep this a positive, inclusive,\n53 successful, and growing community, by abiding with the\n54 `Astropy Community Code of Conduct <http://www.astropy.org/about.html#codeofconduct>`_.\n55 \n56 More detailed information on contributing to the project or submitting feedback\n57 can be found on the `contributions <http://www.astropy.org/contribute.html>`_ page.\n58 \n59 A `summary of contribution guidelines <CONTRIBUTING.md>`_ can also be used as a quick\n60 reference when you're ready to start writing or validating code for submission.\n61 \n62 License\n63 -------\n64 Astropy is licensed under a 3-clause BSD style license - see the\n65 ``LICENSE.rst`` file.\n66 \n[end of README.rst]\n[start of astropy/wcs/wcs.py]\n1 # Licensed under a 3-clause BSD style license - see LICENSE.rst\n2 \"\"\"\n3 Under the hood, there are 3 separate classes that perform different\n4 parts of the transformation:\n5 \n6    - `~astropy.wcs.Wcsprm`: Is a direct wrapper of the core WCS\n7      functionality in `wcslib`_.  (This includes TPV and TPD\n8      polynomial distortion, but not SIP distortion).\n9 \n10    - `~astropy.wcs.Sip`: Handles polynomial distortion as defined in the\n11      `SIP`_ convention.\n12 \n13    - `~astropy.wcs.DistortionLookupTable`: Handles `distortion paper`_\n14      lookup tables.\n15 \n16 Additionally, the class `WCS` aggregates all of these transformations\n17 together in a pipeline:\n18 \n19    - Detector to image plane correction (by a pair of\n20      `~astropy.wcs.DistortionLookupTable` objects).\n21 \n22    - `SIP`_ distortion correction (by an underlying `~astropy.wcs.Sip`\n23      object)\n24 \n25    - `distortion paper`_ table-lookup correction (by a pair of\n26      `~astropy.wcs.DistortionLookupTable` objects).\n27 \n28    - `wcslib`_ WCS transformation (by a `~astropy.wcs.Wcsprm` object)\n29 \n30 \"\"\"\n31 \n32 # STDLIB\n33 import copy\n34 import io\n35 import itertools\n36 import os\n37 import re\n38 import textwrap\n39 import warnings\n40 import builtins\n41 \n42 # THIRD-PARTY\n43 import numpy as np\n44 \n45 # LOCAL\n46 from .. import log\n47 from ..io import fits\n48 from . import _docutil as __\n49 try:\n50     from . import _wcs\n51 except ImportError:\n52     if not _ASTROPY_SETUP_:\n53         raise\n54     else:\n55         _wcs = None\n56 \n57 from ..utils.compat import possible_filename\n58 from ..utils.exceptions import AstropyWarning, AstropyUserWarning, AstropyDeprecationWarning\n59 \n60 __all__ = ['FITSFixedWarning', 'WCS', 'find_all_wcs',\n61            'DistortionLookupTable', 'Sip', 'Tabprm', 'Wcsprm',\n62            'WCSBase', 'validate', 'WcsError', 'SingularMatrixError',\n63            'InconsistentAxisTypesError', 'InvalidTransformError',\n64            'InvalidCoordinateError', 'NoSolutionError',\n65            'InvalidSubimageSpecificationError', 'NoConvergence',\n66            'NonseparableSubimageCoordinateSystemError',\n67            'NoWcsKeywordsFoundError', 'InvalidTabularParametersError']\n68 \n69 \n70 __doctest_skip__ = ['WCS.all_world2pix']\n71 \n72 \n73 if _wcs is not None:\n74     _parsed_version = _wcs.__version__.split('.')\n75     if int(_parsed_version[0]) == 5 and int(_parsed_version[1]) < 8:\n76         raise ImportError(\n77             \"astropy.wcs is built with wcslib {0}, but only versions 5.8 and \"\n78             \"later on the 5.x series are known to work.  The version of wcslib \"\n79             \"that ships with astropy may be used.\")\n80 \n81     if not _wcs._sanity_check():\n82         raise RuntimeError(\n83         \"astropy.wcs did not pass its sanity check for your build \"\n84         \"on your platform.\")\n85 \n86     WCSBase = _wcs._Wcs\n87     DistortionLookupTable = _wcs.DistortionLookupTable\n88     Sip = _wcs.Sip\n89     Wcsprm = _wcs.Wcsprm\n90     Tabprm = _wcs.Tabprm\n91     WcsError = _wcs.WcsError\n92     SingularMatrixError = _wcs.SingularMatrixError\n93     InconsistentAxisTypesError = _wcs.InconsistentAxisTypesError\n94     InvalidTransformError = _wcs.InvalidTransformError\n95     InvalidCoordinateError = _wcs.InvalidCoordinateError\n96     NoSolutionError = _wcs.NoSolutionError\n97     InvalidSubimageSpecificationError = _wcs.InvalidSubimageSpecificationError\n98     NonseparableSubimageCoordinateSystemError = _wcs.NonseparableSubimageCoordinateSystemError\n99     NoWcsKeywordsFoundError = _wcs.NoWcsKeywordsFoundError\n100     InvalidTabularParametersError = _wcs.InvalidTabularParametersError\n101 \n102     # Copy all the constants from the C extension into this module's namespace\n103     for key, val in _wcs.__dict__.items():\n104         if key.startswith(('WCSSUB', 'WCSHDR', 'WCSHDO')):\n105             locals()[key] = val\n106             __all__.append(key)\n107 else:\n108     WCSBase = object\n109     Wcsprm = object\n110     DistortionLookupTable = object\n111     Sip = object\n112     Tabprm = object\n113     WcsError = None\n114     SingularMatrixError = None\n115     InconsistentAxisTypesError = None\n116     InvalidTransformError = None\n117     InvalidCoordinateError = None\n118     NoSolutionError = None\n119     InvalidSubimageSpecificationError = None\n120     NonseparableSubimageCoordinateSystemError = None\n121     NoWcsKeywordsFoundError = None\n122     InvalidTabularParametersError = None\n123 \n124 \n125 # Additional relax bit flags\n126 WCSHDO_SIP = 0x80000\n127 \n128 # Regular expression defining SIP keyword It matches keyword that starts with A\n129 # or B, optionally followed by P, followed by an underscore then a number in\n130 # range of 0-19, followed by an underscore and another number in range of 0-19.\n131 # Keyword optionally ends with a capital letter.\n132 SIP_KW = re.compile('''^[AB]P?_1?[0-9]_1?[0-9][A-Z]?$''')\n133 \n134 \n135 def _parse_keysel(keysel):\n136     keysel_flags = 0\n137     if keysel is not None:\n138         for element in keysel:\n139             if element.lower() == 'image':\n140                 keysel_flags |= _wcs.WCSHDR_IMGHEAD\n141             elif element.lower() == 'binary':\n142                 keysel_flags |= _wcs.WCSHDR_BIMGARR\n143             elif element.lower() == 'pixel':\n144                 keysel_flags |= _wcs.WCSHDR_PIXLIST\n145             else:\n146                 raise ValueError(\n147                     \"keysel must be a list of 'image', 'binary' \" +\n148                     \"and/or 'pixel'\")\n149     else:\n150         keysel_flags = -1\n151 \n152     return keysel_flags\n153 \n154 \n155 class NoConvergence(Exception):\n156     \"\"\"\n157     An error class used to report non-convergence and/or divergence\n158     of numerical methods. It is used to report errors in the\n159     iterative solution used by\n160     the :py:meth:`~astropy.wcs.WCS.all_world2pix`.\n161 \n162     Attributes\n163     ----------\n164 \n165     best_solution : `numpy.ndarray`\n166         Best solution achieved by the numerical method.\n167 \n168     accuracy : `numpy.ndarray`\n169         Accuracy of the ``best_solution``.\n170 \n171     niter : `int`\n172         Number of iterations performed by the numerical method\n173         to compute ``best_solution``.\n174 \n175     divergent : None, `numpy.ndarray`\n176         Indices of the points in ``best_solution`` array\n177         for which the solution appears to be divergent. If the\n178         solution does not diverge, ``divergent`` will be set to `None`.\n179 \n180     slow_conv : None, `numpy.ndarray`\n181         Indices of the solutions in ``best_solution`` array\n182         for which the solution failed to converge within the\n183         specified maximum number of iterations. If there are no\n184         non-converging solutions (i.e., if the required accuracy\n185         has been achieved for all input data points)\n186         then ``slow_conv`` will be set to `None`.\n187 \n188     \"\"\"\n189 \n190     def __init__(self, *args, best_solution=None, accuracy=None, niter=None,\n191                  divergent=None, slow_conv=None, **kwargs):\n192         super().__init__(*args)\n193 \n194         self.best_solution = best_solution\n195         self.accuracy = accuracy\n196         self.niter = niter\n197         self.divergent = divergent\n198         self.slow_conv = slow_conv\n199 \n200         if kwargs:\n201             warnings.warn(\"Function received unexpected arguments ({}) these \"\n202                           \"are ignored but will raise an Exception in the \"\n203                           \"future.\".format(list(kwargs)),\n204                           AstropyDeprecationWarning)\n205 \n206 \n207 class FITSFixedWarning(AstropyWarning):\n208     \"\"\"\n209     The warning raised when the contents of the FITS header have been\n210     modified to be standards compliant.\n211     \"\"\"\n212     pass\n213 \n214 \n215 class WCS(WCSBase):\n216     \"\"\"WCS objects perform standard WCS transformations, and correct for\n217     `SIP`_ and `distortion paper`_ table-lookup transformations, based\n218     on the WCS keywords and supplementary data read from a FITS file.\n219 \n220     Parameters\n221     ----------\n222     header : astropy.io.fits header object, Primary HDU, Image HDU, string, dict-like, or None, optional\n223         If *header* is not provided or None, the object will be\n224         initialized to default values.\n225 \n226     fobj : An astropy.io.fits file (hdulist) object, optional\n227         It is needed when header keywords point to a `distortion\n228         paper`_ lookup table stored in a different extension.\n229 \n230     key : str, optional\n231         The name of a particular WCS transform to use.  This may be\n232         either ``' '`` or ``'A'``-``'Z'`` and corresponds to the\n233         ``\\\"a\\\"`` part of the ``CTYPEia`` cards.  *key* may only be\n234         provided if *header* is also provided.\n235 \n236     minerr : float, optional\n237         The minimum value a distortion correction must have in order\n238         to be applied. If the value of ``CQERRja`` is smaller than\n239         *minerr*, the corresponding distortion is not applied.\n240 \n241     relax : bool or int, optional\n242         Degree of permissiveness:\n243 \n244         - `True` (default): Admit all recognized informal extensions\n245           of the WCS standard.\n246 \n247         - `False`: Recognize only FITS keywords defined by the\n248           published WCS standard.\n249 \n250         - `int`: a bit field selecting specific extensions to accept.\n251           See :ref:`relaxread` for details.\n252 \n253     naxis : int or sequence, optional\n254         Extracts specific coordinate axes using\n255         :meth:`~astropy.wcs.Wcsprm.sub`.  If a header is provided, and\n256         *naxis* is not ``None``, *naxis* will be passed to\n257         :meth:`~astropy.wcs.Wcsprm.sub` in order to select specific\n258         axes from the header.  See :meth:`~astropy.wcs.Wcsprm.sub` for\n259         more details about this parameter.\n260 \n261     keysel : sequence of flags, optional\n262         A sequence of flags used to select the keyword types\n263         considered by wcslib.  When ``None``, only the standard image\n264         header keywords are considered (and the underlying wcspih() C\n265         function is called).  To use binary table image array or pixel\n266         list keywords, *keysel* must be set.\n267 \n268         Each element in the list should be one of the following\n269         strings:\n270 \n271         - 'image': Image header keywords\n272 \n273         - 'binary': Binary table image array keywords\n274 \n275         - 'pixel': Pixel list keywords\n276 \n277         Keywords such as ``EQUIna`` or ``RFRQna`` that are common to\n278         binary table image arrays and pixel lists (including\n279         ``WCSNna`` and ``TWCSna``) are selected by both 'binary' and\n280         'pixel'.\n281 \n282     colsel : sequence of int, optional\n283         A sequence of table column numbers used to restrict the WCS\n284         transformations considered to only those pertaining to the\n285         specified columns.  If `None`, there is no restriction.\n286 \n287     fix : bool, optional\n288         When `True` (default), call `~astropy.wcs.Wcsprm.fix` on\n289         the resulting object to fix any non-standard uses in the\n290         header.  `FITSFixedWarning` Warnings will be emitted if any\n291         changes were made.\n292 \n293     translate_units : str, optional\n294         Specify which potentially unsafe translations of non-standard\n295         unit strings to perform.  By default, performs none.  See\n296         `WCS.fix` for more information about this parameter.  Only\n297         effective when ``fix`` is `True`.\n298 \n299     Raises\n300     ------\n301     MemoryError\n302          Memory allocation failed.\n303 \n304     ValueError\n305          Invalid key.\n306 \n307     KeyError\n308          Key not found in FITS header.\n309 \n310     ValueError\n311          Lookup table distortion present in the header but *fobj* was\n312          not provided.\n313 \n314     Notes\n315     -----\n316 \n317     1. astropy.wcs supports arbitrary *n* dimensions for the core WCS\n318        (the transformations handled by WCSLIB).  However, the\n319        `distortion paper`_ lookup table and `SIP`_ distortions must be\n320        two dimensional.  Therefore, if you try to create a WCS object\n321        where the core WCS has a different number of dimensions than 2\n322        and that object also contains a `distortion paper`_ lookup\n323        table or `SIP`_ distortion, a `ValueError`\n324        exception will be raised.  To avoid this, consider using the\n325        *naxis* kwarg to select two dimensions from the core WCS.\n326 \n327     2. The number of coordinate axes in the transformation is not\n328        determined directly from the ``NAXIS`` keyword but instead from\n329        the highest of:\n330 \n331            - ``NAXIS`` keyword\n332 \n333            - ``WCSAXESa`` keyword\n334 \n335            - The highest axis number in any parameterized WCS keyword.\n336              The keyvalue, as well as the keyword, must be\n337              syntactically valid otherwise it will not be considered.\n338 \n339        If none of these keyword types is present, i.e. if the header\n340        only contains auxiliary WCS keywords for a particular\n341        coordinate representation, then no coordinate description is\n342        constructed for it.\n343 \n344        The number of axes, which is set as the ``naxis`` member, may\n345        differ for different coordinate representations of the same\n346        image.\n347 \n348     3. When the header includes duplicate keywords, in most cases the\n349        last encountered is used.\n350 \n351     4. `~astropy.wcs.Wcsprm.set` is called immediately after\n352        construction, so any invalid keywords or transformations will\n353        be raised by the constructor, not when subsequently calling a\n354        transformation method.\n355 \n356     \"\"\"\n357 \n358     def __init__(self, header=None, fobj=None, key=' ', minerr=0.0,\n359                  relax=True, naxis=None, keysel=None, colsel=None,\n360                  fix=True, translate_units='', _do_set=True):\n361         close_fds = []\n362 \n363         if header is None:\n364             if naxis is None:\n365                 naxis = 2\n366             wcsprm = _wcs.Wcsprm(header=None, key=key,\n367                                  relax=relax, naxis=naxis)\n368             self.naxis = wcsprm.naxis\n369             # Set some reasonable defaults.\n370             det2im = (None, None)\n371             cpdis = (None, None)\n372             sip = None\n373         else:\n374             keysel_flags = _parse_keysel(keysel)\n375 \n376             if isinstance(header, (str, bytes)):\n377                 try:\n378                     is_path = (possible_filename(header) and\n379                                os.path.exists(header))\n380                 except (OSError, ValueError):\n381                     is_path = False\n382 \n383                 if is_path:\n384                     if fobj is not None:\n385                         raise ValueError(\n386                             \"Can not provide both a FITS filename to \"\n387                             \"argument 1 and a FITS file object to argument 2\")\n388                     fobj = fits.open(header)\n389                     close_fds.append(fobj)\n390                     header = fobj[0].header\n391             elif isinstance(header, fits.hdu.image._ImageBaseHDU):\n392                 header = header.header\n393             elif not isinstance(header, fits.Header):\n394                 try:\n395                     # Accept any dict-like object\n396                     orig_header = header\n397                     header = fits.Header()\n398                     for dict_key in orig_header.keys():\n399                         header[dict_key] = orig_header[dict_key]\n400                 except TypeError:\n401                     raise TypeError(\n402                         \"header must be a string, an astropy.io.fits.Header \"\n403                         \"object, or a dict-like object\")\n404 \n405             if isinstance(header, fits.Header):\n406                 header_string = header.tostring().rstrip()\n407             else:\n408                 header_string = header\n409 \n410             # Importantly, header is a *copy* of the passed-in header\n411             # because we will be modifying it\n412             if isinstance(header_string, str):\n413                 header_bytes = header_string.encode('ascii')\n414                 header_string = header_string\n415             else:\n416                 header_bytes = header_string\n417                 header_string = header_string.decode('ascii')\n418 \n419             try:\n420                 tmp_header = fits.Header.fromstring(header_string)\n421                 self._remove_sip_kw(tmp_header)\n422                 tmp_header_bytes = tmp_header.tostring().rstrip()\n423                 if isinstance(tmp_header_bytes, str):\n424                     tmp_header_bytes = tmp_header_bytes.encode('ascii')\n425                 tmp_wcsprm = _wcs.Wcsprm(header=tmp_header_bytes, key=key,\n426                                          relax=relax, keysel=keysel_flags,\n427                                          colsel=colsel, warnings=False)\n428             except _wcs.NoWcsKeywordsFoundError:\n429                 est_naxis = 0\n430             else:\n431                 if naxis is not None:\n432                     try:\n433                         tmp_wcsprm.sub(naxis)\n434                     except ValueError:\n435                         pass\n436                     est_naxis = tmp_wcsprm.naxis\n437                 else:\n438                     est_naxis = 2\n439 \n440             header = fits.Header.fromstring(header_string)\n441 \n442             if est_naxis == 0:\n443                 est_naxis = 2\n444             self.naxis = est_naxis\n445 \n446             det2im = self._read_det2im_kw(header, fobj, err=minerr)\n447             cpdis = self._read_distortion_kw(\n448                 header, fobj, dist='CPDIS', err=minerr)\n449             sip = self._read_sip_kw(header, wcskey=key)\n450             self._remove_sip_kw(header)\n451 \n452             header_string = header.tostring()\n453             header_string = header_string.replace('END' + ' ' * 77, '')\n454 \n455             if isinstance(header_string, str):\n456                 header_bytes = header_string.encode('ascii')\n457                 header_string = header_string\n458             else:\n459                 header_bytes = header_string\n460                 header_string = header_string.decode('ascii')\n461 \n462             try:\n463                 wcsprm = _wcs.Wcsprm(header=header_bytes, key=key,\n464                                      relax=relax, keysel=keysel_flags,\n465                                      colsel=colsel)\n466             except _wcs.NoWcsKeywordsFoundError:\n467                 # The header may have SIP or distortions, but no core\n468                 # WCS.  That isn't an error -- we want a \"default\"\n469                 # (identity) core Wcs transformation in that case.\n470                 if colsel is None:\n471                     wcsprm = _wcs.Wcsprm(header=None, key=key,\n472                                          relax=relax, keysel=keysel_flags,\n473                                          colsel=colsel)\n474                 else:\n475                     raise\n476 \n477             if naxis is not None:\n478                 wcsprm = wcsprm.sub(naxis)\n479             self.naxis = wcsprm.naxis\n480 \n481             if (wcsprm.naxis != 2 and\n482                 (det2im[0] or det2im[1] or cpdis[0] or cpdis[1] or sip)):\n483                 raise ValueError(\n484                     \"\"\"\n485 FITS WCS distortion paper lookup tables and SIP distortions only work\n486 in 2 dimensions.  However, WCSLIB has detected {0} dimensions in the\n487 core WCS keywords.  To use core WCS in conjunction with FITS WCS\n488 distortion paper lookup tables or SIP distortion, you must select or\n489 reduce these to 2 dimensions using the naxis kwarg.\n490 \"\"\".format(wcsprm.naxis))\n491 \n492             header_naxis = header.get('NAXIS', None)\n493             if header_naxis is not None and header_naxis < wcsprm.naxis:\n494                 warnings.warn(\n495                     \"The WCS transformation has more axes ({0:d}) than the \"\n496                     \"image it is associated with ({1:d})\".format(\n497                         wcsprm.naxis, header_naxis), FITSFixedWarning)\n498 \n499         self._get_naxis(header)\n500         WCSBase.__init__(self, sip, cpdis, wcsprm, det2im)\n501 \n502         if fix:\n503             self.fix(translate_units=translate_units)\n504 \n505         if _do_set:\n506             self.wcs.set()\n507 \n508         for fd in close_fds:\n509             fd.close()\n510 \n511     def __copy__(self):\n512         new_copy = self.__class__()\n513         WCSBase.__init__(new_copy, self.sip,\n514                          (self.cpdis1, self.cpdis2),\n515                          self.wcs,\n516                          (self.det2im1, self.det2im2))\n517         new_copy.__dict__.update(self.__dict__)\n518         return new_copy\n519 \n520     def __deepcopy__(self, memo):\n521         from copy import deepcopy\n522 \n523         new_copy = self.__class__()\n524         new_copy.naxis = deepcopy(self.naxis, memo)\n525         WCSBase.__init__(new_copy, deepcopy(self.sip, memo),\n526                          (deepcopy(self.cpdis1, memo),\n527                           deepcopy(self.cpdis2, memo)),\n528                          deepcopy(self.wcs, memo),\n529                          (deepcopy(self.det2im1, memo),\n530                           deepcopy(self.det2im2, memo)))\n531         for key, val in self.__dict__.items():\n532             new_copy.__dict__[key] = deepcopy(val, memo)\n533         return new_copy\n534 \n535     def copy(self):\n536         \"\"\"\n537         Return a shallow copy of the object.\n538 \n539         Convenience method so user doesn't have to import the\n540         :mod:`copy` stdlib module.\n541 \n542         .. warning::\n543             Use `deepcopy` instead of `copy` unless you know why you need a\n544             shallow copy.\n545         \"\"\"\n546         return copy.copy(self)\n547 \n548     def deepcopy(self):\n549         \"\"\"\n550         Return a deep copy of the object.\n551 \n552         Convenience method so user doesn't have to import the\n553         :mod:`copy` stdlib module.\n554         \"\"\"\n555         return copy.deepcopy(self)\n556 \n557     def sub(self, axes=None):\n558         copy = self.deepcopy()\n559         copy.wcs = self.wcs.sub(axes)\n560         copy.naxis = copy.wcs.naxis\n561         return copy\n562     if _wcs is not None:\n563         sub.__doc__ = _wcs.Wcsprm.sub.__doc__\n564 \n565     def _fix_scamp(self):\n566         \"\"\"\n567         Remove SCAMP's PVi_m distortion parameters if SIP distortion parameters\n568         are also present. Some projects (e.g., Palomar Transient Factory)\n569         convert SCAMP's distortion parameters (which abuse the PVi_m cards) to\n570         SIP. However, wcslib gets confused by the presence of both SCAMP and\n571         SIP distortion parameters.\n572 \n573         See https://github.com/astropy/astropy/issues/299.\n574         \"\"\"\n575         # Nothing to be done if no WCS attached\n576         if self.wcs is None:\n577             return\n578 \n579         # Nothing to be done if no PV parameters attached\n580         pv = self.wcs.get_pv()\n581         if not pv:\n582             return\n583 \n584         # Nothing to be done if axes don't use SIP distortion parameters\n585         if self.sip is None:\n586             return\n587 \n588         # Nothing to be done if any radial terms are present...\n589         # Loop over list to find any radial terms.\n590         # Certain values of the `j' index are used for storing\n591         # radial terms; refer to Equation (1) in\n592         # <http://web.ipac.caltech.edu/staff/shupe/reprints/SIP_to_PV_SPIE2012.pdf>.\n593         pv = np.asarray(pv)\n594         # Loop over distinct values of `i' index\n595         for i in set(pv[:, 0]):\n596             # Get all values of `j' index for this value of `i' index\n597             js = set(pv[:, 1][pv[:, 0] == i])\n598             # Find max value of `j' index\n599             max_j = max(js)\n600             for j in (3, 11, 23, 39):\n601                 if j < max_j and j in js:\n602                     return\n603 \n604         self.wcs.set_pv([])\n605         warnings.warn(\"Removed redundant SCAMP distortion parameters \" +\n606             \"because SIP parameters are also present\", FITSFixedWarning)\n607 \n608     def fix(self, translate_units='', naxis=None):\n609         \"\"\"\n610         Perform the fix operations from wcslib, and warn about any\n611         changes it has made.\n612 \n613         Parameters\n614         ----------\n615         translate_units : str, optional\n616             Specify which potentially unsafe translations of\n617             non-standard unit strings to perform.  By default,\n618             performs none.\n619 \n620             Although ``\"S\"`` is commonly used to represent seconds,\n621             its translation to ``\"s\"`` is potentially unsafe since the\n622             standard recognizes ``\"S\"`` formally as Siemens, however\n623             rarely that may be used.  The same applies to ``\"H\"`` for\n624             hours (Henry), and ``\"D\"`` for days (Debye).\n625 \n626             This string controls what to do in such cases, and is\n627             case-insensitive.\n628 \n629             - If the string contains ``\"s\"``, translate ``\"S\"`` to\n630               ``\"s\"``.\n631 \n632             - If the string contains ``\"h\"``, translate ``\"H\"`` to\n633               ``\"h\"``.\n634 \n635             - If the string contains ``\"d\"``, translate ``\"D\"`` to\n636               ``\"d\"``.\n637 \n638             Thus ``''`` doesn't do any unsafe translations, whereas\n639             ``'shd'`` does all of them.\n640 \n641         naxis : int array[naxis], optional\n642             Image axis lengths.  If this array is set to zero or\n643             ``None``, then `~astropy.wcs.Wcsprm.cylfix` will not be\n644             invoked.\n645         \"\"\"\n646         if self.wcs is not None:\n647             self._fix_scamp()\n648             fixes = self.wcs.fix(translate_units, naxis)\n649             for key, val in fixes.items():\n650                 if val != \"No change\":\n651                     warnings.warn(\n652                         (\"'{0}' made the change '{1}'.\").\n653                         format(key, val),\n654                         FITSFixedWarning)\n655 \n656     def calc_footprint(self, header=None, undistort=True, axes=None, center=True):\n657         \"\"\"\n658         Calculates the footprint of the image on the sky.\n659 \n660         A footprint is defined as the positions of the corners of the\n661         image on the sky after all available distortions have been\n662         applied.\n663 \n664         Parameters\n665         ----------\n666         header : `~astropy.io.fits.Header` object, optional\n667             Used to get ``NAXIS1`` and ``NAXIS2``\n668             header and axes are mutually exclusive, alternative ways\n669             to provide the same information.\n670 \n671         undistort : bool, optional\n672             If `True`, take SIP and distortion lookup table into\n673             account\n674 \n675         axes : length 2 sequence ints, optional\n676             If provided, use the given sequence as the shape of the\n677             image.  Otherwise, use the ``NAXIS1`` and ``NAXIS2``\n678             keywords from the header that was used to create this\n679             `WCS` object.\n680 \n681         center : bool, optional\n682             If `True` use the center of the pixel, otherwise use the corner.\n683 \n684         Returns\n685         -------\n686         coord : (4, 2) array of (*x*, *y*) coordinates.\n687             The order is clockwise starting with the bottom left corner.\n688         \"\"\"\n689         if axes is not None:\n690             naxis1, naxis2 = axes\n691         else:\n692             if header is None:\n693                 try:\n694                     # classes that inherit from WCS and define naxis1/2\n695                     # do not require a header parameter\n696                     naxis1 = self._naxis1\n697                     naxis2 = self._naxis2\n698                 except AttributeError:\n699                     warnings.warn(\"Need a valid header in order to calculate footprint\\n\", AstropyUserWarning)\n700                     return None\n701             else:\n702                 naxis1 = header.get('NAXIS1', None)\n703                 naxis2 = header.get('NAXIS2', None)\n704 \n705         if naxis1 is None or naxis2 is None:\n706             raise ValueError(\n707                     \"Image size could not be determined.\")\n708 \n709         if center:\n710             corners = np.array([[1, 1],\n711                                 [1, naxis2],\n712                                 [naxis1, naxis2],\n713                                 [naxis1, 1]], dtype=np.float64)\n714         else:\n715             corners = np.array([[0.5, 0.5],\n716                                 [0.5, naxis2 + 0.5],\n717                                 [naxis1 + 0.5, naxis2 + 0.5],\n718                                 [naxis1 + 0.5, 0.5]], dtype=np.float64)\n719 \n720         if undistort:\n721             return self.all_pix2world(corners, 1)\n722         else:\n723             return self.wcs_pix2world(corners, 1)\n724 \n725     def _read_det2im_kw(self, header, fobj, err=0.0):\n726         \"\"\"\n727         Create a `distortion paper`_ type lookup table for detector to\n728         image plane correction.\n729         \"\"\"\n730         if fobj is None:\n731             return (None, None)\n732 \n733         if not isinstance(fobj, fits.HDUList):\n734             return (None, None)\n735 \n736         try:\n737             axiscorr = header[str('AXISCORR')]\n738             d2imdis = self._read_d2im_old_format(header, fobj, axiscorr)\n739             return d2imdis\n740         except KeyError:\n741             pass\n742 \n743         dist = 'D2IMDIS'\n744         d_kw = 'D2IM'\n745         err_kw = 'D2IMERR'\n746         tables = {}\n747         for i in range(1, self.naxis + 1):\n748             d_error = header.get(err_kw + str(i), 0.0)\n749             if d_error < err:\n750                 tables[i] = None\n751                 continue\n752             distortion = dist + str(i)\n753             if distortion in header:\n754                 dis = header[distortion].lower()\n755                 if dis == 'lookup':\n756                     del header[distortion]\n757                     assert isinstance(fobj, fits.HDUList), ('An astropy.io.fits.HDUList'\n758                                 'is required for Lookup table distortion.')\n759                     dp = (d_kw + str(i)).strip()\n760                     dp_extver_key = dp + str('.EXTVER')\n761                     if dp_extver_key in header:\n762                         d_extver = header[dp_extver_key]\n763                         del header[dp_extver_key]\n764                     else:\n765                         d_extver = 1\n766                     dp_axis_key = dp + str('.AXIS.{0:d}').format(i)\n767                     if i == header[dp_axis_key]:\n768                         d_data = fobj[str('D2IMARR'), d_extver].data\n769                     else:\n770                         d_data = (fobj[str('D2IMARR'), d_extver].data).transpose()\n771                     del header[dp_axis_key]\n772                     d_header = fobj[str('D2IMARR'), d_extver].header\n773                     d_crpix = (d_header.get(str('CRPIX1'), 0.0), d_header.get(str('CRPIX2'), 0.0))\n774                     d_crval = (d_header.get(str('CRVAL1'), 0.0), d_header.get(str('CRVAL2'), 0.0))\n775                     d_cdelt = (d_header.get(str('CDELT1'), 1.0), d_header.get(str('CDELT2'), 1.0))\n776                     d_lookup = DistortionLookupTable(d_data, d_crpix,\n777                                                      d_crval, d_cdelt)\n778                     tables[i] = d_lookup\n779                 else:\n780                     warnings.warn('Polynomial distortion is not implemented.\\n', AstropyUserWarning)\n781                 for key in list(header):\n782                     if key.startswith(dp + str('.')):\n783                         del header[key]\n784             else:\n785                 tables[i] = None\n786         if not tables:\n787             return (None, None)\n788         else:\n789             return (tables.get(1), tables.get(2))\n790 \n791     def _read_d2im_old_format(self, header, fobj, axiscorr):\n792         warnings.warn(\"The use of ``AXISCORR`` for D2IM correction has been deprecated.\"\n793                       \"`~astropy.wcs` will read in files with ``AXISCORR`` but ``to_fits()`` will write \"\n794                       \"out files without it.\",\n795                       AstropyDeprecationWarning)\n796         cpdis = [None, None]\n797         crpix = [0., 0.]\n798         crval = [0., 0.]\n799         cdelt = [1., 1.]\n800         try:\n801             d2im_data = fobj[(str('D2IMARR'), 1)].data\n802         except KeyError:\n803             return (None, None)\n804         except AttributeError:\n805             return (None, None)\n806 \n807         d2im_data = np.array([d2im_data])\n808         d2im_hdr = fobj[(str('D2IMARR'), 1)].header\n809         naxis = d2im_hdr[str('NAXIS')]\n810 \n811         for i in range(1, naxis + 1):\n812             crpix[i - 1] = d2im_hdr.get(str('CRPIX') + str(i), 0.0)\n813             crval[i - 1] = d2im_hdr.get(str('CRVAL') + str(i), 0.0)\n814             cdelt[i - 1] = d2im_hdr.get(str('CDELT') + str(i), 1.0)\n815 \n816         cpdis = DistortionLookupTable(d2im_data, crpix, crval, cdelt)\n817 \n818         if axiscorr == 1:\n819             return (cpdis, None)\n820         elif axiscorr == 2:\n821             return (None, cpdis)\n822         else:\n823             warnings.warn(\"Expected AXISCORR to be 1 or 2\", AstropyUserWarning)\n824             return (None, None)\n825 \n826     def _write_det2im(self, hdulist):\n827         \"\"\"\n828         Writes a `distortion paper`_ type lookup table to the given\n829         `astropy.io.fits.HDUList`.\n830         \"\"\"\n831 \n832         if self.det2im1 is None and self.det2im2 is None:\n833             return\n834         dist = 'D2IMDIS'\n835         d_kw = 'D2IM'\n836         err_kw = 'D2IMERR'\n837 \n838         def write_d2i(num, det2im):\n839             if det2im is None:\n840                 return\n841             str('{0}{1:d}').format(dist, num),\n842             hdulist[0].header[str('{0}{1:d}').format(dist, num)] = (\n843                 'LOOKUP', 'Detector to image correction type')\n844             hdulist[0].header[str('{0}{1:d}.EXTVER').format(d_kw, num)] = (\n845                 num, 'Version number of WCSDVARR extension')\n846             hdulist[0].header[str('{0}{1:d}.NAXES').format(d_kw, num)] = (\n847                 len(det2im.data.shape), 'Number of independent variables in d2im function')\n848             for i in range(det2im.data.ndim):\n849                 hdulist[0].header[str('{0}{1:d}.AXIS.{2:d}').format(d_kw, num, i + 1)] = (\n850                     i + 1, 'Axis number of the jth independent variable in a d2im function')\n851 \n852             image = fits.ImageHDU(det2im.data, name=str('D2IMARR'))\n853             header = image.header\n854 \n855             header[str('CRPIX1')] = (det2im.crpix[0],\n856                                      'Coordinate system reference pixel')\n857             header[str('CRPIX2')] = (det2im.crpix[1],\n858                                      'Coordinate system reference pixel')\n859             header[str('CRVAL1')] = (det2im.crval[0],\n860                                      'Coordinate system value at reference pixel')\n861             header[str('CRVAL2')] = (det2im.crval[1],\n862                                      'Coordinate system value at reference pixel')\n863             header[str('CDELT1')] = (det2im.cdelt[0],\n864                                      'Coordinate increment along axis')\n865             header[str('CDELT2')] = (det2im.cdelt[1],\n866                                      'Coordinate increment along axis')\n867             image.ver = int(hdulist[0].header[str('{0}{1:d}.EXTVER').format(d_kw, num)])\n868             hdulist.append(image)\n869         write_d2i(1, self.det2im1)\n870         write_d2i(2, self.det2im2)\n871 \n872     def _read_distortion_kw(self, header, fobj, dist='CPDIS', err=0.0):\n873         \"\"\"\n874         Reads `distortion paper`_ table-lookup keywords and data, and\n875         returns a 2-tuple of `~astropy.wcs.DistortionLookupTable`\n876         objects.\n877 \n878         If no `distortion paper`_ keywords are found, ``(None, None)``\n879         is returned.\n880         \"\"\"\n881         if isinstance(header, (str, bytes)):\n882             return (None, None)\n883 \n884         if dist == 'CPDIS':\n885             d_kw = str('DP')\n886             err_kw = str('CPERR')\n887         else:\n888             d_kw = str('DQ')\n889             err_kw = str('CQERR')\n890 \n891         tables = {}\n892         for i in range(1, self.naxis + 1):\n893             d_error_key = err_kw + str(i)\n894             if d_error_key in header:\n895                 d_error = header[d_error_key]\n896                 del header[d_error_key]\n897             else:\n898                 d_error = 0.0\n899             if d_error < err:\n900                 tables[i] = None\n901                 continue\n902             distortion = dist + str(i)\n903             if distortion in header:\n904                 dis = header[distortion].lower()\n905                 del header[distortion]\n906                 if dis == 'lookup':\n907                     if not isinstance(fobj, fits.HDUList):\n908                         raise ValueError('an astropy.io.fits.HDUList is '\n909                                 'required for Lookup table distortion.')\n910                     dp = (d_kw + str(i)).strip()\n911                     dp_extver_key = dp + str('.EXTVER')\n912                     if dp_extver_key in header:\n913                         d_extver = header[dp_extver_key]\n914                         del header[dp_extver_key]\n915                     else:\n916                         d_extver = 1\n917                     dp_axis_key = dp + str('.AXIS.{0:d}'.format(i))\n918                     if i == header[dp_axis_key]:\n919                         d_data = fobj[str('WCSDVARR'), d_extver].data\n920                     else:\n921                         d_data = (fobj[str('WCSDVARR'), d_extver].data).transpose()\n922                     del header[dp_axis_key]\n923                     d_header = fobj[str('WCSDVARR'), d_extver].header\n924                     d_crpix = (d_header.get(str('CRPIX1'), 0.0),\n925                                d_header.get(str('CRPIX2'), 0.0))\n926                     d_crval = (d_header.get(str('CRVAL1'), 0.0),\n927                                d_header.get(str('CRVAL2'), 0.0))\n928                     d_cdelt = (d_header.get(str('CDELT1'), 1.0),\n929                                d_header.get(str('CDELT2'), 1.0))\n930                     d_lookup = DistortionLookupTable(d_data, d_crpix, d_crval, d_cdelt)\n931                     tables[i] = d_lookup\n932 \n933                     for key in list(header):\n934                         if key.startswith(dp + str('.')):\n935                             del header[key]\n936                 else:\n937                     warnings.warn('Polynomial distortion is not implemented.\\n', AstropyUserWarning)\n938             else:\n939                 tables[i] = None\n940 \n941         if not tables:\n942             return (None, None)\n943         else:\n944             return (tables.get(1), tables.get(2))\n945 \n946     def _write_distortion_kw(self, hdulist, dist='CPDIS'):\n947         \"\"\"\n948         Write out `distortion paper`_ keywords to the given\n949         `fits.HDUList`.\n950         \"\"\"\n951         if self.cpdis1 is None and self.cpdis2 is None:\n952             return\n953 \n954         if dist == 'CPDIS':\n955             d_kw = str('DP')\n956             err_kw = str('CPERR')\n957         else:\n958             d_kw = str('DQ')\n959             err_kw = str('CQERR')\n960 \n961         def write_dist(num, cpdis):\n962             if cpdis is None:\n963                 return\n964 \n965             hdulist[0].header[str('{0}{1:d}').format(dist, num)] = (\n966                 'LOOKUP', 'Prior distortion function type')\n967             hdulist[0].header[str('{0}{1:d}.EXTVER').format(d_kw, num)] = (\n968                 num, 'Version number of WCSDVARR extension')\n969             hdulist[0].header[str('{0}{1:d}.NAXES').format(d_kw, num)] = (\n970                 len(cpdis.data.shape), 'Number of independent variables in distortion function')\n971 \n972             for i in range(cpdis.data.ndim):\n973                 hdulist[0].header[str('{0}{1:d}.AXIS.{2:d}').format(d_kw, num, i + 1)] = (\n974                     i + 1,\n975                     'Axis number of the jth independent variable in a distortion function')\n976 \n977             image = fits.ImageHDU(cpdis.data, name=str('WCSDVARR'))\n978             header = image.header\n979 \n980             header[str('CRPIX1')] = (cpdis.crpix[0], 'Coordinate system reference pixel')\n981             header[str('CRPIX2')] = (cpdis.crpix[1], 'Coordinate system reference pixel')\n982             header[str('CRVAL1')] = (cpdis.crval[0], 'Coordinate system value at reference pixel')\n983             header[str('CRVAL2')] = (cpdis.crval[1], 'Coordinate system value at reference pixel')\n984             header[str('CDELT1')] = (cpdis.cdelt[0], 'Coordinate increment along axis')\n985             header[str('CDELT2')] = (cpdis.cdelt[1], 'Coordinate increment along axis')\n986             image.ver = int(hdulist[0].header[str('{0}{1:d}.EXTVER').format(d_kw, num)])\n987             hdulist.append(image)\n988 \n989         write_dist(1, self.cpdis1)\n990         write_dist(2, self.cpdis2)\n991 \n992     def _remove_sip_kw(self, header):\n993         \"\"\"\n994         Remove SIP information from a header.\n995         \"\"\"\n996         # Never pass SIP coefficients to wcslib\n997         # CTYPE must be passed with -SIP to wcslib\n998         for key in (m.group() for m in map(SIP_KW.match, list(header))\n999                     if m is not None):\n1000             del header[key]\n1001 \n1002     def _read_sip_kw(self, header, wcskey=\"\"):\n1003         \"\"\"\n1004         Reads `SIP`_ header keywords and returns a `~astropy.wcs.Sip`\n1005         object.\n1006 \n1007         If no `SIP`_ header keywords are found, ``None`` is returned.\n1008         \"\"\"\n1009         if isinstance(header, (str, bytes)):\n1010             # TODO: Parse SIP from a string without pyfits around\n1011             return None\n1012 \n1013         if str(\"A_ORDER\") in header and header[str('A_ORDER')] > 1:\n1014             if str(\"B_ORDER\") not in header:\n1015                 raise ValueError(\n1016                     \"A_ORDER provided without corresponding B_ORDER \"\n1017                     \"keyword for SIP distortion\")\n1018 \n1019             m = int(header[str(\"A_ORDER\")])\n1020             a = np.zeros((m + 1, m + 1), np.double)\n1021             for i in range(m + 1):\n1022                 for j in range(m - i + 1):\n1023                     key = str(\"A_{0}_{1}\").format(i, j)\n1024                     if key in header:\n1025                         a[i, j] = header[key]\n1026                         del header[key]\n1027 \n1028             m = int(header[str(\"B_ORDER\")])\n1029             if m > 1:\n1030                 b = np.zeros((m + 1, m + 1), np.double)\n1031                 for i in range(m + 1):\n1032                     for j in range(m - i + 1):\n1033                         key = str(\"B_{0}_{1}\").format(i, j)\n1034                         if key in header:\n1035                             b[i, j] = header[key]\n1036                             del header[key]\n1037             else:\n1038                 a = None\n1039                 b = None\n1040 \n1041             del header[str('A_ORDER')]\n1042             del header[str('B_ORDER')]\n1043 \n1044             ctype = [header['CTYPE{0}{1}'.format(nax, wcskey)] for nax in range(1, self.naxis + 1)]\n1045             if any(not ctyp.endswith('-SIP') for ctyp in ctype):\n1046                 message = \"\"\"\n1047                 Inconsistent SIP distortion information is present in the FITS header and the WCS object:\n1048                 SIP coefficients were detected, but CTYPE is missing a \"-SIP\" suffix.\n1049                 astropy.wcs is using the SIP distortion coefficients,\n1050                 therefore the coordinates calculated here might be incorrect.\n1051 \n1052                 If you do not want to apply the SIP distortion coefficients,\n1053                 please remove the SIP coefficients from the FITS header or the\n1054                 WCS object.  As an example, if the image is already distortion-corrected\n1055                 (e.g., drizzled) then distortion components should not apply and the SIP\n1056                 coefficients should be removed.\n1057 \n1058                 While the SIP distortion coefficients are being applied here, if that was indeed the intent,\n1059                 for consistency please append \"-SIP\" to the CTYPE in the FITS header or the WCS object.\n1060 \n1061                 \"\"\"\n1062                 log.info(message)\n1063         elif str(\"B_ORDER\") in header and header[str('B_ORDER')] > 1:\n1064             raise ValueError(\n1065                 \"B_ORDER provided without corresponding A_ORDER \" +\n1066                 \"keyword for SIP distortion\")\n1067         else:\n1068             a = None\n1069             b = None\n1070 \n1071         if str(\"AP_ORDER\") in header and header[str('AP_ORDER')] > 1:\n1072             if str(\"BP_ORDER\") not in header:\n1073                 raise ValueError(\n1074                     \"AP_ORDER provided without corresponding BP_ORDER \"\n1075                     \"keyword for SIP distortion\")\n1076 \n1077             m = int(header[str(\"AP_ORDER\")])\n1078             ap = np.zeros((m + 1, m + 1), np.double)\n1079             for i in range(m + 1):\n1080                 for j in range(m - i + 1):\n1081                     key = str(\"AP_{0}_{1}\").format(i, j)\n1082                     if key in header:\n1083                         ap[i, j] = header[key]\n1084                         del header[key]\n1085 \n1086             m = int(header[str(\"BP_ORDER\")])\n1087             if m > 1:\n1088                 bp = np.zeros((m + 1, m + 1), np.double)\n1089                 for i in range(m + 1):\n1090                     for j in range(m - i + 1):\n1091                         key = str(\"BP_{0}_{1}\").format(i, j)\n1092                         if key in header:\n1093                             bp[i, j] = header[key]\n1094                             del header[key]\n1095             else:\n1096                 ap = None\n1097                 bp = None\n1098 \n1099             del header[str('AP_ORDER')]\n1100             del header[str('BP_ORDER')]\n1101         elif str(\"BP_ORDER\") in header and header[str('BP_ORDER')] > 1:\n1102             raise ValueError(\n1103                 \"BP_ORDER provided without corresponding AP_ORDER \"\n1104                 \"keyword for SIP distortion\")\n1105         else:\n1106             ap = None\n1107             bp = None\n1108 \n1109         if a is None and b is None and ap is None and bp is None:\n1110             return None\n1111 \n1112         if str(\"CRPIX1{0}\".format(wcskey)) not in header or str(\"CRPIX2{0}\".format(wcskey)) not in header:\n1113             raise ValueError(\n1114                 \"Header has SIP keywords without CRPIX keywords\")\n1115 \n1116         crpix1 = header.get(\"CRPIX1{0}\".format(wcskey))\n1117         crpix2 = header.get(\"CRPIX2{0}\".format(wcskey))\n1118 \n1119         return Sip(a, b, ap, bp, (crpix1, crpix2))\n1120 \n1121     def _write_sip_kw(self):\n1122         \"\"\"\n1123         Write out SIP keywords.  Returns a dictionary of key-value\n1124         pairs.\n1125         \"\"\"\n1126         if self.sip is None:\n1127             return {}\n1128 \n1129         keywords = {}\n1130 \n1131         def write_array(name, a):\n1132             if a is None:\n1133                 return\n1134             size = a.shape[0]\n1135             keywords[str('{0}_ORDER').format(name)] = size - 1\n1136             for i in range(size):\n1137                 for j in range(size - i):\n1138                     if a[i, j] != 0.0:\n1139                         keywords[\n1140                             str('{0}_{1:d}_{2:d}').format(name, i, j)] = a[i, j]\n1141 \n1142         write_array(str('A'), self.sip.a)\n1143         write_array(str('B'), self.sip.b)\n1144         write_array(str('AP'), self.sip.ap)\n1145         write_array(str('BP'), self.sip.bp)\n1146 \n1147         return keywords\n1148 \n1149     def _denormalize_sky(self, sky):\n1150         if self.wcs.lngtyp != 'RA':\n1151             raise ValueError(\n1152                 \"WCS does not have longitude type of 'RA', therefore \" +\n1153                 \"(ra, dec) data can not be used as input\")\n1154         if self.wcs.lattyp != 'DEC':\n1155             raise ValueError(\n1156                 \"WCS does not have longitude type of 'DEC', therefore \" +\n1157                 \"(ra, dec) data can not be used as input\")\n1158         if self.wcs.naxis == 2:\n1159             if self.wcs.lng == 0 and self.wcs.lat == 1:\n1160                 return sky\n1161             elif self.wcs.lng == 1 and self.wcs.lat == 0:\n1162                 # Reverse the order of the columns\n1163                 return sky[:, ::-1]\n1164             else:\n1165                 raise ValueError(\n1166                     \"WCS does not have longitude and latitude celestial \" +\n1167                     \"axes, therefore (ra, dec) data can not be used as input\")\n1168         else:\n1169             if self.wcs.lng < 0 or self.wcs.lat < 0:\n1170                 raise ValueError(\n1171                     \"WCS does not have both longitude and latitude \"\n1172                     \"celestial axes, therefore (ra, dec) data can not be \" +\n1173                     \"used as input\")\n1174             out = np.zeros((sky.shape[0], self.wcs.naxis))\n1175             out[:, self.wcs.lng] = sky[:, 0]\n1176             out[:, self.wcs.lat] = sky[:, 1]\n1177             return out\n1178 \n1179     def _normalize_sky(self, sky):\n1180         if self.wcs.lngtyp != 'RA':\n1181             raise ValueError(\n1182                 \"WCS does not have longitude type of 'RA', therefore \" +\n1183                 \"(ra, dec) data can not be returned\")\n1184         if self.wcs.lattyp != 'DEC':\n1185             raise ValueError(\n1186                 \"WCS does not have longitude type of 'DEC', therefore \" +\n1187                 \"(ra, dec) data can not be returned\")\n1188         if self.wcs.naxis == 2:\n1189             if self.wcs.lng == 0 and self.wcs.lat == 1:\n1190                 return sky\n1191             elif self.wcs.lng == 1 and self.wcs.lat == 0:\n1192                 # Reverse the order of the columns\n1193                 return sky[:, ::-1]\n1194             else:\n1195                 raise ValueError(\n1196                     \"WCS does not have longitude and latitude celestial \"\n1197                     \"axes, therefore (ra, dec) data can not be returned\")\n1198         else:\n1199             if self.wcs.lng < 0 or self.wcs.lat < 0:\n1200                 raise ValueError(\n1201                     \"WCS does not have both longitude and latitude celestial \"\n1202                     \"axes, therefore (ra, dec) data can not be returned\")\n1203             out = np.empty((sky.shape[0], 2))\n1204             out[:, 0] = sky[:, self.wcs.lng]\n1205             out[:, 1] = sky[:, self.wcs.lat]\n1206             return out\n1207 \n1208     def _array_converter(self, func, sky, *args, ra_dec_order=False):\n1209         \"\"\"\n1210         A helper function to support reading either a pair of arrays\n1211         or a single Nx2 array.\n1212         \"\"\"\n1213 \n1214         def _return_list_of_arrays(axes, origin):\n1215             try:\n1216                 axes = np.broadcast_arrays(*axes)\n1217             except ValueError:\n1218                 raise ValueError(\n1219                     \"Coordinate arrays are not broadcastable to each other\")\n1220 \n1221             xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n1222 \n1223             if ra_dec_order and sky == 'input':\n1224                 xy = self._denormalize_sky(xy)\n1225             output = func(xy, origin)\n1226             if ra_dec_order and sky == 'output':\n1227                 output = self._normalize_sky(output)\n1228                 return (output[:, 0].reshape(axes[0].shape),\n1229                         output[:, 1].reshape(axes[0].shape))\n1230             return [output[:, i].reshape(axes[0].shape)\n1231                     for i in range(output.shape[1])]\n1232 \n1233         def _return_single_array(xy, origin):\n1234             if xy.shape[-1] != self.naxis:\n1235                 raise ValueError(\n1236                     \"When providing two arguments, the array must be \"\n1237                     \"of shape (N, {0})\".format(self.naxis))\n1238             if ra_dec_order and sky == 'input':\n1239                 xy = self._denormalize_sky(xy)\n1240             result = func(xy, origin)\n1241             if ra_dec_order and sky == 'output':\n1242                 result = self._normalize_sky(result)\n1243             return result\n1244 \n1245         if len(args) == 2:\n1246             try:\n1247                 xy, origin = args\n1248                 xy = np.asarray(xy)\n1249                 origin = int(origin)\n1250             except Exception:\n1251                 raise TypeError(\n1252                     \"When providing two arguments, they must be \"\n1253                     \"(coords[N][{0}], origin)\".format(self.naxis))\n1254             if self.naxis == 1 and len(xy.shape) == 1:\n1255                 return _return_list_of_arrays([xy], origin)\n1256             return _return_single_array(xy, origin)\n1257 \n1258         elif len(args) == self.naxis + 1:\n1259             axes = args[:-1]\n1260             origin = args[-1]\n1261             try:\n1262                 axes = [np.asarray(x) for x in axes]\n1263                 origin = int(origin)\n1264             except Exception:\n1265                 raise TypeError(\n1266                     \"When providing more than two arguments, they must be \" +\n1267                     \"a 1-D array for each axis, followed by an origin.\")\n1268 \n1269             return _return_list_of_arrays(axes, origin)\n1270 \n1271         raise TypeError(\n1272             \"WCS projection has {0} dimensions, so expected 2 (an Nx{0} array \"\n1273             \"and the origin argument) or {1} arguments (the position in each \"\n1274             \"dimension, and the origin argument). Instead, {2} arguments were \"\n1275             \"given.\".format(\n1276                 self.naxis, self.naxis + 1, len(args)))\n1277 \n1278     def all_pix2world(self, *args, **kwargs):\n1279         return self._array_converter(\n1280             self._all_pix2world, 'output', *args, **kwargs)\n1281     all_pix2world.__doc__ = \"\"\"\n1282         Transforms pixel coordinates to world coordinates.\n1283 \n1284         Performs all of the following in series:\n1285 \n1286             - Detector to image plane correction (if present in the\n1287               FITS file)\n1288 \n1289             - `SIP`_ distortion correction (if present in the FITS\n1290               file)\n1291 \n1292             - `distortion paper`_ table-lookup correction (if present\n1293               in the FITS file)\n1294 \n1295             - `wcslib`_ \"core\" WCS transformation\n1296 \n1297         Parameters\n1298         ----------\n1299         {0}\n1300 \n1301             For a transformation that is not two-dimensional, the\n1302             two-argument form must be used.\n1303 \n1304         {1}\n1305 \n1306         Returns\n1307         -------\n1308 \n1309         {2}\n1310 \n1311         Notes\n1312         -----\n1313         The order of the axes for the result is determined by the\n1314         ``CTYPEia`` keywords in the FITS header, therefore it may not\n1315         always be of the form (*ra*, *dec*).  The\n1316         `~astropy.wcs.Wcsprm.lat`, `~astropy.wcs.Wcsprm.lng`,\n1317         `~astropy.wcs.Wcsprm.lattyp` and `~astropy.wcs.Wcsprm.lngtyp`\n1318         members can be used to determine the order of the axes.\n1319 \n1320         Raises\n1321         ------\n1322         MemoryError\n1323             Memory allocation failed.\n1324 \n1325         SingularMatrixError\n1326             Linear transformation matrix is singular.\n1327 \n1328         InconsistentAxisTypesError\n1329             Inconsistent or unrecognized coordinate axis types.\n1330 \n1331         ValueError\n1332             Invalid parameter value.\n1333 \n1334         ValueError\n1335             Invalid coordinate transformation parameters.\n1336 \n1337         ValueError\n1338             x- and y-coordinate arrays are not the same size.\n1339 \n1340         InvalidTransformError\n1341             Invalid coordinate transformation parameters.\n1342 \n1343         InvalidTransformError\n1344             Ill-conditioned coordinate transformation parameters.\n1345         \"\"\".format(__.TWO_OR_MORE_ARGS('naxis', 8),\n1346                    __.RA_DEC_ORDER(8),\n1347                    __.RETURNS('sky coordinates, in degrees', 8))\n1348 \n1349     def wcs_pix2world(self, *args, **kwargs):\n1350         if self.wcs is None:\n1351             raise ValueError(\"No basic WCS settings were created.\")\n1352         return self._array_converter(\n1353             lambda xy, o: self.wcs.p2s(xy, o)['world'],\n1354             'output', *args, **kwargs)\n1355     wcs_pix2world.__doc__ = \"\"\"\n1356         Transforms pixel coordinates to world coordinates by doing\n1357         only the basic `wcslib`_ transformation.\n1358 \n1359         No `SIP`_ or `distortion paper`_ table lookup correction is\n1360         applied.  To perform distortion correction, see\n1361         `~astropy.wcs.WCS.all_pix2world`,\n1362         `~astropy.wcs.WCS.sip_pix2foc`, `~astropy.wcs.WCS.p4_pix2foc`,\n1363         or `~astropy.wcs.WCS.pix2foc`.\n1364 \n1365         Parameters\n1366         ----------\n1367         {0}\n1368 \n1369             For a transformation that is not two-dimensional, the\n1370             two-argument form must be used.\n1371 \n1372         {1}\n1373 \n1374         Returns\n1375         -------\n1376 \n1377         {2}\n1378 \n1379         Raises\n1380         ------\n1381         MemoryError\n1382             Memory allocation failed.\n1383 \n1384         SingularMatrixError\n1385             Linear transformation matrix is singular.\n1386 \n1387         InconsistentAxisTypesError\n1388             Inconsistent or unrecognized coordinate axis types.\n1389 \n1390         ValueError\n1391             Invalid parameter value.\n1392 \n1393         ValueError\n1394             Invalid coordinate transformation parameters.\n1395 \n1396         ValueError\n1397             x- and y-coordinate arrays are not the same size.\n1398 \n1399         InvalidTransformError\n1400             Invalid coordinate transformation parameters.\n1401 \n1402         InvalidTransformError\n1403             Ill-conditioned coordinate transformation parameters.\n1404 \n1405         Notes\n1406         -----\n1407         The order of the axes for the result is determined by the\n1408         ``CTYPEia`` keywords in the FITS header, therefore it may not\n1409         always be of the form (*ra*, *dec*).  The\n1410         `~astropy.wcs.Wcsprm.lat`, `~astropy.wcs.Wcsprm.lng`,\n1411         `~astropy.wcs.Wcsprm.lattyp` and `~astropy.wcs.Wcsprm.lngtyp`\n1412         members can be used to determine the order of the axes.\n1413 \n1414         \"\"\".format(__.TWO_OR_MORE_ARGS('naxis', 8),\n1415                    __.RA_DEC_ORDER(8),\n1416                    __.RETURNS('world coordinates, in degrees', 8))\n1417 \n1418     def _all_world2pix(self, world, origin, tolerance, maxiter, adaptive,\n1419                        detect_divergence, quiet):\n1420         # ############################################################\n1421         # #          DESCRIPTION OF THE NUMERICAL METHOD            ##\n1422         # ############################################################\n1423         # In this section I will outline the method of solving\n1424         # the inverse problem of converting world coordinates to\n1425         # pixel coordinates (*inverse* of the direct transformation\n1426         # `all_pix2world`) and I will summarize some of the aspects\n1427         # of the method proposed here and some of the issues of the\n1428         # original `all_world2pix` (in relation to this method)\n1429         # discussed in https://github.com/astropy/astropy/issues/1977\n1430         # A more detailed discussion can be found here:\n1431         # https://github.com/astropy/astropy/pull/2373\n1432         #\n1433         #\n1434         #                  ### Background ###\n1435         #\n1436         #\n1437         # I will refer here to the [SIP Paper]\n1438         # (http://fits.gsfc.nasa.gov/registry/sip/SIP_distortion_v1_0.pdf).\n1439         # According to this paper, the effect of distortions as\n1440         # described in *their* equation (1) is:\n1441         #\n1442         # (1)   x = CD*(u+f(u)),\n1443         #\n1444         # where `x` is a *vector* of \"intermediate spherical\n1445         # coordinates\" (equivalent to (x,y) in the paper) and `u`\n1446         # is a *vector* of \"pixel coordinates\", and `f` is a vector\n1447         # function describing geometrical distortions\n1448         # (see equations 2 and 3 in SIP Paper.\n1449         # However, I prefer to use `w` for \"intermediate world\n1450         # coordinates\", `x` for pixel coordinates, and assume that\n1451         # transformation `W` performs the **linear**\n1452         # (CD matrix + projection onto celestial sphere) part of the\n1453         # conversion from pixel coordinates to world coordinates.\n1454         # Then we can re-write (1) as:\n1455         #\n1456         # (2)   w = W*(x+f(x)) = T(x)\n1457         #\n1458         # In `astropy.wcs.WCS` transformation `W` is represented by\n1459         # the `wcs_pix2world` member, while the combined (\"total\")\n1460         # transformation (linear part + distortions) is performed by\n1461         # `all_pix2world`. Below I summarize the notations and their\n1462         # equivalents in `astropy.wcs.WCS`:\n1463         #\n1464         # | Equation term | astropy.WCS/meaning          |\n1465         # | ------------- | ---------------------------- |\n1466         # | `x`           | pixel coordinates            |\n1467         # | `w`           | world coordinates            |\n1468         # | `W`           | `wcs_pix2world()`            |\n1469         # | `W^{-1}`      | `wcs_world2pix()`            |\n1470         # | `T`           | `all_pix2world()`            |\n1471         # | `x+f(x)`      | `pix2foc()`                  |\n1472         #\n1473         #\n1474         #      ### Direct Solving of Equation (2)  ###\n1475         #\n1476         #\n1477         # In order to find the pixel coordinates that correspond to\n1478         # given world coordinates `w`, it is necessary to invert\n1479         # equation (2): `x=T^{-1}(w)`, or solve equation `w==T(x)`\n1480         # for `x`. However, this approach has the following\n1481         # disadvantages:\n1482         #    1. It requires unnecessary transformations (see next\n1483         #       section).\n1484         #    2. It is prone to \"RA wrapping\" issues as described in\n1485         # https://github.com/astropy/astropy/issues/1977\n1486         # (essentially because `all_pix2world` may return points with\n1487         # a different phase than user's input `w`).\n1488         #\n1489         #\n1490         #      ### Description of the Method Used here ###\n1491         #\n1492         #\n1493         # By applying inverse linear WCS transformation (`W^{-1}`)\n1494         # to both sides of equation (2) and introducing notation `x'`\n1495         # (prime) for the pixels coordinates obtained from the world\n1496         # coordinates by applying inverse *linear* WCS transformation\n1497         # (\"focal plane coordinates\"):\n1498         #\n1499         # (3)   x' = W^{-1}(w)\n1500         #\n1501         # we obtain the following equation:\n1502         #\n1503         # (4)   x' = x+f(x),\n1504         #\n1505         # or,\n1506         #\n1507         # (5)   x = x'-f(x)\n1508         #\n1509         # This equation is well suited for solving using the method\n1510         # of fixed-point iterations\n1511         # (http://en.wikipedia.org/wiki/Fixed-point_iteration):\n1512         #\n1513         # (6)   x_{i+1} = x'-f(x_i)\n1514         #\n1515         # As an initial value of the pixel coordinate `x_0` we take\n1516         # \"focal plane coordinate\" `x'=W^{-1}(w)=wcs_world2pix(w)`.\n1517         # We stop iterations when `|x_{i+1}-x_i|<tolerance`. We also\n1518         # consider the process to be diverging if\n1519         # `|x_{i+1}-x_i|>|x_i-x_{i-1}|`\n1520         # **when** `|x_{i+1}-x_i|>=tolerance` (when current\n1521         # approximation is close to the true solution,\n1522         # `|x_{i+1}-x_i|>|x_i-x_{i-1}|` may be due to rounding errors\n1523         # and we ignore such \"divergences\" when\n1524         # `|x_{i+1}-x_i|<tolerance`). It may appear that checking for\n1525         # `|x_{i+1}-x_i|<tolerance` in order to ignore divergence is\n1526         # unnecessary since the iterative process should stop anyway,\n1527         # however, the proposed implementation of this iterative\n1528         # process is completely vectorized and, therefore, we may\n1529         # continue iterating over *some* points even though they have\n1530         # converged to within a specified tolerance (while iterating\n1531         # over other points that have not yet converged to\n1532         # a solution).\n1533         #\n1534         # In order to efficiently implement iterative process (6)\n1535         # using available methods in `astropy.wcs.WCS`, we add and\n1536         # subtract `x_i` from the right side of equation (6):\n1537         #\n1538         # (7)   x_{i+1} = x'-(x_i+f(x_i))+x_i = x'-pix2foc(x_i)+x_i,\n1539         #\n1540         # where `x'=wcs_world2pix(w)` and it is computed only *once*\n1541         # before the beginning of the iterative process (and we also\n1542         # set `x_0=x'`). By using `pix2foc` at each iteration instead\n1543         # of `all_pix2world` we get about 25% increase in performance\n1544         # (by not performing the linear `W` transformation at each\n1545         # step) and we also avoid the \"RA wrapping\" issue described\n1546         # above (by working in focal plane coordinates and avoiding\n1547         # pix->world transformations).\n1548         #\n1549         # As an added benefit, the process converges to the correct\n1550         # solution in just one iteration when distortions are not\n1551         # present (compare to\n1552         # https://github.com/astropy/astropy/issues/1977 and\n1553         # https://github.com/astropy/astropy/pull/2294): in this case\n1554         # `pix2foc` is the identical transformation\n1555         # `x_i=pix2foc(x_i)` and from equation (7) we get:\n1556         #\n1557         # x' = x_0 = wcs_world2pix(w)\n1558         # x_1 = x' - pix2foc(x_0) + x_0 = x' - pix2foc(x') + x' = x'\n1559         #     = wcs_world2pix(w) = x_0\n1560         # =>\n1561         # |x_1-x_0| = 0 < tolerance (with tolerance > 0)\n1562         #\n1563         # However, for performance reasons, it is still better to\n1564         # avoid iterations altogether and return the exact linear\n1565         # solution (`wcs_world2pix`) right-away when non-linear\n1566         # distortions are not present by checking that attributes\n1567         # `sip`, `cpdis1`, `cpdis2`, `det2im1`, and `det2im2` are\n1568         # *all* `None`.\n1569         #\n1570         #\n1571         #         ### Outline of the Algorithm ###\n1572         #\n1573         #\n1574         # While the proposed code is relatively long (considering\n1575         # the simplicity of the algorithm), this is due to: 1)\n1576         # checking if iterative solution is necessary at all; 2)\n1577         # checking for divergence; 3) re-implementation of the\n1578         # completely vectorized algorithm as an \"adaptive\" vectorized\n1579         # algorithm (for cases when some points diverge for which we\n1580         # want to stop iterations). In my tests, the adaptive version\n1581         # of the algorithm is about 50% slower than non-adaptive\n1582         # version for all HST images.\n1583         #\n1584         # The essential part of the vectorized non-adaptive algorithm\n1585         # (without divergence and other checks) can be described\n1586         # as follows:\n1587         #\n1588         #     pix0 = self.wcs_world2pix(world, origin)\n1589         #     pix  = pix0.copy() # 0-order solution\n1590         #\n1591         #     for k in range(maxiter):\n1592         #         # find correction to the previous solution:\n1593         #         dpix = self.pix2foc(pix, origin) - pix0\n1594         #\n1595         #         # compute norm (L2) of the correction:\n1596         #         dn = np.linalg.norm(dpix, axis=1)\n1597         #\n1598         #         # apply correction:\n1599         #         pix -= dpix\n1600         #\n1601         #         # check convergence:\n1602         #         if np.max(dn) < tolerance:\n1603         #             break\n1604         #\n1605         #    return pix\n1606         #\n1607         # Here, the input parameter `world` can be a `MxN` array\n1608         # where `M` is the number of coordinate axes in WCS and `N`\n1609         # is the number of points to be converted simultaneously to\n1610         # image coordinates.\n1611         #\n1612         #\n1613         #                ###  IMPORTANT NOTE:  ###\n1614         #\n1615         # If, in the future releases of the `~astropy.wcs`,\n1616         # `pix2foc` will not apply all the required distortion\n1617         # corrections then in the code below, calls to `pix2foc` will\n1618         # have to be replaced with\n1619         # wcs_world2pix(all_pix2world(pix_list, origin), origin)\n1620         #\n1621 \n1622         # ############################################################\n1623         # #            INITIALIZE ITERATIVE PROCESS:                ##\n1624         # ############################################################\n1625 \n1626         # initial approximation (linear WCS based only)\n1627         pix0 = self.wcs_world2pix(world, origin)\n1628 \n1629         # Check that an iterative solution is required at all\n1630         # (when any of the non-CD-matrix-based corrections are\n1631         # present). If not required return the initial\n1632         # approximation (pix0).\n1633         if self.sip is None and \\\n1634            self.cpdis1 is None and self.cpdis2 is None and \\\n1635            self.det2im1 is None and self.det2im2 is None:\n1636             # No non-WCS corrections detected so\n1637             # simply return initial approximation:\n1638             return pix0\n1639 \n1640         pix = pix0.copy()  # 0-order solution\n1641 \n1642         # initial correction:\n1643         dpix = self.pix2foc(pix, origin) - pix0\n1644 \n1645         # Update initial solution:\n1646         pix -= dpix\n1647 \n1648         # Norm (L2) squared of the correction:\n1649         dn = np.sum(dpix*dpix, axis=1)\n1650         dnprev = dn.copy()  # if adaptive else dn\n1651         tol2 = tolerance**2\n1652 \n1653         # Prepare for iterative process\n1654         k = 1\n1655         ind = None\n1656         inddiv = None\n1657 \n1658         # Turn off numpy runtime warnings for 'invalid' and 'over':\n1659         old_invalid = np.geterr()['invalid']\n1660         old_over = np.geterr()['over']\n1661         np.seterr(invalid='ignore', over='ignore')\n1662 \n1663         # ############################################################\n1664         # #                NON-ADAPTIVE ITERATIONS:                 ##\n1665         # ############################################################\n1666         if not adaptive:\n1667             # Fixed-point iterations:\n1668             while (np.nanmax(dn) >= tol2 and k < maxiter):\n1669                 # Find correction to the previous solution:\n1670                 dpix = self.pix2foc(pix, origin) - pix0\n1671 \n1672                 # Compute norm (L2) squared of the correction:\n1673                 dn = np.sum(dpix*dpix, axis=1)\n1674 \n1675                 # Check for divergence (we do this in two stages\n1676                 # to optimize performance for the most common\n1677                 # scenario when successive approximations converge):\n1678                 if detect_divergence:\n1679                     divergent = (dn >= dnprev)\n1680                     if np.any(divergent):\n1681                         # Find solutions that have not yet converged:\n1682                         slowconv = (dn >= tol2)\n1683                         inddiv, = np.where(divergent & slowconv)\n1684 \n1685                         if inddiv.shape[0] > 0:\n1686                             # Update indices of elements that\n1687                             # still need correction:\n1688                             conv = (dn < dnprev)\n1689                             iconv = np.where(conv)\n1690 \n1691                             # Apply correction:\n1692                             dpixgood = dpix[iconv]\n1693                             pix[iconv] -= dpixgood\n1694                             dpix[iconv] = dpixgood\n1695 \n1696                             # For the next iteration choose\n1697                             # non-divergent points that have not yet\n1698                             # converged to the requested accuracy:\n1699                             ind, = np.where(slowconv & conv)\n1700                             pix0 = pix0[ind]\n1701                             dnprev[ind] = dn[ind]\n1702                             k += 1\n1703 \n1704                             # Switch to adaptive iterations:\n1705                             adaptive = True\n1706                             break\n1707                     # Save current correction magnitudes for later:\n1708                     dnprev = dn\n1709 \n1710                 # Apply correction:\n1711                 pix -= dpix\n1712                 k += 1\n1713 \n1714         # ############################################################\n1715         # #                  ADAPTIVE ITERATIONS:                   ##\n1716         # ############################################################\n1717         if adaptive:\n1718             if ind is None:\n1719                 ind, = np.where(np.isfinite(pix).all(axis=1))\n1720                 pix0 = pix0[ind]\n1721 \n1722             # \"Adaptive\" fixed-point iterations:\n1723             while (ind.shape[0] > 0 and k < maxiter):\n1724                 # Find correction to the previous solution:\n1725                 dpixnew = self.pix2foc(pix[ind], origin) - pix0\n1726 \n1727                 # Compute norm (L2) of the correction:\n1728                 dnnew = np.sum(np.square(dpixnew), axis=1)\n1729 \n1730                 # Bookeeping of corrections:\n1731                 dnprev[ind] = dn[ind].copy()\n1732                 dn[ind] = dnnew\n1733 \n1734                 if detect_divergence:\n1735                     # Find indices of pixels that are converging:\n1736                     conv = (dnnew < dnprev[ind])\n1737                     iconv = np.where(conv)\n1738                     iiconv = ind[iconv]\n1739 \n1740                     # Apply correction:\n1741                     dpixgood = dpixnew[iconv]\n1742                     pix[iiconv] -= dpixgood\n1743                     dpix[iiconv] = dpixgood\n1744 \n1745                     # Find indices of solutions that have not yet\n1746                     # converged to the requested accuracy\n1747                     # AND that do not diverge:\n1748                     subind, = np.where((dnnew >= tol2) & conv)\n1749 \n1750                 else:\n1751                     # Apply correction:\n1752                     pix[ind] -= dpixnew\n1753                     dpix[ind] = dpixnew\n1754 \n1755                     # Find indices of solutions that have not yet\n1756                     # converged to the requested accuracy:\n1757                     subind, = np.where(dnnew >= tol2)\n1758 \n1759                 # Choose solutions that need more iterations:\n1760                 ind = ind[subind]\n1761                 pix0 = pix0[subind]\n1762 \n1763                 k += 1\n1764 \n1765         # ############################################################\n1766         # #         FINAL DETECTION OF INVALID, DIVERGING,          ##\n1767         # #         AND FAILED-TO-CONVERGE POINTS                   ##\n1768         # ############################################################\n1769         # Identify diverging and/or invalid points:\n1770         invalid = ((~np.all(np.isfinite(pix), axis=1)) &\n1771                    (np.all(np.isfinite(world), axis=1)))\n1772 \n1773         # When detect_divergence==False, dnprev is outdated\n1774         # (it is the norm of the very first correction).\n1775         # Still better than nothing...\n1776         inddiv, = np.where(((dn >= tol2) & (dn >= dnprev)) | invalid)\n1777         if inddiv.shape[0] == 0:\n1778             inddiv = None\n1779 \n1780         # Identify points that did not converge within 'maxiter'\n1781         # iterations:\n1782         if k >= maxiter:\n1783             ind, = np.where((dn >= tol2) & (dn < dnprev) & (~invalid))\n1784             if ind.shape[0] == 0:\n1785                 ind = None\n1786         else:\n1787             ind = None\n1788 \n1789         # Restore previous numpy error settings:\n1790         np.seterr(invalid=old_invalid, over=old_over)\n1791 \n1792         # ############################################################\n1793         # #  RAISE EXCEPTION IF DIVERGING OR TOO SLOWLY CONVERGING  ##\n1794         # #  DATA POINTS HAVE BEEN DETECTED:                        ##\n1795         # ############################################################\n1796         if (ind is not None or inddiv is not None) and not quiet:\n1797             if inddiv is None:\n1798                 raise NoConvergence(\n1799                     \"'WCS.all_world2pix' failed to \"\n1800                     \"converge to the requested accuracy after {:d} \"\n1801                     \"iterations.\".format(k), best_solution=pix,\n1802                     accuracy=np.abs(dpix), niter=k,\n1803                     slow_conv=ind, divergent=None)\n1804             else:\n1805                 raise NoConvergence(\n1806                     \"'WCS.all_world2pix' failed to \"\n1807                     \"converge to the requested accuracy.\\n\"\n1808                     \"After {0:d} iterations, the solution is diverging \"\n1809                     \"at least for one input point.\"\n1810                     .format(k), best_solution=pix,\n1811                     accuracy=np.abs(dpix), niter=k,\n1812                     slow_conv=ind, divergent=inddiv)\n1813 \n1814         return pix\n1815 \n1816     def all_world2pix(self, *args, tolerance=1e-4, maxiter=20, adaptive=False,\n1817                       detect_divergence=True, quiet=False, **kwargs):\n1818         if self.wcs is None:\n1819             raise ValueError(\"No basic WCS settings were created.\")\n1820 \n1821         return self._array_converter(\n1822             lambda *args, **kwargs:\n1823             self._all_world2pix(\n1824                 *args, tolerance=tolerance, maxiter=maxiter,\n1825                 adaptive=adaptive, detect_divergence=detect_divergence,\n1826                 quiet=quiet),\n1827             'input', *args, **kwargs\n1828         )\n1829 \n1830     all_world2pix.__doc__ = \"\"\"\n1831         all_world2pix(*arg, accuracy=1.0e-4, maxiter=20,\n1832         adaptive=False, detect_divergence=True, quiet=False)\n1833 \n1834         Transforms world coordinates to pixel coordinates, using\n1835         numerical iteration to invert the full forward transformation\n1836         `~astropy.wcs.WCS.all_pix2world` with complete\n1837         distortion model.\n1838 \n1839 \n1840         Parameters\n1841         ----------\n1842         {0}\n1843 \n1844             For a transformation that is not two-dimensional, the\n1845             two-argument form must be used.\n1846 \n1847         {1}\n1848 \n1849         tolerance : float, optional (Default = 1.0e-4)\n1850             Tolerance of solution. Iteration terminates when the\n1851             iterative solver estimates that the \"true solution\" is\n1852             within this many pixels current estimate, more\n1853             specifically, when the correction to the solution found\n1854             during the previous iteration is smaller\n1855             (in the sense of the L2 norm) than ``tolerance``.\n1856 \n1857         maxiter : int, optional (Default = 20)\n1858             Maximum number of iterations allowed to reach a solution.\n1859 \n1860         quiet : bool, optional (Default = False)\n1861             Do not throw :py:class:`NoConvergence` exceptions when\n1862             the method does not converge to a solution with the\n1863             required accuracy within a specified number of maximum\n1864             iterations set by ``maxiter`` parameter. Instead,\n1865             simply return the found solution.\n1866 \n1867         Other Parameters\n1868         ----------------\n1869         adaptive : bool, optional (Default = False)\n1870             Specifies whether to adaptively select only points that\n1871             did not converge to a solution within the required\n1872             accuracy for the next iteration. Default is recommended\n1873             for HST as well as most other instruments.\n1874 \n1875             .. note::\n1876                The :py:meth:`all_world2pix` uses a vectorized\n1877                implementation of the method of consecutive\n1878                approximations (see ``Notes`` section below) in which it\n1879                iterates over *all* input points *regardless* until\n1880                the required accuracy has been reached for *all* input\n1881                points. In some cases it may be possible that\n1882                *almost all* points have reached the required accuracy\n1883                but there are only a few of input data points for\n1884                which additional iterations may be needed (this\n1885                depends mostly on the characteristics of the geometric\n1886                distortions for a given instrument). In this situation\n1887                it may be advantageous to set ``adaptive`` = `True` in\n1888                which case :py:meth:`all_world2pix` will continue\n1889                iterating *only* over the points that have not yet\n1890                converged to the required accuracy. However, for the\n1891                HST's ACS/WFC detector, which has the strongest\n1892                distortions of all HST instruments, testing has\n1893                shown that enabling this option would lead to a about\n1894                50-100% penalty in computational time (depending on\n1895                specifics of the image, geometric distortions, and\n1896                number of input points to be converted). Therefore,\n1897                for HST and possibly instruments, it is recommended\n1898                to set ``adaptive`` = `False`. The only danger in\n1899                getting this setting wrong will be a performance\n1900                penalty.\n1901 \n1902             .. note::\n1903                When ``detect_divergence`` is `True`,\n1904                :py:meth:`all_world2pix` will automatically switch\n1905                to the adaptive algorithm once divergence has been\n1906                detected.\n1907 \n1908         detect_divergence : bool, optional (Default = True)\n1909             Specifies whether to perform a more detailed analysis\n1910             of the convergence to a solution. Normally\n1911             :py:meth:`all_world2pix` may not achieve the required\n1912             accuracy if either the ``tolerance`` or ``maxiter`` arguments\n1913             are too low. However, it may happen that for some\n1914             geometric distortions the conditions of convergence for\n1915             the the method of consecutive approximations used by\n1916             :py:meth:`all_world2pix` may not be satisfied, in which\n1917             case consecutive approximations to the solution will\n1918             diverge regardless of the ``tolerance`` or ``maxiter``\n1919             settings.\n1920 \n1921             When ``detect_divergence`` is `False`, these divergent\n1922             points will be detected as not having achieved the\n1923             required accuracy (without further details). In addition,\n1924             if ``adaptive`` is `False` then the algorithm will not\n1925             know that the solution (for specific points) is diverging\n1926             and will continue iterating and trying to \"improve\"\n1927             diverging solutions. This may result in ``NaN`` or\n1928             ``Inf`` values in the return results (in addition to a\n1929             performance penalties). Even when ``detect_divergence``\n1930             is `False`, :py:meth:`all_world2pix`, at the end of the\n1931             iterative process, will identify invalid results\n1932             (``NaN`` or ``Inf``) as \"diverging\" solutions and will\n1933             raise :py:class:`NoConvergence` unless the ``quiet``\n1934             parameter is set to `True`.\n1935 \n1936             When ``detect_divergence`` is `True`,\n1937             :py:meth:`all_world2pix` will detect points for which\n1938             current correction to the coordinates is larger than\n1939             the correction applied during the previous iteration\n1940             **if** the requested accuracy **has not yet been\n1941             achieved**. In this case, if ``adaptive`` is `True`,\n1942             these points will be excluded from further iterations and\n1943             if ``adaptive`` is `False`, :py:meth:`all_world2pix` will\n1944             automatically switch to the adaptive algorithm. Thus, the\n1945             reported divergent solution will be the latest converging\n1946             solution computed immediately *before* divergence\n1947             has been detected.\n1948 \n1949             .. note::\n1950                When accuracy has been achieved, small increases in\n1951                current corrections may be possible due to rounding\n1952                errors (when ``adaptive`` is `False`) and such\n1953                increases will be ignored.\n1954 \n1955             .. note::\n1956                Based on our testing using HST ACS/WFC images, setting\n1957                ``detect_divergence`` to `True` will incur about 5-20%\n1958                performance penalty with the larger penalty\n1959                corresponding to ``adaptive`` set to `True`.\n1960                Because the benefits of enabling this\n1961                feature outweigh the small performance penalty,\n1962                especially when ``adaptive`` = `False`, it is\n1963                recommended to set ``detect_divergence`` to `True`,\n1964                unless extensive testing of the distortion models for\n1965                images from specific instruments show a good stability\n1966                of the numerical method for a wide range of\n1967                coordinates (even outside the image itself).\n1968 \n1969             .. note::\n1970                Indices of the diverging inverse solutions will be\n1971                reported in the ``divergent`` attribute of the\n1972                raised :py:class:`NoConvergence` exception object.\n1973 \n1974         Returns\n1975         -------\n1976 \n1977         {2}\n1978 \n1979         Notes\n1980         -----\n1981         The order of the axes for the input world array is determined by\n1982         the ``CTYPEia`` keywords in the FITS header, therefore it may\n1983         not always be of the form (*ra*, *dec*).  The\n1984         `~astropy.wcs.Wcsprm.lat`, `~astropy.wcs.Wcsprm.lng`,\n1985         `~astropy.wcs.Wcsprm.lattyp`, and\n1986         `~astropy.wcs.Wcsprm.lngtyp`\n1987         members can be used to determine the order of the axes.\n1988 \n1989         Using the method of fixed-point iterations approximations we\n1990         iterate starting with the initial approximation, which is\n1991         computed using the non-distortion-aware\n1992         :py:meth:`wcs_world2pix` (or equivalent).\n1993 \n1994         The :py:meth:`all_world2pix` function uses a vectorized\n1995         implementation of the method of consecutive approximations and\n1996         therefore it is highly efficient (>30x) when *all* data points\n1997         that need to be converted from sky coordinates to image\n1998         coordinates are passed at *once*. Therefore, it is advisable,\n1999         whenever possible, to pass as input a long array of all points\n2000         that need to be converted to :py:meth:`all_world2pix` instead\n2001         of calling :py:meth:`all_world2pix` for each data point. Also\n2002         see the note to the ``adaptive`` parameter.\n2003 \n2004         Raises\n2005         ------\n2006         NoConvergence\n2007             The method did not converge to a\n2008             solution to the required accuracy within a specified\n2009             number of maximum iterations set by the ``maxiter``\n2010             parameter. To turn off this exception, set ``quiet`` to\n2011             `True`. Indices of the points for which the requested\n2012             accuracy was not achieved (if any) will be listed in the\n2013             ``slow_conv`` attribute of the\n2014             raised :py:class:`NoConvergence` exception object.\n2015 \n2016             See :py:class:`NoConvergence` documentation for\n2017             more details.\n2018 \n2019         MemoryError\n2020             Memory allocation failed.\n2021 \n2022         SingularMatrixError\n2023             Linear transformation matrix is singular.\n2024 \n2025         InconsistentAxisTypesError\n2026             Inconsistent or unrecognized coordinate axis types.\n2027 \n2028         ValueError\n2029             Invalid parameter value.\n2030 \n2031         ValueError\n2032             Invalid coordinate transformation parameters.\n2033 \n2034         ValueError\n2035             x- and y-coordinate arrays are not the same size.\n2036 \n2037         InvalidTransformError\n2038             Invalid coordinate transformation parameters.\n2039 \n2040         InvalidTransformError\n2041             Ill-conditioned coordinate transformation parameters.\n2042 \n2043         Examples\n2044         --------\n2045         >>> import astropy.io.fits as fits\n2046         >>> import astropy.wcs as wcs\n2047         >>> import numpy as np\n2048         >>> import os\n2049 \n2050         >>> filename = os.path.join(wcs.__path__[0], 'tests/data/j94f05bgq_flt.fits')\n2051         >>> hdulist = fits.open(filename)\n2052         >>> w = wcs.WCS(hdulist[('sci',1)].header, hdulist)\n2053         >>> hdulist.close()\n2054 \n2055         >>> ra, dec = w.all_pix2world([1,2,3], [1,1,1], 1)\n2056         >>> print(ra)  # doctest: +FLOAT_CMP\n2057         [ 5.52645627  5.52649663  5.52653698]\n2058         >>> print(dec)  # doctest: +FLOAT_CMP\n2059         [-72.05171757 -72.05171276 -72.05170795]\n2060         >>> radec = w.all_pix2world([[1,1], [2,1], [3,1]], 1)\n2061         >>> print(radec)  # doctest: +FLOAT_CMP\n2062         [[  5.52645627 -72.05171757]\n2063          [  5.52649663 -72.05171276]\n2064          [  5.52653698 -72.05170795]]\n2065         >>> x, y = w.all_world2pix(ra, dec, 1)\n2066         >>> print(x)  # doctest: +FLOAT_CMP\n2067         [ 1.00000238  2.00000237  3.00000236]\n2068         >>> print(y)  # doctest: +FLOAT_CMP\n2069         [ 0.99999996  0.99999997  0.99999997]\n2070         >>> xy = w.all_world2pix(radec, 1)\n2071         >>> print(xy)  # doctest: +FLOAT_CMP\n2072         [[ 1.00000238  0.99999996]\n2073          [ 2.00000237  0.99999997]\n2074          [ 3.00000236  0.99999997]]\n2075         >>> xy = w.all_world2pix(radec, 1, maxiter=3,\n2076         ...                      tolerance=1.0e-10, quiet=False)\n2077         Traceback (most recent call last):\n2078         ...\n2079         NoConvergence: 'WCS.all_world2pix' failed to converge to the\n2080         requested accuracy. After 3 iterations, the solution is\n2081         diverging at least for one input point.\n2082 \n2083         >>> # Now try to use some diverging data:\n2084         >>> divradec = w.all_pix2world([[1.0, 1.0],\n2085         ...                             [10000.0, 50000.0],\n2086         ...                             [3.0, 1.0]], 1)\n2087         >>> print(divradec)  # doctest: +FLOAT_CMP\n2088         [[  5.52645627 -72.05171757]\n2089          [  7.15976932 -70.8140779 ]\n2090          [  5.52653698 -72.05170795]]\n2091 \n2092         >>> # First, turn detect_divergence on:\n2093         >>> try:  # doctest: +FLOAT_CMP\n2094         ...   xy = w.all_world2pix(divradec, 1, maxiter=20,\n2095         ...                        tolerance=1.0e-4, adaptive=False,\n2096         ...                        detect_divergence=True,\n2097         ...                        quiet=False)\n2098         ... except wcs.wcs.NoConvergence as e:\n2099         ...   print(\"Indices of diverging points: {{0}}\"\n2100         ...         .format(e.divergent))\n2101         ...   print(\"Indices of poorly converging points: {{0}}\"\n2102         ...         .format(e.slow_conv))\n2103         ...   print(\"Best solution:\\\\n{{0}}\".format(e.best_solution))\n2104         ...   print(\"Achieved accuracy:\\\\n{{0}}\".format(e.accuracy))\n2105         Indices of diverging points: [1]\n2106         Indices of poorly converging points: None\n2107         Best solution:\n2108         [[  1.00000238e+00   9.99999965e-01]\n2109          [ -1.99441636e+06   1.44309097e+06]\n2110          [  3.00000236e+00   9.99999966e-01]]\n2111         Achieved accuracy:\n2112         [[  6.13968380e-05   8.59638593e-07]\n2113          [  8.59526812e+11   6.61713548e+11]\n2114          [  6.09398446e-05   8.38759724e-07]]\n2115         >>> raise e\n2116         Traceback (most recent call last):\n2117         ...\n2118         NoConvergence: 'WCS.all_world2pix' failed to converge to the\n2119         requested accuracy.  After 5 iterations, the solution is\n2120         diverging at least for one input point.\n2121 \n2122         >>> # This time turn detect_divergence off:\n2123         >>> try:  # doctest: +FLOAT_CMP\n2124         ...   xy = w.all_world2pix(divradec, 1, maxiter=20,\n2125         ...                        tolerance=1.0e-4, adaptive=False,\n2126         ...                        detect_divergence=False,\n2127         ...                        quiet=False)\n2128         ... except wcs.wcs.NoConvergence as e:\n2129         ...   print(\"Indices of diverging points: {{0}}\"\n2130         ...         .format(e.divergent))\n2131         ...   print(\"Indices of poorly converging points: {{0}}\"\n2132         ...         .format(e.slow_conv))\n2133         ...   print(\"Best solution:\\\\n{{0}}\".format(e.best_solution))\n2134         ...   print(\"Achieved accuracy:\\\\n{{0}}\".format(e.accuracy))\n2135         Indices of diverging points: [1]\n2136         Indices of poorly converging points: None\n2137         Best solution:\n2138         [[ 1.00000009  1.        ]\n2139          [        nan         nan]\n2140          [ 3.00000009  1.        ]]\n2141         Achieved accuracy:\n2142         [[  2.29417358e-06   3.21222995e-08]\n2143          [             nan              nan]\n2144          [  2.27407877e-06   3.13005639e-08]]\n2145         >>> raise e\n2146         Traceback (most recent call last):\n2147         ...\n2148         NoConvergence: 'WCS.all_world2pix' failed to converge to the\n2149         requested accuracy.  After 6 iterations, the solution is\n2150         diverging at least for one input point.\n2151 \n2152         \"\"\".format(__.TWO_OR_MORE_ARGS('naxis', 8),\n2153                    __.RA_DEC_ORDER(8),\n2154                    __.RETURNS('pixel coordinates', 8))\n2155 \n2156     def wcs_world2pix(self, *args, **kwargs):\n2157         if self.wcs is None:\n2158             raise ValueError(\"No basic WCS settings were created.\")\n2159         return self._array_converter(\n2160             lambda xy, o: self.wcs.s2p(xy, o)['pixcrd'],\n2161             'input', *args, **kwargs)\n2162     wcs_world2pix.__doc__ = \"\"\"\n2163         Transforms world coordinates to pixel coordinates, using only\n2164         the basic `wcslib`_ WCS transformation.  No `SIP`_ or\n2165         `distortion paper`_ table lookup transformation is applied.\n2166 \n2167         Parameters\n2168         ----------\n2169         {0}\n2170 \n2171             For a transformation that is not two-dimensional, the\n2172             two-argument form must be used.\n2173 \n2174         {1}\n2175 \n2176         Returns\n2177         -------\n2178 \n2179         {2}\n2180 \n2181         Notes\n2182         -----\n2183         The order of the axes for the input world array is determined by\n2184         the ``CTYPEia`` keywords in the FITS header, therefore it may\n2185         not always be of the form (*ra*, *dec*).  The\n2186         `~astropy.wcs.Wcsprm.lat`, `~astropy.wcs.Wcsprm.lng`,\n2187         `~astropy.wcs.Wcsprm.lattyp` and `~astropy.wcs.Wcsprm.lngtyp`\n2188         members can be used to determine the order of the axes.\n2189 \n2190         Raises\n2191         ------\n2192         MemoryError\n2193             Memory allocation failed.\n2194 \n2195         SingularMatrixError\n2196             Linear transformation matrix is singular.\n2197 \n2198         InconsistentAxisTypesError\n2199             Inconsistent or unrecognized coordinate axis types.\n2200 \n2201         ValueError\n2202             Invalid parameter value.\n2203 \n2204         ValueError\n2205             Invalid coordinate transformation parameters.\n2206 \n2207         ValueError\n2208             x- and y-coordinate arrays are not the same size.\n2209 \n2210         InvalidTransformError\n2211             Invalid coordinate transformation parameters.\n2212 \n2213         InvalidTransformError\n2214             Ill-conditioned coordinate transformation parameters.\n2215         \"\"\".format(__.TWO_OR_MORE_ARGS('naxis', 8),\n2216                    __.RA_DEC_ORDER(8),\n2217                    __.RETURNS('pixel coordinates', 8))\n2218 \n2219     def pix2foc(self, *args):\n2220         return self._array_converter(self._pix2foc, None, *args)\n2221     pix2foc.__doc__ = \"\"\"\n2222         Convert pixel coordinates to focal plane coordinates using the\n2223         `SIP`_ polynomial distortion convention and `distortion\n2224         paper`_ table-lookup correction.\n2225 \n2226         The output is in absolute pixel coordinates, not relative to\n2227         ``CRPIX``.\n2228 \n2229         Parameters\n2230         ----------\n2231 \n2232         {0}\n2233 \n2234         Returns\n2235         -------\n2236 \n2237         {1}\n2238 \n2239         Raises\n2240         ------\n2241         MemoryError\n2242             Memory allocation failed.\n2243 \n2244         ValueError\n2245             Invalid coordinate transformation parameters.\n2246         \"\"\".format(__.TWO_OR_MORE_ARGS('2', 8),\n2247                    __.RETURNS('focal coordinates', 8))\n2248 \n2249     def p4_pix2foc(self, *args):\n2250         return self._array_converter(self._p4_pix2foc, None, *args)\n2251     p4_pix2foc.__doc__ = \"\"\"\n2252         Convert pixel coordinates to focal plane coordinates using\n2253         `distortion paper`_ table-lookup correction.\n2254 \n2255         The output is in absolute pixel coordinates, not relative to\n2256         ``CRPIX``.\n2257 \n2258         Parameters\n2259         ----------\n2260 \n2261         {0}\n2262 \n2263         Returns\n2264         -------\n2265 \n2266         {1}\n2267 \n2268         Raises\n2269         ------\n2270         MemoryError\n2271             Memory allocation failed.\n2272 \n2273         ValueError\n2274             Invalid coordinate transformation parameters.\n2275         \"\"\".format(__.TWO_OR_MORE_ARGS('2', 8),\n2276                    __.RETURNS('focal coordinates', 8))\n2277 \n2278     def det2im(self, *args):\n2279         return self._array_converter(self._det2im, None, *args)\n2280     det2im.__doc__ = \"\"\"\n2281         Convert detector coordinates to image plane coordinates using\n2282         `distortion paper`_ table-lookup correction.\n2283 \n2284         The output is in absolute pixel coordinates, not relative to\n2285         ``CRPIX``.\n2286 \n2287         Parameters\n2288         ----------\n2289 \n2290         {0}\n2291 \n2292         Returns\n2293         -------\n2294 \n2295         {1}\n2296 \n2297         Raises\n2298         ------\n2299         MemoryError\n2300             Memory allocation failed.\n2301 \n2302         ValueError\n2303             Invalid coordinate transformation parameters.\n2304         \"\"\".format(__.TWO_OR_MORE_ARGS('2', 8),\n2305                    __.RETURNS('pixel coordinates', 8))\n2306 \n2307     def sip_pix2foc(self, *args):\n2308         if self.sip is None:\n2309             if len(args) == 2:\n2310                 return args[0]\n2311             elif len(args) == 3:\n2312                 return args[:2]\n2313             else:\n2314                 raise TypeError(\"Wrong number of arguments\")\n2315         return self._array_converter(self.sip.pix2foc, None, *args)\n2316     sip_pix2foc.__doc__ = \"\"\"\n2317         Convert pixel coordinates to focal plane coordinates using the\n2318         `SIP`_ polynomial distortion convention.\n2319 \n2320         The output is in pixel coordinates, relative to ``CRPIX``.\n2321 \n2322         FITS WCS `distortion paper`_ table lookup correction is not\n2323         applied, even if that information existed in the FITS file\n2324         that initialized this :class:`~astropy.wcs.WCS` object.  To\n2325         correct for that, use `~astropy.wcs.WCS.pix2foc` or\n2326         `~astropy.wcs.WCS.p4_pix2foc`.\n2327 \n2328         Parameters\n2329         ----------\n2330 \n2331         {0}\n2332 \n2333         Returns\n2334         -------\n2335 \n2336         {1}\n2337 \n2338         Raises\n2339         ------\n2340         MemoryError\n2341             Memory allocation failed.\n2342 \n2343         ValueError\n2344             Invalid coordinate transformation parameters.\n2345         \"\"\".format(__.TWO_OR_MORE_ARGS('2', 8),\n2346                    __.RETURNS('focal coordinates', 8))\n2347 \n2348     def sip_foc2pix(self, *args):\n2349         if self.sip is None:\n2350             if len(args) == 2:\n2351                 return args[0]\n2352             elif len(args) == 3:\n2353                 return args[:2]\n2354             else:\n2355                 raise TypeError(\"Wrong number of arguments\")\n2356         return self._array_converter(self.sip.foc2pix, None, *args)\n2357     sip_foc2pix.__doc__ = \"\"\"\n2358         Convert focal plane coordinates to pixel coordinates using the\n2359         `SIP`_ polynomial distortion convention.\n2360 \n2361         FITS WCS `distortion paper`_ table lookup distortion\n2362         correction is not applied, even if that information existed in\n2363         the FITS file that initialized this `~astropy.wcs.WCS` object.\n2364 \n2365         Parameters\n2366         ----------\n2367 \n2368         {0}\n2369 \n2370         Returns\n2371         -------\n2372 \n2373         {1}\n2374 \n2375         Raises\n2376         ------\n2377         MemoryError\n2378             Memory allocation failed.\n2379 \n2380         ValueError\n2381             Invalid coordinate transformation parameters.\n2382         \"\"\".format(__.TWO_OR_MORE_ARGS('2', 8),\n2383                    __.RETURNS('pixel coordinates', 8))\n2384 \n2385     def to_fits(self, relax=False, key=None):\n2386         \"\"\"\n2387         Generate an `astropy.io.fits.HDUList` object with all of the\n2388         information stored in this object.  This should be logically identical\n2389         to the input FITS file, but it will be normalized in a number of ways.\n2390 \n2391         See `to_header` for some warnings about the output produced.\n2392 \n2393         Parameters\n2394         ----------\n2395 \n2396         relax : bool or int, optional\n2397             Degree of permissiveness:\n2398 \n2399             - `False` (default): Write all extensions that are\n2400               considered to be safe and recommended.\n2401 \n2402             - `True`: Write all recognized informal extensions of the\n2403               WCS standard.\n2404 \n2405             - `int`: a bit field selecting specific extensions to\n2406               write.  See :ref:`relaxwrite` for details.\n2407 \n2408         key : str\n2409             The name of a particular WCS transform to use.  This may be\n2410             either ``' '`` or ``'A'``-``'Z'`` and corresponds to the ``\"a\"``\n2411             part of the ``CTYPEia`` cards.\n2412 \n2413         Returns\n2414         -------\n2415         hdulist : `astropy.io.fits.HDUList`\n2416         \"\"\"\n2417 \n2418         header = self.to_header(relax=relax, key=key)\n2419 \n2420         hdu = fits.PrimaryHDU(header=header)\n2421         hdulist = fits.HDUList(hdu)\n2422 \n2423         self._write_det2im(hdulist)\n2424         self._write_distortion_kw(hdulist)\n2425 \n2426         return hdulist\n2427 \n2428     def to_header(self, relax=None, key=None):\n2429         \"\"\"Generate an `astropy.io.fits.Header` object with the basic WCS\n2430         and SIP information stored in this object.  This should be\n2431         logically identical to the input FITS file, but it will be\n2432         normalized in a number of ways.\n2433 \n2434         .. warning::\n2435 \n2436           This function does not write out FITS WCS `distortion\n2437           paper`_ information, since that requires multiple FITS\n2438           header data units.  To get a full representation of\n2439           everything in this object, use `to_fits`.\n2440 \n2441         Parameters\n2442         ----------\n2443         relax : bool or int, optional\n2444             Degree of permissiveness:\n2445 \n2446             - `False` (default): Write all extensions that are\n2447               considered to be safe and recommended.\n2448 \n2449             - `True`: Write all recognized informal extensions of the\n2450               WCS standard.\n2451 \n2452             - `int`: a bit field selecting specific extensions to\n2453               write.  See :ref:`relaxwrite` for details.\n2454 \n2455             If the ``relax`` keyword argument is not given and any\n2456             keywords were omitted from the output, an\n2457             `~astropy.utils.exceptions.AstropyWarning` is displayed.\n2458             To override this, explicitly pass a value to ``relax``.\n2459 \n2460         key : str\n2461             The name of a particular WCS transform to use.  This may be\n2462             either ``' '`` or ``'A'``-``'Z'`` and corresponds to the ``\"a\"``\n2463             part of the ``CTYPEia`` cards.\n2464 \n2465         Returns\n2466         -------\n2467         header : `astropy.io.fits.Header`\n2468 \n2469         Notes\n2470         -----\n2471         The output header will almost certainly differ from the input in a\n2472         number of respects:\n2473 \n2474           1. The output header only contains WCS-related keywords.  In\n2475              particular, it does not contain syntactically-required\n2476              keywords such as ``SIMPLE``, ``NAXIS``, ``BITPIX``, or\n2477              ``END``.\n2478 \n2479           2. Deprecated (e.g. ``CROTAn``) or non-standard usage will\n2480              be translated to standard (this is partially dependent on\n2481              whether ``fix`` was applied).\n2482 \n2483           3. Quantities will be converted to the units used internally,\n2484              basically SI with the addition of degrees.\n2485 \n2486           4. Floating-point quantities may be given to a different decimal\n2487              precision.\n2488 \n2489           5. Elements of the ``PCi_j`` matrix will be written if and\n2490              only if they differ from the unit matrix.  Thus, if the\n2491              matrix is unity then no elements will be written.\n2492 \n2493           6. Additional keywords such as ``WCSAXES``, ``CUNITia``,\n2494              ``LONPOLEa`` and ``LATPOLEa`` may appear.\n2495 \n2496           7. The original keycomments will be lost, although\n2497              `to_header` tries hard to write meaningful comments.\n2498 \n2499           8. Keyword order may be changed.\n2500 \n2501         \"\"\"\n2502         # default precision for numerical WCS keywords\n2503         precision = WCSHDO_P14\n2504         display_warning = False\n2505         if relax is None:\n2506             display_warning = True\n2507             relax = False\n2508 \n2509         if relax not in (True, False):\n2510             do_sip = relax & WCSHDO_SIP\n2511             relax &= ~WCSHDO_SIP\n2512         else:\n2513             do_sip = relax\n2514             relax = WCSHDO_all if relax is True else WCSHDO_safe\n2515 \n2516         relax = precision | relax\n2517 \n2518         if self.wcs is not None:\n2519             if key is not None:\n2520                 orig_key = self.wcs.alt\n2521                 self.wcs.alt = key\n2522             header_string = self.wcs.to_header(relax)\n2523             header = fits.Header.fromstring(header_string)\n2524             keys_to_remove = [\"\", \" \", \"COMMENT\"]\n2525             for kw in keys_to_remove:\n2526                 if kw in header:\n2527                     del header[kw]\n2528         else:\n2529             header = fits.Header()\n2530 \n2531         if do_sip and self.sip is not None:\n2532             if self.wcs is not None and any(not ctyp.endswith('-SIP') for ctyp in self.wcs.ctype):\n2533                 self._fix_ctype(header, add_sip=True)\n2534 \n2535             for kw, val in self._write_sip_kw().items():\n2536                 header[kw] = val\n2537 \n2538         if not do_sip and self.wcs is not None and any(self.wcs.ctype) and self.sip is not None:\n2539             # This is called when relax is not False or WCSHDO_SIP\n2540             # The default case of ``relax=None`` is handled further in the code.\n2541             header = self._fix_ctype(header, add_sip=False)\n2542 \n2543         if display_warning:\n2544             full_header = self.to_header(relax=True, key=key)\n2545             missing_keys = []\n2546             for kw, val in full_header.items():\n2547                 if kw not in header:\n2548                     missing_keys.append(kw)\n2549 \n2550             if len(missing_keys):\n2551                 warnings.warn(\n2552                     \"Some non-standard WCS keywords were excluded: {0} \"\n2553                     \"Use the ``relax`` kwarg to control this.\".format(\n2554                         ', '.join(missing_keys)),\n2555                     AstropyWarning)\n2556             # called when ``relax=None``\n2557             # This is different from the case of ``relax=False``.\n2558             if any(self.wcs.ctype) and self.sip is not None:\n2559                 header = self._fix_ctype(header, add_sip=False, log_message=False)\n2560         # Finally reset the key. This must be called after ``_fix_ctype``.\n2561         if key is not None:\n2562             self.wcs.alt = orig_key\n2563         return header\n2564 \n2565     def _fix_ctype(self, header, add_sip=True, log_message=True):\n2566         \"\"\"\n2567         Parameters\n2568         ----------\n2569         header : `~astropy.io.fits.Header`\n2570             FITS header.\n2571         add_sip : bool\n2572             Flag indicating whether \"-SIP\" should be added or removed from CTYPE keywords.\n2573 \n2574             Remove \"-SIP\" from CTYPE when writing out a header with relax=False.\n2575             This needs to be done outside ``to_header`` because ``to_header`` runs\n2576             twice when ``relax=False`` and the second time ``relax`` is set to ``True``\n2577             to display the missing keywords.\n2578 \n2579             If the user requested SIP distortion to be written out add \"-SIP\" to\n2580             CTYPE if it is missing.\n2581         \"\"\"\n2582 \n2583         _add_sip_to_ctype = \"\"\"\n2584         Inconsistent SIP distortion information is present in the current WCS:\n2585         SIP coefficients were detected, but CTYPE is missing \"-SIP\" suffix,\n2586         therefore the current WCS is internally inconsistent.\n2587 \n2588         Because relax has been set to True, the resulting output WCS will have\n2589         \"-SIP\" appended to CTYPE in order to make the header internally consistent.\n2590 \n2591         However, this may produce incorrect astrometry in the output WCS, if\n2592         in fact the current WCS is already distortion-corrected.\n2593 \n2594         Therefore, if current WCS is already distortion-corrected (eg, drizzled)\n2595         then SIP distortion components should not apply. In that case, for a WCS\n2596         that is already distortion-corrected, please remove the SIP coefficients\n2597         from the header.\n2598 \n2599         \"\"\"\n2600         if log_message:\n2601             if add_sip:\n2602                 log.info(_add_sip_to_ctype)\n2603         for i in range(1, self.naxis+1):\n2604             # strip() must be called here to cover the case of alt key= \" \"\n2605             kw = 'CTYPE{0}{1}'.format(i, self.wcs.alt).strip()\n2606             if kw in header:\n2607                 if add_sip:\n2608                     val = header[kw].strip(\"-SIP\") + \"-SIP\"\n2609                 else:\n2610                     val = header[kw].strip(\"-SIP\")\n2611                 header[kw] = val\n2612             else:\n2613                 continue\n2614         return header\n2615 \n2616     def to_header_string(self, relax=None):\n2617         \"\"\"\n2618         Identical to `to_header`, but returns a string containing the\n2619         header cards.\n2620         \"\"\"\n2621         return str(self.to_header(relax))\n2622 \n2623     def footprint_to_file(self, filename='footprint.reg', color='green',\n2624                           width=2, coordsys=None):\n2625         \"\"\"\n2626         Writes out a `ds9`_ style regions file. It can be loaded\n2627         directly by `ds9`_.\n2628 \n2629         Parameters\n2630         ----------\n2631         filename : str, optional\n2632             Output file name - default is ``'footprint.reg'``\n2633 \n2634         color : str, optional\n2635             Color to use when plotting the line.\n2636 \n2637         width : int, optional\n2638             Width of the region line.\n2639 \n2640         coordsys : str, optional\n2641             Coordinate system. If not specified (default), the ``radesys``\n2642             value is used. For all possible values, see\n2643             http://ds9.si.edu/doc/ref/region.html#RegionFileFormat\n2644 \n2645         \"\"\"\n2646         comments = ('# Region file format: DS9 version 4.0 \\n'\n2647                     '# global color=green font=\"helvetica 12 bold '\n2648                     'select=1 highlite=1 edit=1 move=1 delete=1 '\n2649                     'include=1 fixed=0 source\\n')\n2650 \n2651         coordsys = coordsys or self.wcs.radesys\n2652 \n2653         if coordsys not in ('PHYSICAL', 'IMAGE', 'FK4', 'B1950', 'FK5',\n2654                             'J2000', 'GALACTIC', 'ECLIPTIC', 'ICRS', 'LINEAR',\n2655                             'AMPLIFIER', 'DETECTOR'):\n2656             raise ValueError(\"Coordinate system '{}' is not supported. A valid\"\n2657                              \" one can be given with the 'coordsys' argument.\"\n2658                              .format(coordsys))\n2659 \n2660         with open(filename, mode='w') as f:\n2661             f.write(comments)\n2662             f.write('{}\\n'.format(coordsys))\n2663             f.write('polygon(')\n2664             self.calc_footprint().tofile(f, sep=',')\n2665             f.write(') # color={0}, width={1:d} \\n'.format(color, width))\n2666 \n2667     @property\n2668     def _naxis1(self):\n2669         return self._naxis[0]\n2670 \n2671     @_naxis1.setter\n2672     def _naxis1(self, value):\n2673         self._naxis[0] = value\n2674 \n2675     @property\n2676     def _naxis2(self):\n2677         return self._naxis[1]\n2678 \n2679     @_naxis2.setter\n2680     def _naxis2(self, value):\n2681         self._naxis[1] = value\n2682 \n2683     def _get_naxis(self, header=None):\n2684         _naxis = []\n2685         if (header is not None and\n2686                 not isinstance(header, (str, bytes))):\n2687             for naxis in itertools.count(1):\n2688                 try:\n2689                     _naxis.append(header['NAXIS{}'.format(naxis)])\n2690                 except KeyError:\n2691                     break\n2692         if len(_naxis) == 0:\n2693             _naxis = [0, 0]\n2694         elif len(_naxis) == 1:\n2695             _naxis.append(0)\n2696         self._naxis = _naxis\n2697 \n2698     def printwcs(self):\n2699         print(repr(self))\n2700 \n2701     def __repr__(self):\n2702         '''\n2703         Return a short description. Simply porting the behavior from\n2704         the `printwcs()` method.\n2705         '''\n2706         description = [\"WCS Keywords\\n\",\n2707                        \"Number of WCS axes: {0!r}\".format(self.naxis)]\n2708         sfmt = ' : ' + \"\".join([\"{\"+\"{0}\".format(i)+\"!r}  \" for i in range(self.naxis)])\n2709 \n2710         keywords = ['CTYPE', 'CRVAL', 'CRPIX']\n2711         values = [self.wcs.ctype, self.wcs.crval, self.wcs.crpix]\n2712         for keyword, value in zip(keywords, values):\n2713             description.append(keyword+sfmt.format(*value))\n2714 \n2715         if hasattr(self.wcs, 'pc'):\n2716             for i in range(self.naxis):\n2717                 s = ''\n2718                 for j in range(self.naxis):\n2719                     s += ''.join(['PC', str(i+1), '_', str(j+1), ' '])\n2720                 s += sfmt\n2721                 description.append(s.format(*self.wcs.pc[i]))\n2722             s = 'CDELT' + sfmt\n2723             description.append(s.format(*self.wcs.cdelt))\n2724         elif hasattr(self.wcs, 'cd'):\n2725             for i in range(self.naxis):\n2726                 s = ''\n2727                 for j in range(self.naxis):\n2728                     s += \"\".join(['CD', str(i+1), '_', str(j+1), ' '])\n2729                 s += sfmt\n2730                 description.append(s.format(*self.wcs.cd[i]))\n2731 \n2732         description.append('NAXIS : {}'.format('  '.join(map(str, self._naxis))))\n2733         return '\\n'.join(description)\n2734 \n2735     def get_axis_types(self):\n2736         \"\"\"\n2737         Similar to `self.wcsprm.axis_types <astropy.wcs.Wcsprm.axis_types>`\n2738         but provides the information in a more Python-friendly format.\n2739 \n2740         Returns\n2741         -------\n2742         result : list of dicts\n2743 \n2744             Returns a list of dictionaries, one for each axis, each\n2745             containing attributes about the type of that axis.\n2746 \n2747             Each dictionary has the following keys:\n2748 \n2749             - 'coordinate_type':\n2750 \n2751               - None: Non-specific coordinate type.\n2752 \n2753               - 'stokes': Stokes coordinate.\n2754 \n2755               - 'celestial': Celestial coordinate (including ``CUBEFACE``).\n2756 \n2757               - 'spectral': Spectral coordinate.\n2758 \n2759             - 'scale':\n2760 \n2761               - 'linear': Linear axis.\n2762 \n2763               - 'quantized': Quantized axis (``STOKES``, ``CUBEFACE``).\n2764 \n2765               - 'non-linear celestial': Non-linear celestial axis.\n2766 \n2767               - 'non-linear spectral': Non-linear spectral axis.\n2768 \n2769               - 'logarithmic': Logarithmic axis.\n2770 \n2771               - 'tabular': Tabular axis.\n2772 \n2773             - 'group'\n2774 \n2775               - Group number, e.g. lookup table number\n2776 \n2777             - 'number'\n2778 \n2779               - For celestial axes:\n2780 \n2781                 - 0: Longitude coordinate.\n2782 \n2783                 - 1: Latitude coordinate.\n2784 \n2785                 - 2: ``CUBEFACE`` number.\n2786 \n2787               - For lookup tables:\n2788 \n2789                 - the axis number in a multidimensional table.\n2790 \n2791             ``CTYPEia`` in ``\"4-3\"`` form with unrecognized algorithm code will\n2792             generate an error.\n2793         \"\"\"\n2794         if self.wcs is None:\n2795             raise AttributeError(\n2796                 \"This WCS object does not have a wcsprm object.\")\n2797 \n2798         coordinate_type_map = {\n2799             0: None,\n2800             1: 'stokes',\n2801             2: 'celestial',\n2802             3: 'spectral'}\n2803 \n2804         scale_map = {\n2805             0: 'linear',\n2806             1: 'quantized',\n2807             2: 'non-linear celestial',\n2808             3: 'non-linear spectral',\n2809             4: 'logarithmic',\n2810             5: 'tabular'}\n2811 \n2812         result = []\n2813         for axis_type in self.wcs.axis_types:\n2814             subresult = {}\n2815 \n2816             coordinate_type = (axis_type // 1000) % 10\n2817             subresult['coordinate_type'] = coordinate_type_map[coordinate_type]\n2818 \n2819             scale = (axis_type // 100) % 10\n2820             subresult['scale'] = scale_map[scale]\n2821 \n2822             group = (axis_type // 10) % 10\n2823             subresult['group'] = group\n2824 \n2825             number = axis_type % 10\n2826             subresult['number'] = number\n2827 \n2828             result.append(subresult)\n2829 \n2830         return result\n2831 \n2832     def __reduce__(self):\n2833         \"\"\"\n2834         Support pickling of WCS objects.  This is done by serializing\n2835         to an in-memory FITS file and dumping that as a string.\n2836         \"\"\"\n2837 \n2838         hdulist = self.to_fits(relax=True)\n2839 \n2840         buffer = io.BytesIO()\n2841         hdulist.writeto(buffer)\n2842 \n2843         return (__WCS_unpickle__,\n2844                 (self.__class__, self.__dict__, buffer.getvalue(),))\n2845 \n2846     def dropaxis(self, dropax):\n2847         \"\"\"\n2848         Remove an axis from the WCS.\n2849 \n2850         Parameters\n2851         ----------\n2852         wcs : `~astropy.wcs.WCS`\n2853             The WCS with naxis to be chopped to naxis-1\n2854         dropax : int\n2855             The index of the WCS to drop, counting from 0 (i.e., python convention,\n2856             not FITS convention)\n2857 \n2858         Returns\n2859         -------\n2860         A new `~astropy.wcs.WCS` instance with one axis fewer\n2861         \"\"\"\n2862         inds = list(range(self.wcs.naxis))\n2863         inds.pop(dropax)\n2864 \n2865         # axis 0 has special meaning to sub\n2866         # if wcs.wcs.ctype == ['RA','DEC','VLSR'], you want\n2867         # wcs.sub([1,2]) to get 'RA','DEC' back\n2868         return self.sub([i+1 for i in inds])\n2869 \n2870     def swapaxes(self, ax0, ax1):\n2871         \"\"\"\n2872         Swap axes in a WCS.\n2873 \n2874         Parameters\n2875         ----------\n2876         wcs : `~astropy.wcs.WCS`\n2877             The WCS to have its axes swapped\n2878         ax0 : int\n2879         ax1 : int\n2880             The indices of the WCS to be swapped, counting from 0 (i.e., python\n2881             convention, not FITS convention)\n2882 \n2883         Returns\n2884         -------\n2885         A new `~astropy.wcs.WCS` instance with the same number of axes, but two\n2886         swapped\n2887         \"\"\"\n2888         inds = list(range(self.wcs.naxis))\n2889         inds[ax0], inds[ax1] = inds[ax1], inds[ax0]\n2890 \n2891         return self.sub([i+1 for i in inds])\n2892 \n2893     def reorient_celestial_first(self):\n2894         \"\"\"\n2895         Reorient the WCS such that the celestial axes are first, followed by\n2896         the spectral axis, followed by any others.\n2897         Assumes at least celestial axes are present.\n2898         \"\"\"\n2899         return self.sub([WCSSUB_CELESTIAL, WCSSUB_SPECTRAL, WCSSUB_STOKES])\n2900 \n2901     def slice(self, view, numpy_order=True):\n2902         \"\"\"\n2903         Slice a WCS instance using a Numpy slice. The order of the slice should\n2904         be reversed (as for the data) compared to the natural WCS order.\n2905 \n2906         Parameters\n2907         ----------\n2908         view : tuple\n2909             A tuple containing the same number of slices as the WCS system.\n2910             The ``step`` method, the third argument to a slice, is not\n2911             presently supported.\n2912         numpy_order : bool\n2913             Use numpy order, i.e. slice the WCS so that an identical slice\n2914             applied to a numpy array will slice the array and WCS in the same\n2915             way. If set to `False`, the WCS will be sliced in FITS order,\n2916             meaning the first slice will be applied to the *last* numpy index\n2917             but the *first* WCS axis.\n2918 \n2919         Returns\n2920         -------\n2921         wcs_new : `~astropy.wcs.WCS`\n2922             A new resampled WCS axis\n2923         \"\"\"\n2924         if hasattr(view, '__len__') and len(view) > self.wcs.naxis:\n2925             raise ValueError(\"Must have # of slices <= # of WCS axes\")\n2926         elif not hasattr(view, '__len__'):  # view MUST be an iterable\n2927             view = [view]\n2928 \n2929         if not all(isinstance(x, slice) for x in view):\n2930             raise ValueError(\"Cannot downsample a WCS with indexing.  Use \"\n2931                              \"wcs.sub or wcs.dropaxis if you want to remove \"\n2932                              \"axes.\")\n2933 \n2934         wcs_new = self.deepcopy()\n2935         if wcs_new.sip is not None:\n2936             sip_crpix = wcs_new.sip.crpix.tolist()\n2937 \n2938         for i, iview in enumerate(view):\n2939             if iview.step is not None and iview.step < 0:\n2940                 raise NotImplementedError(\"Reversing an axis is not \"\n2941                                           \"implemented.\")\n2942 \n2943             if numpy_order:\n2944                 wcs_index = self.wcs.naxis - 1 - i\n2945             else:\n2946                 wcs_index = i\n2947 \n2948             if iview.step is not None and iview.start is None:\n2949                 # Slice from \"None\" is equivalent to slice from 0 (but one\n2950                 # might want to downsample, so allow slices with\n2951                 # None,None,step or None,stop,step)\n2952                 iview = slice(0, iview.stop, iview.step)\n2953 \n2954             if iview.start is not None:\n2955                 if iview.step not in (None, 1):\n2956                     crpix = self.wcs.crpix[wcs_index]\n2957                     cdelt = self.wcs.cdelt[wcs_index]\n2958                     # equivalently (keep this comment so you can compare eqns):\n2959                     # wcs_new.wcs.crpix[wcs_index] =\n2960                     # (crpix - iview.start)*iview.step + 0.5 - iview.step/2.\n2961                     crp = ((crpix - iview.start - 1.)/iview.step\n2962                            + 0.5 + 1./iview.step/2.)\n2963                     wcs_new.wcs.crpix[wcs_index] = crp\n2964                     if wcs_new.sip is not None:\n2965                         sip_crpix[wcs_index] = crp\n2966                     wcs_new.wcs.cdelt[wcs_index] = cdelt * iview.step\n2967                 else:\n2968                     wcs_new.wcs.crpix[wcs_index] -= iview.start\n2969                     if wcs_new.sip is not None:\n2970                         sip_crpix[wcs_index] -= iview.start\n2971 \n2972             try:\n2973                 # range requires integers but the other attributes can also\n2974                 # handle arbitary values, so this needs to be in a try/except.\n2975                 nitems = len(builtins.range(self._naxis[wcs_index])[iview])\n2976             except TypeError as exc:\n2977                 if 'indices must be integers' not in str(exc):\n2978                     raise\n2979                 warnings.warn(\"NAXIS{0} attribute is not updated because at \"\n2980                               \"least one indix ('{1}') is no integer.\"\n2981                               \"\".format(wcs_index, iview), AstropyUserWarning)\n2982             else:\n2983                 wcs_new._naxis[wcs_index] = nitems\n2984 \n2985         if wcs_new.sip is not None:\n2986             wcs_new.sip = Sip(self.sip.a, self.sip.b, self.sip.ap, self.sip.bp,\n2987                               sip_crpix)\n2988 \n2989         return wcs_new\n2990 \n2991     def __getitem__(self, item):\n2992         # \"getitem\" is a shortcut for self.slice; it is very limited\n2993         # there is no obvious and unambiguous interpretation of wcs[1,2,3]\n2994         # We COULD allow wcs[1] to link to wcs.sub([2])\n2995         # (wcs[i] -> wcs.sub([i+1])\n2996         return self.slice(item)\n2997 \n2998     def __iter__(self):\n2999         # Having __getitem__ makes Python think WCS is iterable. However,\n3000         # Python first checks whether __iter__ is present, so we can raise an\n3001         # exception here.\n3002         raise TypeError(\"'{0}' object is not iterable\".format(self.__class__.__name__))\n3003 \n3004     @property\n3005     def axis_type_names(self):\n3006         \"\"\"\n3007         World names for each coordinate axis\n3008 \n3009         Returns\n3010         -------\n3011         A list of names along each axis\n3012         \"\"\"\n3013         names = list(self.wcs.cname)\n3014         types = self.wcs.ctype\n3015         for i in range(len(names)):\n3016             if len(names[i]) > 0:\n3017                 continue\n3018             names[i] = types[i].split('-')[0]\n3019         return names\n3020 \n3021     @property\n3022     def celestial(self):\n3023         \"\"\"\n3024         A copy of the current WCS with only the celestial axes included\n3025         \"\"\"\n3026         return self.sub([WCSSUB_CELESTIAL])\n3027 \n3028     @property\n3029     def is_celestial(self):\n3030         return self.has_celestial and self.naxis == 2\n3031 \n3032     @property\n3033     def has_celestial(self):\n3034         try:\n3035             return self.celestial.naxis == 2\n3036         except InconsistentAxisTypesError:\n3037             return False\n3038 \n3039     @property\n3040     def pixel_scale_matrix(self):\n3041 \n3042         try:\n3043             cdelt = np.matrix(np.diag(self.wcs.get_cdelt()))\n3044             pc = np.matrix(self.wcs.get_pc())\n3045         except InconsistentAxisTypesError:\n3046             try:\n3047                 # for non-celestial axes, get_cdelt doesn't work\n3048                 cdelt = np.matrix(self.wcs.cd) * np.matrix(np.diag(self.wcs.cdelt))\n3049             except AttributeError:\n3050                 cdelt = np.matrix(np.diag(self.wcs.cdelt))\n3051 \n3052             try:\n3053                 pc = np.matrix(self.wcs.pc)\n3054             except AttributeError:\n3055                 pc = 1\n3056 \n3057         pccd = np.array(cdelt * pc)\n3058 \n3059         return pccd\n3060 \n3061     def _as_mpl_axes(self):\n3062         \"\"\"\n3063         Compatibility hook for Matplotlib and WCSAxes.\n3064 \n3065         With this method, one can do:\n3066 \n3067             from astropy.wcs import WCS\n3068             import matplotlib.pyplot as plt\n3069 \n3070             wcs = WCS('filename.fits')\n3071 \n3072             fig = plt.figure()\n3073             ax = fig.add_axes([0.15, 0.1, 0.8, 0.8], projection=wcs)\n3074             ...\n3075 \n3076         and this will generate a plot with the correct WCS coordinates on the\n3077         axes.\n3078         \"\"\"\n3079         from ..visualization.wcsaxes import WCSAxes\n3080         return WCSAxes, {'wcs': self}\n3081 \n3082 \n3083 def __WCS_unpickle__(cls, dct, fits_data):\n3084     \"\"\"\n3085     Unpickles a WCS object from a serialized FITS string.\n3086     \"\"\"\n3087 \n3088     self = cls.__new__(cls)\n3089     self.__dict__.update(dct)\n3090 \n3091     buffer = io.BytesIO(fits_data)\n3092     hdulist = fits.open(buffer)\n3093 \n3094     WCS.__init__(self, hdulist[0].header, hdulist)\n3095 \n3096     return self\n3097 \n3098 \n3099 def find_all_wcs(header, relax=True, keysel=None, fix=True,\n3100                  translate_units='',\n3101                  _do_set=True):\n3102     \"\"\"\n3103     Find all the WCS transformations in the given header.\n3104 \n3105     Parameters\n3106     ----------\n3107     header : str or astropy.io.fits header object.\n3108 \n3109     relax : bool or int, optional\n3110         Degree of permissiveness:\n3111 \n3112         - `True` (default): Admit all recognized informal extensions of the\n3113           WCS standard.\n3114 \n3115         - `False`: Recognize only FITS keywords defined by the\n3116           published WCS standard.\n3117 \n3118         - `int`: a bit field selecting specific extensions to accept.\n3119           See :ref:`relaxread` for details.\n3120 \n3121     keysel : sequence of flags, optional\n3122         A list of flags used to select the keyword types considered by\n3123         wcslib.  When ``None``, only the standard image header\n3124         keywords are considered (and the underlying wcspih() C\n3125         function is called).  To use binary table image array or pixel\n3126         list keywords, *keysel* must be set.\n3127 \n3128         Each element in the list should be one of the following strings:\n3129 \n3130             - 'image': Image header keywords\n3131 \n3132             - 'binary': Binary table image array keywords\n3133 \n3134             - 'pixel': Pixel list keywords\n3135 \n3136         Keywords such as ``EQUIna`` or ``RFRQna`` that are common to\n3137         binary table image arrays and pixel lists (including\n3138         ``WCSNna`` and ``TWCSna``) are selected by both 'binary' and\n3139         'pixel'.\n3140 \n3141     fix : bool, optional\n3142         When `True` (default), call `~astropy.wcs.Wcsprm.fix` on\n3143         the resulting objects to fix any non-standard uses in the\n3144         header.  `FITSFixedWarning` warnings will be emitted if any\n3145         changes were made.\n3146 \n3147     translate_units : str, optional\n3148         Specify which potentially unsafe translations of non-standard\n3149         unit strings to perform.  By default, performs none.  See\n3150         `WCS.fix` for more information about this parameter.  Only\n3151         effective when ``fix`` is `True`.\n3152 \n3153     Returns\n3154     -------\n3155     wcses : list of `WCS` objects\n3156     \"\"\"\n3157 \n3158     if isinstance(header, (str, bytes)):\n3159         header_string = header\n3160     elif isinstance(header, fits.Header):\n3161         header_string = header.tostring()\n3162     else:\n3163         raise TypeError(\n3164             \"header must be a string or astropy.io.fits.Header object\")\n3165 \n3166     keysel_flags = _parse_keysel(keysel)\n3167 \n3168     if isinstance(header_string, str):\n3169         header_bytes = header_string.encode('ascii')\n3170     else:\n3171         header_bytes = header_string\n3172 \n3173     wcsprms = _wcs.find_all_wcs(header_bytes, relax, keysel_flags)\n3174 \n3175     result = []\n3176     for wcsprm in wcsprms:\n3177         subresult = WCS(fix=False, _do_set=False)\n3178         subresult.wcs = wcsprm\n3179         result.append(subresult)\n3180 \n3181         if fix:\n3182             subresult.fix(translate_units)\n3183 \n3184         if _do_set:\n3185             subresult.wcs.set()\n3186 \n3187     return result\n3188 \n3189 \n3190 def validate(source):\n3191     \"\"\"\n3192     Prints a WCS validation report for the given FITS file.\n3193 \n3194     Parameters\n3195     ----------\n3196     source : str path, readable file-like object or `astropy.io.fits.HDUList` object\n3197         The FITS file to validate.\n3198 \n3199     Returns\n3200     -------\n3201     results : WcsValidateResults instance\n3202         The result is returned as nested lists.  The first level\n3203         corresponds to the HDUs in the given file.  The next level has\n3204         an entry for each WCS found in that header.  The special\n3205         subclass of list will pretty-print the results as a table when\n3206         printed.\n3207     \"\"\"\n3208     class _WcsValidateWcsResult(list):\n3209         def __init__(self, key):\n3210             self._key = key\n3211 \n3212         def __repr__(self):\n3213             result = [\"  WCS key '{0}':\".format(self._key or ' ')]\n3214             if len(self):\n3215                 for entry in self:\n3216                     for i, line in enumerate(entry.splitlines()):\n3217                         if i == 0:\n3218                             initial_indent = '    - '\n3219                         else:\n3220                             initial_indent = '      '\n3221                         result.extend(\n3222                             textwrap.wrap(\n3223                                 line,\n3224                                 initial_indent=initial_indent,\n3225                                 subsequent_indent='      '))\n3226             else:\n3227                 result.append(\"    No issues.\")\n3228             return '\\n'.join(result)\n3229 \n3230     class _WcsValidateHduResult(list):\n3231         def __init__(self, hdu_index, hdu_name):\n3232             self._hdu_index = hdu_index\n3233             self._hdu_name = hdu_name\n3234             list.__init__(self)\n3235 \n3236         def __repr__(self):\n3237             if len(self):\n3238                 if self._hdu_name:\n3239                     hdu_name = ' ({0})'.format(self._hdu_name)\n3240                 else:\n3241                     hdu_name = ''\n3242                 result = ['HDU {0}{1}:'.format(self._hdu_index, hdu_name)]\n3243                 for wcs in self:\n3244                     result.append(repr(wcs))\n3245                 return '\\n'.join(result)\n3246             return ''\n3247 \n3248     class _WcsValidateResults(list):\n3249         def __repr__(self):\n3250             result = []\n3251             for hdu in self:\n3252                 content = repr(hdu)\n3253                 if len(content):\n3254                     result.append(content)\n3255             return '\\n\\n'.join(result)\n3256 \n3257     global __warningregistry__\n3258 \n3259     if isinstance(source, fits.HDUList):\n3260         hdulist = source\n3261     else:\n3262         hdulist = fits.open(source)\n3263 \n3264     results = _WcsValidateResults()\n3265 \n3266     for i, hdu in enumerate(hdulist):\n3267         hdu_results = _WcsValidateHduResult(i, hdu.name)\n3268         results.append(hdu_results)\n3269 \n3270         with warnings.catch_warnings(record=True) as warning_lines:\n3271             wcses = find_all_wcs(\n3272                 hdu.header, relax=_wcs.WCSHDR_reject,\n3273                 fix=False, _do_set=False)\n3274 \n3275         for wcs in wcses:\n3276             wcs_results = _WcsValidateWcsResult(wcs.wcs.alt)\n3277             hdu_results.append(wcs_results)\n3278 \n3279             try:\n3280                 del __warningregistry__\n3281             except NameError:\n3282                 pass\n3283 \n3284             with warnings.catch_warnings(record=True) as warning_lines:\n3285                 warnings.resetwarnings()\n3286                 warnings.simplefilter(\n3287                     \"always\", FITSFixedWarning, append=True)\n3288 \n3289                 try:\n3290                     WCS(hdu.header,\n3291                         key=wcs.wcs.alt or ' ',\n3292                         relax=_wcs.WCSHDR_reject,\n3293                         fix=True, _do_set=False)\n3294                 except WcsError as e:\n3295                     wcs_results.append(str(e))\n3296 \n3297                 wcs_results.extend([str(x.message) for x in warning_lines])\n3298 \n3299     return results\n3300 \n[end of astropy/wcs/wcs.py]\n</code>\nI need you to solve this issue by generating a single patch file that I can apply directly to this repository using git apply. Please respond with a single patch file in the following format.\n<patch>\n--- a/file.py\n+++ b/file.py\n@@ -1,27 +1,35 @@\n def euclidean(a, b):\n-    while b:\n-        a, b = b, a % b\n-    return a\n+    if b == 0:\n+        return a\n+    return euclidean(b, a % b)\n \n \n def bresenham(x0, y0, x1, y1):\n     points = []\n     dx = abs(x1 - x0)\n     dy = abs(y1 - y0)\n-    sx = 1 if x0 < x1 else -1\n-    sy = 1 if y0 < y1 else -1\n-    err = dx - dy\n+    x, y = x0, y0\n+    sx = -1 if x0 > x1 else 1\n+    sy = -1 if y0 > y1 else 1\n \n-    while True:\n-        points.append((x0, y0))\n-        if x0 == x1 and y0 == y1:\n-            break\n-        e2 = 2 * err\n-        if e2 > -dy:\n+    if dx > dy:\n+        err = dx / 2.0\n+        while x != x1:\n+            points.append((x, y))\n             err -= dy\n-            x0 += sx\n-        if e2 < dx:\n-            err += dx\n-            y0 += sy\n+            if err < 0:\n+                y += sy\n+                err += dx\n+            x += sx\n+    else:\n+        err = dy / 2.0\n+        while y != y1:\n+            points.append((x, y))\n+            err -= dx\n+            if err < 0:\n+                x += sx\n+                err += dy\n+            y += sy\n \n+    points.append((x, y))\n     return points\n</patch>\n\n"
}